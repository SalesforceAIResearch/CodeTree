[
  {
    "name": 4049,
    "description": "Alice and Bob have decided to play the game \"Rock, Paper, Scissors\". \n\nThe game consists of several rounds, each round is independent of each other. In each round, both players show one of the following things at the same time: rock, paper or scissors. If both players showed the same things then the round outcome is a draw. Otherwise, the following rules applied:\n\n  if one player showed rock and the other one showed scissors, then the player who showed rock is considered the winner and the other one is considered the loser;  if one player showed scissors and the other one showed paper, then the player who showed scissors is considered the winner and the other one is considered the loser;  if one player showed paper and the other one showed rock, then the player who showed paper is considered the winner and the other one is considered the loser. \n\nAlice and Bob decided to play exactly $n$ rounds of the game described above. Alice decided to show rock $a_1$ times, show scissors $a_2$ times and show paper $a_3$ times. Bob decided to show rock $b_1$ times, show scissors $b_2$ times and show paper $b_3$ times. Though, both Alice and Bob did not choose the sequence in which they show things. It is guaranteed that $a_1 + a_2 + a_3 = n$ and $b_1 + b_2 + b_3 = n$.\n\nYour task is to find two numbers:\n\n  the minimum number of round Alice can win;  the maximum number of rounds Alice can win. \n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 10^{9}$) \u2014 the number of rounds.\n\nThe second line of the input contains three integers $a_1, a_2, a_3$ ($0 \\le a_i \\le n$) \u2014 the number of times Alice will show rock, scissors and paper, respectively. It is guaranteed that $a_1 + a_2 + a_3 = n$.\n\nThe third line of the input contains three integers $b_1, b_2, b_3$ ($0 \\le b_j \\le n$) \u2014 the number of times Bob will show rock, scissors and paper, respectively. It is guaranteed that $b_1 + b_2 + b_3 = n$.\n\n\n-----Output-----\n\nPrint two integers: the minimum and the maximum number of rounds Alice can win.\n\n\n-----Examples-----\nInput\n2\n0 1 1\n1 1 0\n\nOutput\n0 1\n\nInput\n15\n5 5 5\n5 5 5\n\nOutput\n0 15\n\nInput\n3\n0 0 3\n3 0 0\n\nOutput\n3 3\n\nInput\n686\n479 178 29\n11 145 530\n\nOutput\n22 334\n\nInput\n319\n10 53 256\n182 103 34\n\nOutput\n119 226\n\n\n\n-----Note-----\n\nIn the first example, Alice will not win any rounds if she shows scissors and then paper and Bob shows rock and then scissors. In the best outcome, Alice will win one round if she shows paper and then scissors, and Bob shows rock and then scissors.\n\nIn the second example, Alice will not win any rounds if Bob shows the same things as Alice each round.\n\nIn the third example, Alice always shows paper and Bob always shows rock so Alice will win all three rounds anyway.",
    "public_tests": {
      "input": [
        "2\n0 1 1\n1 1 0\n",
        "15\n5 5 5\n5 5 5\n",
        "3\n0 0 3\n3 0 0\n",
        "686\n479 178 29\n11 145 530\n",
        "319\n10 53 256\n182 103 34\n"
      ],
      "output": [
        "0 1\n",
        "0 15\n",
        "3 3\n",
        "22 334\n",
        "119 226\n"
      ]
    },
    "private_tests": {
      "input": [
        "2\n0 1 1\n1 1 0\n",
        "15\n5 5 5\n5 5 5\n",
        "3\n0 0 3\n3 0 0\n",
        "686\n479 178 29\n11 145 530\n",
        "319\n10 53 256\n182 103 34\n",
        "47\n14 21 12\n30 9 8\n",
        "94317\n66277 24448 3592\n3499 24653 66165\n",
        "37184\n3965 12513 20706\n436 6945 29803\n",
        "1000000000\n1000000000 0 0\n0 1000000000 0\n",
        "1000000000\n0 1000000000 0\n0 0 1000000000\n",
        "1000000000\n0 0 1000000000\n1000000000 0 0\n",
        "1000000000\n0 1000000000 0\n1 1 999999998\n",
        "29912\n24063 5489 360\n10100 9805 10007\n",
        "57836\n19314 19091 19431\n40680 14990 2166\n",
        "36\n18 12 6\n21 14 1\n",
        "364\n293 64 7\n115 122 127\n",
        "1000000000\n89297275 846134561 64568164\n663031642 222246870 114721488\n",
        "961732220\n361581771 179093036 421057413\n184611622 34898801 742221797\n",
        "205079872\n12699844 177323781 15056247\n56986814 62976260 85116798\n",
        "931934723\n512340462 202375672 217218589\n24862054 655510760 251561909\n",
        "973380539\n83033196 192609087 697738256\n24124463 193317122 755938954\n",
        "611719383\n414247349 142086484 55385550\n24922319 472027283 114769781\n",
        "992526155\n514620001 200095684 277810470\n589233536 389331163 13961456\n",
        "752809980\n85459976 476485751 190864253\n4588621 108831435 639389924\n",
        "1000000000\n156489182 145117627 698393191\n584283682 217785715 197930603\n",
        "664021061\n425727725 96184317 142109019\n463569859 164060143 36391059\n",
        "296306745\n111213479 36570381 148522885\n728762 22073176 273504807\n",
        "211951290\n5585468 170363369 36002453\n12947451 176703278 22300561\n",
        "549443692\n382737848 16796163 149909681\n81990150 441109182 26344360\n",
        "883777408\n404639975 309590423 169547010\n24150042 840092059 19535307\n",
        "492014327\n28667608 206260838 257085881\n403185309 83153498 5675520\n",
        "130891927\n10581814 13979481 106330632\n73152071 41478868 16260988\n",
        "1000000000\n669793172 146615543 183591285\n12476313 9942391 977581296\n",
        "719072390\n55824972 654496367 8751051\n136903854 477745400 104423136\n",
        "812921941\n215642936 426179427 171099578\n6655875 797933401 8332665\n",
        "897080525\n48313410 325560013 523207102\n26603375 25593102 844884048\n",
        "435492892\n15292602 16025347 404174943\n262685515 5562121 167245256\n",
        "801879784\n285055113 483389014 33435657\n196515621 548035465 57328698\n",
        "337749994\n88786600 10360072 238603322\n126215625 187556752 23977617\n",
        "835152660\n4019491 8720352 822412817\n95025620 238071137 502055903\n"
      ],
      "output": [
        "0 1\n",
        "0 15\n",
        "3 3\n",
        "22 334\n",
        "119 226\n",
        "0 29\n",
        "0 52600\n",
        "5132 16914\n",
        "1000000000 1000000000\n",
        "1000000000 1000000000\n",
        "1000000000 1000000000\n",
        "999999998 999999998\n",
        "3956 15654\n",
        "2275 36587\n",
        "0 21\n",
        "51 193\n",
        "0 268586927\n",
        "0 398603459\n",
        "57360707 112872889\n",
        "235916499 739578188\n",
        "0 299766746\n",
        "274555249 553939449\n",
        "0 681103089\n",
        "363065695 566534348\n",
        "282676873 885890491\n",
        "0 342560221\n",
        "13768443 59372319\n",
        "0 40833480\n",
        "274403338 481524161\n",
        "360954626 448325324\n",
        "168256863 291429009\n",
        "48590776 97713366\n",
        "124196839 169034247\n",
        "39847113 168999159\n",
        "200654396 230631476\n",
        "273363536 377756490\n",
        "231367566 284272983\n",
        "31210794 375819468\n",
        "27068953 225362297\n",
        "82285777 107765463\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4053,
    "description": "Ivan wants to play a game with you. He picked some string $s$ of length $n$ consisting only of lowercase Latin letters. \n\nYou don't know this string. Ivan has informed you about all its improper prefixes and suffixes (i.e. prefixes and suffixes of lengths from $1$ to $n-1$), but he didn't tell you which strings are prefixes and which are suffixes.\n\nIvan wants you to guess which of the given $2n-2$ strings are prefixes of the given string and which are suffixes. It may be impossible to guess the string Ivan picked (since multiple strings may give the same set of suffixes and prefixes), but Ivan will accept your answer if there is at least one string that is consistent with it. Let the game begin!\n\n\n-----Input-----\n\nThe first line of the input contains one integer number $n$ ($2 \\le n \\le 100$) \u2014 the length of the guessed string $s$.\n\nThe next $2n-2$ lines are contain prefixes and suffixes, one per line. Each of them is the string of length from $1$ to $n-1$ consisting only of lowercase Latin letters. They can be given in arbitrary order.\n\nIt is guaranteed that there are exactly $2$ strings of each length from $1$ to $n-1$. It is also guaranteed that these strings are prefixes and suffixes of some existing string of length $n$.\n\n\n-----Output-----\n\nPrint one string of length $2n-2$ \u2014 the string consisting only of characters 'P' and 'S'. The number of characters 'P' should be equal to the number of characters 'S'. The $i$-th character of this string should be 'P' if the $i$-th of the input strings is the prefix and 'S' otherwise.\n\nIf there are several possible answers, you can print any.\n\n\n-----Examples-----\nInput\n5\nba\na\nabab\na\naba\nbaba\nab\naba\n\nOutput\nSPPSPSPS\n\nInput\n3\na\naa\naa\na\n\nOutput\nPPSS\n\nInput\n2\na\nc\n\nOutput\nPS\n\n\n\n-----Note-----\n\nThe only string which Ivan can guess in the first example is \"ababa\".\n\nThe only string which Ivan can guess in the second example is \"aaa\". Answers \"SPSP\", \"SSPP\" and \"PSPS\" are also acceptable.\n\nIn the third example Ivan can guess the string \"ac\" or the string \"ca\". The answer \"SP\" is also acceptable.",
    "public_tests": {
      "input": [
        "5\nba\na\nabab\na\naba\nbaba\nab\naba\n",
        "3\na\naa\naa\na\n",
        "2\na\nc\n"
      ],
      "output": [
        "SPPSPSPS\n",
        "PPSS\n",
        "PS\n"
      ]
    },
    "private_tests": {
      "input": [
        "5\nba\na\nabab\na\naba\nbaba\nab\naba\n",
        "3\na\naa\naa\na\n",
        "2\na\nc\n",
        "2\nz\nz\n",
        "5\nba\na\nbaba\na\naba\nabab\nab\naba\n",
        "5\nb\nb\nba\nab\nbab\nbab\nabab\nbaba\n",
        "5\nc\ncd\ncdc\ncdcc\nb\ncb\nccb\ndccb\n",
        "3\nba\nab\na\na\n",
        "3\na\nb\naa\nab\n",
        "3\na\na\nba\nab\n",
        "4\nbab\naba\nab\nab\na\nb\n",
        "5\nabab\nbaba\nb\nb\nbab\nbab\nba\nab\n",
        "4\na\nc\nac\nab\naba\nbac\n",
        "4\nb\nbb\nbba\nbbb\nba\na\n",
        "4\nbab\nab\na\nab\naba\nb\n",
        "3\nb\nb\nab\nba\n",
        "4\nzn\nz\nn\nnzn\nzn\nznz\n",
        "5\nbaba\nabab\na\nab\naba\na\nba\naba\n",
        "5\nba\na\nbaba\nabab\na\naba\nab\naba\n",
        "4\nab\na\nb\nbab\nab\naba\n",
        "5\nh\nhwh\nwhwh\nhw\nh\nwh\nhwh\nhwhw\n",
        "5\nba\na\na\naba\nbaba\nab\naba\nabab\n",
        "4\naba\na\nba\nb\nba\nbab\n",
        "3\nah\nha\nh\nh\n",
        "5\nxy\nyx\nx\nx\nxyx\nxyx\nyxyx\nxyxy\n",
        "5\nbaaa\nbaa\nba\nb\naaaa\naaa\naa\na\n",
        "4\nb\nab\nbab\na\nab\naba\n",
        "5\na\na\nab\nba\naba\naba\nbaba\nabab\n",
        "18\nd\nh\ndj\nxh\ndjs\njxh\ndjsh\nzjxh\ndjshf\nkzjxh\ndjshfk\nhkzjxh\ndjshfkj\nkhkzjxh\ndjshfkje\nskhkzjxh\ndjshfkjeh\ndskhkzjxh\ndjshfkjehd\nhdskhkzjxh\ndjshfkjehds\nehdskhkzjxh\ndjshfkjehdsk\njehdskhkzjxh\ndjshfkjehdskh\nkjehdskhkzjxh\ndjshfkjehdskhk\nfkjehdskhkzjxh\ndjshfkjehdskhkz\nhfkjehdskhkzjxh\ndjshfkjehdskhkzj\nshfkjehdskhkzjxh\ndjshfkjehdskhkzjx\njshfkjehdskhkzjxh\n",
        "4\nza\na\nz\naza\nza\nzaz\n",
        "3\na\nza\naz\na\n",
        "8\na\nha\naha\nhaha\nahaha\nhahaha\nahahaha\nh\nha\nhah\nhaha\nhahah\nhahaha\nhahahah\n",
        "4\na\nab\nbab\nb\nab\naba\n",
        "4\na\nba\naba\nb\nba\nbab\n",
        "4\nc\ncb\nb\nbcb\ncb\ncbc\n",
        "4\nb\nbb\nbbb\na\nba\nbba\n",
        "5\na\naa\naaa\naaaa\nb\nba\nbaa\nbaaa\n",
        "4\na\nb\nab\nab\nbab\naba\n",
        "3\na\naa\nba\nb\n"
      ],
      "output": [
        "SPPSPSPS\n",
        "PPSS\n",
        "PS\n",
        "PS\n",
        "SPSSPPPS\n",
        "PSPSPSSP\n",
        "PPPPSSSS\n",
        "SPPS\n",
        "PSPS\n",
        "PSSP\n",
        "SPPSPS\n",
        "SPPSPSPS\n",
        "PSSPPS\n",
        "PPSPSS\n",
        "SPPSPS\n",
        "PSSP\n",
        "PPSSSP\n",
        "SPPPPSSS\n",
        "SPSPSPPS\n",
        "PPSSSP\n",
        "PPSPSSSP\n",
        "SPSPSPSP\n",
        "SSPPSP\n",
        "SPPS\n",
        "PSPSPSSP\n",
        "PPPPSSSS\n",
        "SPSPSP\n",
        "PSPSPSSP\n",
        "PSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPSPS\n",
        "PSPSSP\n",
        "PSPS\n",
        "SPSPSPSPSPSPSP\n",
        "PPSSSP\n",
        "SPSPSP\n",
        "PPSSSP\n",
        "PPPSSS\n",
        "SSSSPPPP\n",
        "PSPSSP\n",
        "SSPP\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4393,
    "description": "Polycarp loves ciphers. He has invented his own cipher called repeating.\n\nRepeating cipher is used for strings. To encrypt the string $s=s_{1}s_{2} \\dots s_{m}$ ($1 \\le m \\le 10$), Polycarp uses the following algorithm:\n\n  he writes down $s_1$ ones,  he writes down $s_2$ twice,  he writes down $s_3$ three times,  ...  he writes down $s_m$ $m$ times. \n\nFor example, if $s$=\"bab\" the process is: \"b\" $\\to$ \"baa\" $\\to$ \"baabbb\". So the encrypted $s$=\"bab\" is \"baabbb\".\n\nGiven string $t$ \u2014 the result of encryption of some string $s$. Your task is to decrypt it, i. e. find the string $s$.\n\n\n-----Input-----\n\nThe first line contains integer $n$ ($1 \\le n \\le 55$) \u2014 the length of the encrypted string. The second line of the input contains $t$ \u2014 the result of encryption of some string $s$. It contains only lowercase Latin letters. The length of $t$ is exactly $n$.\n\nIt is guaranteed that the answer to the test exists.\n\n\n-----Output-----\n\nPrint such string $s$ that after encryption it equals $t$.\n\n\n-----Examples-----\nInput\n6\nbaabbb\n\nOutput\nbab\nInput\n10\nooopppssss\n\nOutput\noops\nInput\n1\nz\n\nOutput\nz",
    "public_tests": {
      "input": [
        "6\nbaabbb\n",
        "10\nooopppssss\n",
        "1\nz\n"
      ],
      "output": [
        "bab",
        "oops",
        "z"
      ]
    },
    "private_tests": {
      "input": [
        "6\nbaabbb\n",
        "10\nooopppssss\n",
        "1\nz\n",
        "3\nzww\n",
        "55\ncooooonnnnttttteeeeeeeeeeeeessssssssttttttttttttttttttt\n",
        "21\ncoodddeeeecccccoooooo\n",
        "55\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n",
        "36\nabbcccddddeeeeeffffffggggggghhhhhhhh\n"
      ],
      "output": [
        "bab",
        "oops",
        "z",
        "zw",
        "coonteestt",
        "codeco",
        "aaaaaaaaaa",
        "abcdefgh"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4448,
    "description": "The only difference between easy and hard versions is constraints.\n\nIvan plays a computer game that contains some microtransactions to make characters look cooler. Since Ivan wants his character to be really cool, he wants to use some of these microtransactions \u2014 and he won't start playing until he gets all of them.\n\nEach day (during the morning) Ivan earns exactly one burle.\n\nThere are $n$ types of microtransactions in the game. Each microtransaction costs $2$ burles usually and $1$ burle if it is on sale. Ivan has to order exactly $k_i$ microtransactions of the $i$-th type (he orders microtransactions during the evening).\n\nIvan can order any (possibly zero) number of microtransactions of any types during any day (of course, if he has enough money to do it). If the microtransaction he wants to order is on sale then he can buy it for $1$ burle and otherwise he can buy it for $2$ burles.\n\nThere are also $m$ special offers in the game shop. The $j$-th offer $(d_j, t_j)$ means that microtransactions of the $t_j$-th type are on sale during the $d_j$-th day.\n\nIvan wants to order all microtransactions as soon as possible. Your task is to calculate the minimum day when he can buy all microtransactions he want and actually start playing.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n, m \\le 1000$) \u2014 the number of types of microtransactions and the number of special offers in the game shop.\n\nThe second line of the input contains $n$ integers $k_1, k_2, \\dots, k_n$ ($0 \\le k_i \\le 1000$), where $k_i$ is the number of copies of microtransaction of the $i$-th type Ivan has to order. It is guaranteed that sum of all $k_i$ is not less than $1$ and not greater than $1000$.\n\nThe next $m$ lines contain special offers. The $j$-th of these lines contains the $j$-th special offer. It is given as a pair of integers $(d_j, t_j)$ ($1 \\le d_j \\le 1000, 1 \\le t_j \\le n$) and means that microtransactions of the $t_j$-th type are on sale during the $d_j$-th day.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum day when Ivan can order all microtransactions he wants and actually start playing.\n\n\n-----Examples-----\nInput\n5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n\nOutput\n8\n\nInput\n5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n\nOutput\n20",
    "public_tests": {
      "input": [
        "5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n",
        "5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n"
      ],
      "output": [
        "8\n",
        "20\n"
      ]
    },
    "private_tests": {
      "input": [
        "5 6\n1 2 0 2 0\n2 4\n3 3\n1 5\n1 2\n1 5\n2 3\n",
        "5 3\n4 2 1 3 2\n3 5\n4 2\n2 5\n",
        "78 36\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n1 52\n2 6\n9 43\n10 52\n4 63\n9 35\n10 67\n9 17\n3 43\n4 38\n1 27\n9 44\n6 74\n7 3\n8 18\n1 52\n1 68\n5 51\n5 2\n7 50\n1 72\n1 37\n8 64\n10 30\n2 68\n1 59\n5 12\n9 11\n10 23\n2 51\n10 56\n6 17\n1 49\n3 20\n10 62\n10 40\n",
        "10 47\n1 0 0 1 2 1 1 3 1 3\n4 9\n15 5\n6 2\n4 1\n23 3\n9 10\n12 2\n5 10\n2 4\n2 4\n18 4\n23 5\n17 1\n22 3\n24 4\n20 5\n7 3\n17 10\n3 10\n12 10\n4 6\n3 10\n24 2\n12 1\n25 9\n12 5\n25 2\n13 5\n6 5\n4 9\n6 10\n7 2\n7 9\n11 7\n9 4\n1 1\n7 2\n8 1\n11 9\n25 9\n7 8\n9 9\n8 1\n6 4\n22 8\n16 6\n22 6\n",
        "4 7\n23 78 12 46\n100 1\n41 3\n213 2\n321 3\n12 2\n87 1\n76 2\n"
      ],
      "output": [
        "8\n",
        "20\n",
        "1\n",
        "13\n",
        "213\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4034,
    "description": "This is an easy version of the problem. The actual problems are different, but the easy version is almost a subtask of the hard version. Note that the constraints and the output format are different.\n\nYou are given a string $s$ consisting of $n$ lowercase Latin letters.\n\nYou have to color all its characters one of the two colors (each character to exactly one color, the same letters can be colored the same or different colors, i.e. you can choose exactly one color for each index in $s$).\n\nAfter coloring, you can swap any two neighboring characters of the string that are colored different colors. You can perform such an operation arbitrary (possibly, zero) number of times.\n\nThe goal is to make the string sorted, i.e. all characters should be in alphabetical order.\n\nYour task is to say if it is possible to color the given string so that after coloring it can become sorted by some sequence of swaps. Note that you have to restore only coloring, not the sequence of swaps.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 200$) \u2014 the length of $s$.\n\nThe second line of the input contains the string $s$ consisting of exactly $n$ lowercase Latin letters.\n\n\n-----Output-----\n\nIf it is impossible to color the given string so that after coloring it can become sorted by some sequence of swaps, print \"NO\" (without quotes) in the first line.\n\nOtherwise, print \"YES\" in the first line and any correct coloring in the second line (the coloring is the string consisting of $n$ characters, the $i$-th character should be '0' if the $i$-th character is colored the first color and '1' otherwise).\n\n\n-----Examples-----\nInput\n9\nabacbecfd\n\nOutput\nYES\n001010101\n\nInput\n8\naaabbcbb\n\nOutput\nYES\n01011011\n\nInput\n7\nabcdedc\n\nOutput\nNO\n\nInput\n5\nabcde\n\nOutput\nYES\n00000",
    "public_tests": {
      "input": [
        "9\nabacbecfd\n",
        "8\naaabbcbb\n",
        "7\nabcdedc\n",
        "5\nabcde\n"
      ],
      "output": [
        "YES\n001010101\n",
        "YES\n01011011\n",
        "NO\n",
        "YES\n00000\n"
      ]
    },
    "private_tests": {
      "input": [
        "9\nabacbecfd\n",
        "8\naaabbcbb\n",
        "7\nabcdedc\n",
        "5\nabcde\n",
        "200\nraaaaabbbccccccccccdddddeeeeeeeeeeeeeeffffffffffggggggggghhhhhiiiiiiiiijjjjkkkkkkkkkkllllllllmmmmmmmmnnnnnnnooooooooppppppqqqqqqqqqqrrrrrrrrssssttttttttttuuuuuuuuvvvvvvwwwwwwxxxxxxxyyyyyyyzzzzzzzzzzzz\n",
        "200\nazaaaaaabbbbbbbcccccccccdeeeeeeefffffffgggggggghhhhhhiijjjjjkkkkkkkkkllllllmmmmmmmmmmmmnnnnnnoooooopppppppppppqqqqqrrrrrrrrrrrrrssssssssssstttttttttttuuuuuuuuvvvvvvvwwwwwwwwwxxxxxxxyyyyyyyyyyyyzzzzzzz\n",
        "200\naaaaaaaaaaaabbbbccccccdddddddeeeeeeffgggggggggggghhhhhhiiiiiiiiiiiijjjjjjjjjkkkkklllllllmmmmmmmmnnnnnnnnoooooooopppppppppqqqqqrrrrrrrrrssssssssssttuuuuuuuvvvvvvvvvvwwwwwwwwxxxxxxxyyyyyyyyzzzzzzzzzzzzw\n",
        "200\ncnaaaaaabbbbbccccdddddddddddddeeeeeeeeefffffffgggggggggghhhhhhhhhiiijjjjjkkkkkkklllllllmmmmmmmnnnnnnnnnooooooooooooppppppppqqqqqqqqqqqrrrssssssstuuuuuuuuvvvvvvvvvvvvwwwwwwxxxxxxxxyyyyyyyzzzzzzzzzzzzzz\n",
        "200\naaawaaaabbbbccccccccddddddddddeeeeeeeffffffffffgggggggggghhhhhhhhiiiiiiiiijjjjjjjkkkkkkkkklllllllmmmmmmmmnnnnnnooooooooppppppppqqqqrrrrrrrsssssssttttttuuuuuuuuuvvvvvvvvvwwwwwwwxxxxxxxyyyyyyyzzzzzzzzzz\n",
        "200\naaaaabbbbbbbbbbbccccccdddddddddeeeeeefffffffffggggggggggggggghhhhhhhhhiiiiijjjjjjjjjjjkkkkkklllllllmmmmmmmmmnnnnnnnnnnoooooppppppqqqqqqqrrrrrssssssstttttuuuuuuuuvvvvwwwwwwwwwwwwxxxxxxyyyyyyzzzzzzzzzmu\n",
        "200\nfhrvyaaaaaaaaabbbbbbbccccccccccdddddeeeeeeeeeeeeefffffggggggghhiiiiiiiiiiiijjjjjkkkklllllllmmmmmmmmnnnnnoooooppppppppqqqrrrrrrrrrrsssssssstttttttttttttuuuuuuuvvvvvvwwwwwwwwwwwwwwxxxxxxyyyyyyyyzzzzzzzz\n",
        "200\naacdaeabblbxbbbbbbcccccdddddeeeeeeefffffffggggggghhhhhhhhhiiiiiiiiiijjjjjjjkkkkkkkklllllllllmmmmmmmmnnnoooooooopppppqqqqqqqqqqqrrrrrrrrrrsstttttttttuuuuuuuvvvvvvvvvvwwwwwwwxxxxxxxxxxxyyyyyyyyyzzzzzzzz\n",
        "200\naaaaaabbbbbbbbbbbbbccccccccccccdddeeeeeeffffggghhhhhhhhhiiiiiiiijjjjjjjjjjkkkkklllllmmmmmmmmmnnnnnnnoooooooppppppppqqqqqqrrrrrrrrrsssssssttttttttuuuuuuuuvvvvvvvvwwwwwwxxxxxxxyyyyyyyyyyzzzzzzzzzzzeinuy\n",
        "200\nbdimoqrstvaaaaaaaaabbbbbbbbbbcccccddddddeeeeeeeeeeeeeeeffffffgggggggghhhhhhhhhiiiiiiiijjjjjjjjjjjjkkkkkkkklllllllllmmmmmmmmnnnnnoooooooppppppqqqqqqrrrrrrrrssssssstttttuuvvvvvvwwwwwwwwxxxxxxxyyyyyyyzzz\n",
        "200\naaaaeillaoobbwbbxbzbbcccccccdddddddddeeeeeeeffffffffggggghhhhhiiiijjjjjjjkkkkklllllmmmmmmmmmnnnnnnnnnnnnnooooooooppppqqqqqqqqqqrrrrrrrrrrrsssssssssttttttttttuuuuuuuvvvvvvvwwwwwwwxxxxxxyyyyzzzzzzzzzzzz\n",
        "200\naaaaaaaaaabbbbbccccccccccccccdddddddddeeeeeeefffffffffgggggghhhhhhiiiiiiijjjjjjjjjjkkkkkkllllllllmmmmmmmmnnnnnnoooooooppppppqqqqqqqqqqqrrrrrrsssssssttttttttuuuuuuvvvvvwwwwwxxxyyyyzzzzzzzzzzzcddddjksvw\n",
        "200\naaaabbbbcceefffgghhhhijjllnnnnopqrrsstuuvvvwwxxyyyaaaabbbbbbbbcccdddddeeeeeefffffggggghhhhhhhhhiiiiiiiiijjjjkkkkkkllllllmmmmmmmnnnnnoooooooopppppppqqqrrrrrrsssssstttttuuuuuuuvvvvvwwwxxxxxyyyyzzzzzzzzz\n",
        "200\naaaaabbaaaaabcbebebbccecccffgjklccmcmnccoccooddoqqqdddqderreerrsfffsfsfghuuhhhvhhhhvviwixixixxixijjjxjyjzzjzkkklllllmmmmmmmnnnnnnnoooooppppppppppppqqqqqrrrrrrrsssssstttuuuvvvvvvvwwwwwwxxxyyyyyyyyyzzzz\n",
        "200\naaaabbbbbbcccccdddddeeeeeeeffffggggggggghhhhhiiiiijjjjjjjkkkkkkkkllmmmmmmmmmmnnoooooppppqqqqqrrrrrrsssssttttttttttttuuuvvvvvwwwwwwxxxxxxxxyyyzzzzzzzzzaccddddeeffgjjjjkkklllllmmmmnnooppqrrsssttwwxyyzzz\n",
        "200\naaaabbbbbbccccddddefffffgghhhiiiiiiiiijjjjjkkklmmmmnnnnnnooopppppppprrrstuuuuuuvvvvvvvwwxxxxyyyyyyzzaabbbbbbcccdddddddddeffggggghhhhhhiiijjjjjjkkkkllllmmmnnnoopqqqrrssssttttuuuvvvvvwwwwwxxxxyyyyyzzzzz\n",
        "200\naaaaaaabcbbbbcccccdccdcdddddeeddeeeeeeeeeefffffffggghgghghhhhhhhihhhiiiiiiiijijijjjjkjkkkkkkkklkkllllllllmmmmmmmmmmmnnnnnnnnoooppnqnnqoqroooorsoppqqstttqruuurruvrrvvtvttvvtuwvwwwwxxxwxyzzxzzyyzzyyzzzz\n",
        "200\naaaabccccdddddddeefffffffgghhhiiiiiijjjjjjjkkkkkllllmmmmnnnnnoooooooppqqqqqrrrrsssttuuuuuvwwxxyyyzzzaaaaaabbbbbccccddddddeefffffffggghhiiiikkllmmnnnnnnoooooppppqqqqrrrrsttttuuuuuvvvvwwwwwwxxxxyyyzzzzz\n",
        "200\naaaaaaaaabbbbcccccccccccdddeeeeeeeefffgggghhhhhhhhiiiiiiijjjjjjjkkklllmmmmmnnnnnnnoooooppppppppqqqqrrrrrrrssssssttttuuuuuuvvvvvwwwwxxxxxxyyyyyzzzzzzzzaabbbcccdeeefggggghhhhiijjjjkllnpqqqrrsssstuuvwyzz\n",
        "200\naaaabbbbabcaccaadbebfbbbfgbbggchhcccchhhcccicjdkkldldddldmdenoeeooffpppfqrfffuuufggguvgggvggwghhxhyyyhhhhzhiiiiiiijjjjjjjkkkllmmmnnnooooppppppppppppqqqqrssssttttttuuuvvvvwwwwwwwwxxxxxxxxyyyyzzzzzzzzzz\n",
        "200\naaaabccdeffgghhijklllmnnnoopqrrrrssssssttuuvvvwxyyaaaabbbcccccddddddeeeeeeffffgggggghhhhiiiiiiiiiiijjjjjjjjjkkkkllmmmmmmmmnnoooooooooooppppppppppqqqqqqrrrsssstttttuuuuvvvvwwwwwwwxxxxxxxxxyyyyyyyyyyzzz\n",
        "200\naaaaaaabbbbbbcccccccccdddddddeeeeffffffggggghhhhhiiiiiiiijjjjkkkkkllllllllmmmmmmmmmnnnnnnnnnooooooooopppppppppqqqqqqqqrrrrrrrrrrrsssssssttttuuvvvvvvvvvvwwwwwwwxxxxxxyyyyyyzzzzzbceghhhijjjmmooqrrttvvwx\n",
        "200\naaaaaadeafgibbbbbbjbjlncpccccsdsdddtdtdtdeetuevwwezzefffffgggghhhhhhhiijjjjjjjjkkklllllllmmmmmmmmmmmmmnnnnnnnooooooooopppppppppppppqqqqrrrrrrsssssssttttttttttuuuuuuuuuvvvvvvvwwwwwwxxxxxyyyyyyyyyzzzzzz\n",
        "200\naadfgghjjjkmnpqqtuuwwxyzaaaaaaaabbbbbbbbcccccddddeeeeeeeeeffgggghhhhhhiiiiiiiijjjjjjjjkkkkklllllmmmmmmmmmmmnnnnnoooooppppppppqqqqqqqqrrrrrrrrrrrssssstttttttttuuuuuuuuvvvvvvvwwwwwwxxxxxxxyyyyyzzzzzzzzz\n",
        "200\naaaaaaaaaabbbbbbccccccddddddddddddeeeeeeeeeeffffffffggggghhhhhhiiijjjjjjkkkkkklllllllllllllmmmmmmmnnnnnooooooooooppppppppppqqqqqqqqqrrrrrrrrsssssstttttttttuuuuvvvvvvwwwwwwwwwwwxxxxxyyyyyyyyyyzzzzzzzzw\n",
        "200\naaabbsbbbbbbbbbbbbbcccccccccdddddddddddddeeeeeeeeffffffffgggggggggghhhhhhhhhhhhijjjjjjjjjjkkkkkkllllmmmmmnnnnnnoooooooppppppqqqqqqqqqqqqrrrrrsssssssssttttttuuuuuuvvvvvvvvvwwwwwwxxxxxxyyyyyyzzzzzzzzzzz\n",
        "200\njaaaabbbbbbccccccccccccdddddddddddeeeeeeffffffggggghhhhhhhiiiijjjjjjjjjkkkkkkkkkkkllllllllllllmmmmmmmmmmmnnnooooppppppqqqqqqqqqqqqqqrrrrrrrrrrrrsssssttttttuuuuuuuvvvvvwwwwwwwwwwwwxxxxxxxyyyyyyyyzzzzzz\n",
        "200\nzywmerhahxlqsjekpqsdqxnjiduyjrytswiweohctztgpiorwimhjmdfofqynyggcrtzslbyvkuvqrsgwyacyvcuathplliwwshusluiqwuhutnzwvuchfedhwwfdzizltdxibtsaocpnqezstblgkfdcvfsjjyzwalkksumsaljqljmmkcyejwwdkolmcgmodoiclte\n",
        "200\ntoimpgygoklxroowdhpacrtrrwmkhcgcpidapeyxrjmiqgilveimnazyydvnujtqpenfkeqdbylfdinompxupfwvirxohaampqihjueasygkucweptgcowjibgnwyqetynykgoujeargnhjbmntfovwusqavpdwtpnpqpkcgaxbhgdxloyealksmgkxprtpfugixdyfn\n",
        "200\nndwpatpnvwldptairxlxqmzzysfvglpjkwbebtosqvfnoebfvxfpupvohcaazsjbdshoducigmfoqzltdgvmdmputqmoaqscilmtafqrxdunwnijhrtbwonpvpeouednmjswhauahmgyozmbiilxxflkkmwywvuojbrwwbkyhxtdywiktkfcsmozklhrwlwyajekejrx\n",
        "200\nftiqlgirbkmlpzkthoivcifhflyietxsfiwiojenqgxrnetzutdsyfuhrbfpedyksfzuvnqonbyydogbrwsfuuivboanufitbjngppagzfgqwyroaofcdgrwoxwfpvcgzdnkhnwtlavnoppdbddpfpcaaipdcqskcqtccrrspvjyqpvjwziexnmmnlqvacdpgnzzhude\n",
        "9\nbefblmbhg\n",
        "9\nabcabcabc\n",
        "4\ndcda\n",
        "37\nxxxxxxxxxxxxxaaaaaaaaaaaccccccccccacx\n",
        "1\na\n",
        "6\nqdlrhw\n",
        "3\nedc\n",
        "4\ncbca\n",
        "5\nadcbz\n",
        "5\ncbbda\n",
        "4\nhcha\n",
        "4\nzcza\n",
        "6\ncbaabc\n"
      ],
      "output": [
        "YES\n001010101\n",
        "YES\n00000011\n",
        "NO\n",
        "YES\n00000\n",
        "YES\n01111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000000000000\n",
        "YES\n00111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000\n",
        "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n",
        "YES\n00111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n",
        "YES\n00001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000\n",
        "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011\n",
        "YES\n00000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000\n",
        "YES\n00001011101011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000\n",
        "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111\n",
        "YES\n00000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000\n",
        "YES\n00000000100110110101111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000000\n",
        "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111\n",
        "YES\n00000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000\n",
        "YES\n00000001111100101011110111000000110100110110011000011101100110001110101110011101111001010101001011110101001011111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000\n",
        "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111000\n",
        "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000\n",
        "YES\n00000000011110000001101000000011000000000000000000000110100000000111000000000101000001000000000110000000000000000000000000000000010110100111100111110000110001100110010110011010000000100001001100110000\n",
        "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000\n",
        "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111100\n",
        "YES\n00000000100100110101011100110010011110001110101000101110101100110011000100111000111100111011011101000111101111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000\n",
        "YES\n00000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110000000000000\n",
        "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000111111111111111111111111\n",
        "YES\n00000000100011111101000101111010111010101110010001001111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000\n",
        "YES\n00000000000000000000000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111000000000\n",
        "YES\n00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001\n",
        "YES\n00000011111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111100000000000000000000000000000000000000000000000000000000000\n",
        "YES\n01111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "YES\n0\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4186,
    "description": "There are $n$ students in a university. The number of students is even. The $i$-th student has programming skill equal to $a_i$. \n\nThe coach wants to form $\\frac{n}{2}$ teams. Each team should consist of exactly two students, and each student should belong to exactly one team. Two students can form a team only if their skills are equal (otherwise they cannot understand each other and cannot form a team).\n\nStudents can solve problems to increase their skill. One solved problem increases the skill by one.\n\nThe coach wants to know the minimum total number of problems students should solve to form exactly $\\frac{n}{2}$ teams (i.e. each pair of students should form a team). Your task is to find this number.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($2 \\le n \\le 100$) \u2014 the number of students. It is guaranteed that $n$ is even.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the skill of the $i$-th student.\n\n\n-----Output-----\n\nPrint one number \u2014 the minimum total number of problems students should solve to form exactly $\\frac{n}{2}$ teams.\n\n\n-----Examples-----\nInput\n6\n5 10 2 3 14 5\n\nOutput\n5\n\nInput\n2\n1 100\n\nOutput\n99\n\n\n\n-----Note-----\n\nIn the first example the optimal teams will be: $(3, 4)$, $(1, 6)$ and $(2, 5)$, where numbers in brackets are indices of students. Then, to form the first team the third student should solve $1$ problem, to form the second team nobody needs to solve problems and to form the third team the second student should solve $4$ problems so the answer is $1 + 4 = 5$.\n\nIn the second example the first student should solve $99$ problems to form a team with the second one.",
    "public_tests": {
      "input": [
        "6\n5 10 2 3 14 5\n",
        "2\n1 100\n"
      ],
      "output": [
        "5\n",
        "99\n"
      ]
    },
    "private_tests": {
      "input": [
        "6\n5 10 2 3 14 5\n",
        "2\n1 100\n",
        "100\n15 14 32 65 28 96 33 93 48 28 57 20 32 20 90 42 57 53 18 58 94 21 27 29 37 22 94 45 67 60 83 23 20 23 35 93 3 42 6 46 68 46 34 25 17 16 50 5 49 91 23 76 69 100 58 68 81 32 88 41 64 29 37 13 95 25 6 59 74 58 31 35 16 80 13 80 10 59 85 18 16 70 51 40 44 28 8 76 8 87 53 86 28 100 2 73 14 100 52 9\n",
        "100\n25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25 25\n",
        "100\n45 59 59 59 45 45 45 59 45 59 45 45 59 59 45 45 45 59 45 45 45 59 45 59 59 59 45 45 45 59 45 59 59 45 45 59 59 59 59 45 59 59 45 45 45 45 59 45 59 59 59 45 45 45 59 45 45 59 59 45 45 59 45 59 59 59 59 59 59 45 45 59 45 59 59 45 45 59 59 45 59 59 45 59 59 59 45 59 45 45 59 45 59 59 45 59 59 59 59 59\n",
        "100\n89 51 37 17 13 97 78 26 44 82 36 75 39 76 96 34 88 69 27 28 93 31 53 14 93 78 71 95 44 12 34 96 97 88 37 36 16 78 13 87 41 27 44 38 17 72 93 31 27 51 12 53 12 23 14 9 39 87 76 97 28 39 27 81 93 15 1 71 78 26 75 82 89 39 9 81 53 1 26 26 12 38 38 72 99 44 1 1 16 23 27 53 15 97 41 38 27 95 99 69\n",
        "100\n98 52 63 2 18 96 31 58 84 40 41 45 66 100 46 71 26 48 81 20 73 91 68 76 13 93 17 29 64 95 79 21 55 75 19 85 54 51 89 78 15 87 43 59 36 1 90 35 65 56 62 28 86 5 82 49 3 99 33 9 92 32 74 69 27 22 77 16 44 94 34 6 57 70 23 12 61 25 8 11 67 47 83 88 10 14 30 7 97 60 42 37 24 38 53 50 4 80 72 39\n",
        "100\n32 32 32 3 32 3 32 32 3 32 32 3 32 3 32 32 32 32 32 32 3 3 3 3 3 32 32 3 32 3 32 3 32 32 32 32 32 3 3 3 3 3 3 32 3 3 3 3 32 32 32 32 32 3 3 3 3 32 32 32 32 32 3 32 32 32 3 3 32 32 32 3 3 32 32 32 3 3 33 32 3 32 3 32 32 3 3 3 32 3 3 32 32 32 32 32 32 32 3 32\n",
        "100\n31 76 76 31 31 31 31 31 31 76 31 31 76 31 31 76 31 76 31 76 31 76 76 31 31 76 76 76 31 31 31 31 31 76 31 76 31 31 31 76 76 76 76 31 76 76 31 76 76 31 76 31 31 76 31 76 31 76 31 31 76 31 31 31 31 31 76 31 31 31 31 76 31 31 31 76 76 31 31 31 76 31 76 31 76 32 77 76 76 31 76 31 31 31 76 31 31 31 76 31\n",
        "100\n1 1 100 100 1 100 1 1 1 1 1 1 100 1 100 100 100 1 1 100 100 100 100 100 1 100 1 100 1 1 1 100 1 1 100 1 100 1 1 1 100 100 1 1 1 100 100 100 100 100 1 100 100 1 1 1 1 100 1 1 100 1 1 1 1 100 100 100 1 100 1 100 100 100 1 1 100 100 100 100 1 100 1 100 100 1 100 1 100 100 100 100 100 100 1 1 1 100 100 1\n",
        "100\n55 2 69 13 65 71 65 8 9 87 57 43 64 53 3 74 55 31 87 5 79 47 9 29 5 31 59 1 79 97 48 91 36 40 92 37 76 73 21 44 98 55 47 1 96 63 37 83 35 8 50 54 84 100 62 98 88 1 78 57 48 46 55 49 30 100 11 39 27 61 38 55 67 16 95 25 76 67 20 46 91 91 50 33 65 64 82 30 31 42 85 78 42 29 2 69 12 50 54 79\n",
        "2\n1 1\n",
        "66\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "4\n3 2 99 99\n",
        "2\n1 70\n",
        "2\n1 71\n"
      ],
      "output": [
        "5\n",
        "99\n",
        "60\n",
        "0\n",
        "0\n",
        "0\n",
        "50\n",
        "1\n",
        "2\n",
        "99\n",
        "47\n",
        "0\n",
        "0\n",
        "1\n",
        "69\n",
        "70\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4030,
    "description": "This is a hard version of the problem. The actual problems are different, but the easy version is almost a subtask of the hard version. Note that the constraints and the output format are different.\n\nYou are given a string $s$ consisting of $n$ lowercase Latin letters.\n\nYou have to color all its characters the minimum number of colors (each character to exactly one color, the same letters can be colored the same or different colors, i.e. you can choose exactly one color for each index in $s$).\n\nAfter coloring, you can swap any two neighboring characters of the string that are colored different colors. You can perform such an operation arbitrary (possibly, zero) number of times.\n\nThe goal is to make the string sorted, i.e. all characters should be in alphabetical order.\n\nYour task is to find the minimum number of colors which you have to color the given string in so that after coloring it can become sorted by some sequence of swaps. Note that you have to restore only coloring, not the sequence of swaps.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the length of $s$.\n\nThe second line of the input contains the string $s$ consisting of exactly $n$ lowercase Latin letters.\n\n\n-----Output-----\n\nIn the first line print one integer $res$ ($1 \\le res \\le n$) \u2014 the minimum number of colors in which you have to color the given string so that after coloring it can become sorted by some sequence of swaps.\n\nIn the second line print any possible coloring that can be used to sort the string using some sequence of swaps described in the problem statement. The coloring is the array $c$ of length $n$, where $1 \\le c_i \\le res$ and $c_i$ means the color of the $i$-th character.\n\n\n-----Examples-----\nInput\n9\nabacbecfd\n\nOutput\n2\n1 1 2 1 2 1 2 1 2 \n\nInput\n8\naaabbcbb\n\nOutput\n2\n1 2 1 2 1 2 1 1\n\nInput\n7\nabcdedc\n\nOutput\n3\n1 1 1 1 1 2 3 \n\nInput\n5\nabcde\n\nOutput\n1\n1 1 1 1 1",
    "public_tests": {
      "input": [
        "9\nabacbecfd\n",
        "8\naaabbcbb\n",
        "7\nabcdedc\n",
        "5\nabcde\n"
      ],
      "output": [
        "2\n1 1 2 1 2 1 2 1 2 \n",
        "2\n1 2 1 2 1 2 1 1 \n",
        "3\n1 1 1 1 1 2 3 \n",
        "1\n1 1 1 1 1 \n"
      ]
    },
    "private_tests": {
      "input": [
        "9\nabacbecfd\n",
        "8\naaabbcbb\n",
        "7\nabcdedc\n",
        "5\nabcde\n",
        "200\nraaaaabbbccccccccccdddddeeeeeeeeeeeeeeffffffffffggggggggghhhhhiiiiiiiiijjjjkkkkkkkkkkllllllllmmmmmmmmnnnnnnnooooooooppppppqqqqqqqqqqrrrrrrrrssssttttttttttuuuuuuuuvvvvvvwwwwwwxxxxxxxyyyyyyyzzzzzzzzzzzz\n",
        "200\nazaaaaaabbbbbbbcccccccccdeeeeeeefffffffgggggggghhhhhhiijjjjjkkkkkkkkkllllllmmmmmmmmmmmmnnnnnnoooooopppppppppppqqqqqrrrrrrrrrrrrrssssssssssstttttttttttuuuuuuuuvvvvvvvwwwwwwwwwxxxxxxxyyyyyyyyyyyyzzzzzzz\n",
        "200\naaaaaaaaaaaabbbbccccccdddddddeeeeeeffgggggggggggghhhhhhiiiiiiiiiiiijjjjjjjjjkkkkklllllllmmmmmmmmnnnnnnnnoooooooopppppppppqqqqqrrrrrrrrrssssssssssttuuuuuuuvvvvvvvvvvwwwwwwwwxxxxxxxyyyyyyyyzzzzzzzzzzzzw\n",
        "200\ncnaaaaaabbbbbccccdddddddddddddeeeeeeeeefffffffgggggggggghhhhhhhhhiiijjjjjkkkkkkklllllllmmmmmmmnnnnnnnnnooooooooooooppppppppqqqqqqqqqqqrrrssssssstuuuuuuuuvvvvvvvvvvvvwwwwwwxxxxxxxxyyyyyyyzzzzzzzzzzzzzz\n",
        "200\naaawaaaabbbbccccccccddddddddddeeeeeeeffffffffffgggggggggghhhhhhhhiiiiiiiiijjjjjjjkkkkkkkkklllllllmmmmmmmmnnnnnnooooooooppppppppqqqqrrrrrrrsssssssttttttuuuuuuuuuvvvvvvvvvwwwwwwwxxxxxxxyyyyyyyzzzzzzzzzz\n",
        "200\naaaaabbbbbbbbbbbccccccdddddddddeeeeeefffffffffggggggggggggggghhhhhhhhhiiiiijjjjjjjjjjjkkkkkklllllllmmmmmmmmmnnnnnnnnnnoooooppppppqqqqqqqrrrrrssssssstttttuuuuuuuuvvvvwwwwwwwwwwwwxxxxxxyyyyyyzzzzzzzzzmu\n",
        "200\nfhrvyaaaaaaaaabbbbbbbccccccccccdddddeeeeeeeeeeeeefffffggggggghhiiiiiiiiiiiijjjjjkkkklllllllmmmmmmmmnnnnnoooooppppppppqqqrrrrrrrrrrsssssssstttttttttttttuuuuuuuvvvvvvwwwwwwwwwwwwwwxxxxxxyyyyyyyyzzzzzzzz\n",
        "200\naacdaeabblbxbbbbbbcccccdddddeeeeeeefffffffggggggghhhhhhhhhiiiiiiiiiijjjjjjjkkkkkkkklllllllllmmmmmmmmnnnoooooooopppppqqqqqqqqqqqrrrrrrrrrrsstttttttttuuuuuuuvvvvvvvvvvwwwwwwwxxxxxxxxxxxyyyyyyyyyzzzzzzzz\n",
        "200\naaaaaabbbbbbbbbbbbbccccccccccccdddeeeeeeffffggghhhhhhhhhiiiiiiiijjjjjjjjjjkkkkklllllmmmmmmmmmnnnnnnnoooooooppppppppqqqqqqrrrrrrrrrsssssssttttttttuuuuuuuuvvvvvvvvwwwwwwxxxxxxxyyyyyyyyyyzzzzzzzzzzzeinuy\n",
        "200\nbdimoqrstvaaaaaaaaabbbbbbbbbbcccccddddddeeeeeeeeeeeeeeeffffffgggggggghhhhhhhhhiiiiiiiijjjjjjjjjjjjkkkkkkkklllllllllmmmmmmmmnnnnnoooooooppppppqqqqqqrrrrrrrrssssssstttttuuvvvvvvwwwwwwwwxxxxxxxyyyyyyyzzz\n",
        "200\naaaaeillaoobbwbbxbzbbcccccccdddddddddeeeeeeeffffffffggggghhhhhiiiijjjjjjjkkkkklllllmmmmmmmmmnnnnnnnnnnnnnooooooooppppqqqqqqqqqqrrrrrrrrrrrsssssssssttttttttttuuuuuuuvvvvvvvwwwwwwwxxxxxxyyyyzzzzzzzzzzzz\n",
        "200\naaaaaaaaaabbbbbccccccccccccccdddddddddeeeeeeefffffffffgggggghhhhhhiiiiiiijjjjjjjjjjkkkkkkllllllllmmmmmmmmnnnnnnoooooooppppppqqqqqqqqqqqrrrrrrsssssssttttttttuuuuuuvvvvvwwwwwxxxyyyyzzzzzzzzzzzcddddjksvw\n",
        "200\naaaabbbbcceefffgghhhhijjllnnnnopqrrsstuuvvvwwxxyyyaaaabbbbbbbbcccdddddeeeeeefffffggggghhhhhhhhhiiiiiiiiijjjjkkkkkkllllllmmmmmmmnnnnnoooooooopppppppqqqrrrrrrsssssstttttuuuuuuuvvvvvwwwxxxxxyyyyzzzzzzzzz\n",
        "200\naaaaabbaaaaabcbebebbccecccffgjklccmcmnccoccooddoqqqdddqderreerrsfffsfsfghuuhhhvhhhhvviwixixixxixijjjxjyjzzjzkkklllllmmmmmmmnnnnnnnoooooppppppppppppqqqqqrrrrrrrsssssstttuuuvvvvvvvwwwwwwxxxyyyyyyyyyzzzz\n",
        "200\naaaabbbbbbcccccdddddeeeeeeeffffggggggggghhhhhiiiiijjjjjjjkkkkkkkkllmmmmmmmmmmnnoooooppppqqqqqrrrrrrsssssttttttttttttuuuvvvvvwwwwwwxxxxxxxxyyyzzzzzzzzzaccddddeeffgjjjjkkklllllmmmmnnooppqrrsssttwwxyyzzz\n",
        "200\naaaabbbbbbccccddddefffffgghhhiiiiiiiiijjjjjkkklmmmmnnnnnnooopppppppprrrstuuuuuuvvvvvvvwwxxxxyyyyyyzzaabbbbbbcccdddddddddeffggggghhhhhhiiijjjjjjkkkkllllmmmnnnoopqqqrrssssttttuuuvvvvvwwwwwxxxxyyyyyzzzzz\n",
        "200\naaaaaaabcbbbbcccccdccdcdddddeeddeeeeeeeeeefffffffggghgghghhhhhhhihhhiiiiiiiijijijjjjkjkkkkkkkklkkllllllllmmmmmmmmmmmnnnnnnnnoooppnqnnqoqroooorsoppqqstttqruuurruvrrvvtvttvvtuwvwwwwxxxwxyzzxzzyyzzyyzzzz\n",
        "200\naaaabccccdddddddeefffffffgghhhiiiiiijjjjjjjkkkkkllllmmmmnnnnnoooooooppqqqqqrrrrsssttuuuuuvwwxxyyyzzzaaaaaabbbbbccccddddddeefffffffggghhiiiikkllmmnnnnnnoooooppppqqqqrrrrsttttuuuuuvvvvwwwwwwxxxxyyyzzzzz\n",
        "200\naaaaaaaaabbbbcccccccccccdddeeeeeeeefffgggghhhhhhhhiiiiiiijjjjjjjkkklllmmmmmnnnnnnnoooooppppppppqqqqrrrrrrrssssssttttuuuuuuvvvvvwwwwxxxxxxyyyyyzzzzzzzzaabbbcccdeeefggggghhhhiijjjjkllnpqqqrrsssstuuvwyzz\n",
        "200\naaaabbbbabcaccaadbebfbbbfgbbggchhcccchhhcccicjdkkldldddldmdenoeeooffpppfqrfffuuufggguvgggvggwghhxhyyyhhhhzhiiiiiiijjjjjjjkkkllmmmnnnooooppppppppppppqqqqrssssttttttuuuvvvvwwwwwwwwxxxxxxxxyyyyzzzzzzzzzz\n",
        "200\naaaabccdeffgghhijklllmnnnoopqrrrrssssssttuuvvvwxyyaaaabbbcccccddddddeeeeeeffffgggggghhhhiiiiiiiiiiijjjjjjjjjkkkkllmmmmmmmmnnoooooooooooppppppppppqqqqqqrrrsssstttttuuuuvvvvwwwwwwwxxxxxxxxxyyyyyyyyyyzzz\n",
        "200\naaaaaaabbbbbbcccccccccdddddddeeeeffffffggggghhhhhiiiiiiiijjjjkkkkkllllllllmmmmmmmmmnnnnnnnnnooooooooopppppppppqqqqqqqqrrrrrrrrrrrsssssssttttuuvvvvvvvvvvwwwwwwwxxxxxxyyyyyyzzzzzbceghhhijjjmmooqrrttvvwx\n",
        "200\naaaaaadeafgibbbbbbjbjlncpccccsdsdddtdtdtdeetuevwwezzefffffgggghhhhhhhiijjjjjjjjkkklllllllmmmmmmmmmmmmmnnnnnnnooooooooopppppppppppppqqqqrrrrrrsssssssttttttttttuuuuuuuuuvvvvvvvwwwwwwxxxxxyyyyyyyyyzzzzzz\n",
        "200\naadfgghjjjkmnpqqtuuwwxyzaaaaaaaabbbbbbbbcccccddddeeeeeeeeeffgggghhhhhhiiiiiiiijjjjjjjjkkkkklllllmmmmmmmmmmmnnnnnoooooppppppppqqqqqqqqrrrrrrrrrrrssssstttttttttuuuuuuuuvvvvvvvwwwwwwxxxxxxxyyyyyzzzzzzzzz\n",
        "200\naaaaaaaaaabbbbbbccccccddddddddddddeeeeeeeeeeffffffffggggghhhhhhiiijjjjjjkkkkkklllllllllllllmmmmmmmnnnnnooooooooooppppppppppqqqqqqqqqrrrrrrrrsssssstttttttttuuuuvvvvvvwwwwwwwwwwwxxxxxyyyyyyyyyyzzzzzzzzw\n",
        "200\naaabbsbbbbbbbbbbbbbcccccccccdddddddddddddeeeeeeeeffffffffgggggggggghhhhhhhhhhhhijjjjjjjjjjkkkkkkllllmmmmmnnnnnnoooooooppppppqqqqqqqqqqqqrrrrrsssssssssttttttuuuuuuvvvvvvvvvwwwwwwxxxxxxyyyyyyzzzzzzzzzzz\n",
        "200\njaaaabbbbbbccccccccccccdddddddddddeeeeeeffffffggggghhhhhhhiiiijjjjjjjjjkkkkkkkkkkkllllllllllllmmmmmmmmmmmnnnooooppppppqqqqqqqqqqqqqqrrrrrrrrrrrrsssssttttttuuuuuuuvvvvvwwwwwwwwwwwwxxxxxxxyyyyyyyyzzzzzz\n",
        "200\nzywmerhahxlqsjekpqsdqxnjiduyjrytswiweohctztgpiorwimhjmdfofqynyggcrtzslbyvkuvqrsgwyacyvcuathplliwwshusluiqwuhutnzwvuchfedhwwfdzizltdxibtsaocpnqezstblgkfdcvfsjjyzwalkksumsaljqljmmkcyejwwdkolmcgmodoiclte\n",
        "200\ntoimpgygoklxroowdhpacrtrrwmkhcgcpidapeyxrjmiqgilveimnazyydvnujtqpenfkeqdbylfdinompxupfwvirxohaampqihjueasygkucweptgcowjibgnwyqetynykgoujeargnhjbmntfovwusqavpdwtpnpqpkcgaxbhgdxloyealksmgkxprtpfugixdyfn\n",
        "200\nndwpatpnvwldptairxlxqmzzysfvglpjkwbebtosqvfnoebfvxfpupvohcaazsjbdshoducigmfoqzltdgvmdmputqmoaqscilmtafqrxdunwnijhrtbwonpvpeouednmjswhauahmgyozmbiilxxflkkmwywvuojbrwwbkyhxtdywiktkfcsmozklhrwlwyajekejrx\n",
        "200\nftiqlgirbkmlpzkthoivcifhflyietxsfiwiojenqgxrnetzutdsyfuhrbfpedyksfzuvnqonbyydogbrwsfuuivboanufitbjngppagzfgqwyroaofcdgrwoxwfpvcgzdnkhnwtlavnoppdbddpfpcaaipdcqskcqtccrrspvjyqpvjwziexnmmnlqvacdpgnzzhude\n",
        "2\ntj\n",
        "1\nr\n",
        "30\nrzlwlvhfatfwmlpvndtgrxyphfjnnm\n",
        "30\nlpxzyiymhgfemqbhburdctevpybxlv\n",
        "30\ndcjajwrqosgljwltqlozqmldwuukkg\n",
        "30\nxsvbtliwvggtjbvdebjwcirlfnnuio\n",
        "30\nrhkegyacbthzhghossgtqdxtmjfhhx\n",
        "100\nyojtyktazyfegvnnsexxiosqxdlpdwlyojsghpvjpavnvjvttbylqcdabyhleltltzalmgoelxdalcbjejsjxnfebzsxusnujdyk\n",
        "100\nqdvwjzmgfmgngaxzgvuuukxyfzecafuflxpkvemenkorwhmnsxuoxsatlymyjugwjmutfxcksnwhxrwruyqbouyflxhwqhflczzx\n",
        "100\nkshxumdmoygtdgjkwmpsiffhoswmapcogjkngvcznwhtufgjstqrbgwjtxrnoevhwaoaxporxbnrijtwkqnteergtvvwkxvbvwch\n",
        "100\neivzgzvqvlgzdltwjcmpublpvopzxylucxhrrltwmizxtdxdrnmuivvcewvaunkqmnjgqgcwdphbvapebhkltmkfcslvgmnqoseu\n",
        "100\nyvharmmxcxhibqfixtjmhurxchhkvhubxjcveajrkssbsbrxpijxolrtmvanzyybzbdpgzocicakipmkpxhcjtegksbvabfghpfg\n",
        "8\nenjmfmcb\n",
        "8\nhinzrvgh\n"
      ],
      "output": [
        "2\n1 1 2 1 2 1 2 1 2 \n",
        "2\n1 1 1 1 1 1 2 2 \n",
        "3\n1 1 1 1 1 2 3 \n",
        "1\n1 1 1 1 1 \n",
        "2\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n",
        "2\n1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 \n",
        "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 \n",
        "2\n1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n",
        "2\n1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n",
        "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 \n",
        "2\n1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n",
        "2\n1 1 1 1 2 1 2 2 2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n",
        "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 \n",
        "2\n1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n",
        "2\n1 1 1 1 1 1 1 1 2 1 1 2 2 1 2 2 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 \n",
        "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 \n",
        "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 \n",
        "2\n1 1 1 1 1 1 1 2 2 2 2 2 1 1 2 1 2 1 2 2 2 2 1 2 2 2 1 1 1 1 1 1 2 2 1 2 1 1 2 2 1 2 2 1 1 2 2 1 1 1 1 2 2 2 1 2 2 1 1 2 2 1 1 1 2 2 2 1 2 1 2 2 2 1 1 2 2 2 1 2 2 2 2 1 1 2 1 2 1 2 1 2 1 1 2 1 2 2 2 2 1 2 1 2 1 1 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 \n",
        "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 \n",
        "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 \n",
        "2\n1 1 1 1 1 1 1 1 1 2 2 2 2 1 1 1 1 1 1 2 2 1 2 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 1 2 1 1 1 1 1 1 1 1 2 2 2 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 2 2 1 2 1 1 2 2 2 2 1 1 2 2 2 2 2 1 1 1 1 2 2 1 1 1 2 2 1 1 2 2 1 1 2 1 2 2 1 1 2 2 1 2 1 1 1 1 1 1 1 2 1 1 1 1 2 1 1 2 2 1 1 2 2 1 1 1 1 \n",
        "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 \n",
        "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 \n",
        "2\n1 1 1 1 1 1 1 1 2 1 1 2 1 1 2 2 1 2 1 2 1 2 2 2 1 1 2 2 1 1 2 1 1 2 2 2 2 1 1 1 2 2 2 1 2 1 2 1 1 1 2 1 2 2 2 1 2 1 2 2 1 1 2 2 1 1 2 2 1 1 1 2 1 1 2 2 2 1 1 1 2 2 2 2 1 1 2 2 2 1 2 2 1 2 2 2 1 2 1 1 1 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 \n",
        "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 \n",
        "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 \n",
        "2\n1 1 1 1 1 1 1 1 2 1 1 1 2 2 2 2 2 2 1 2 1 1 1 2 1 2 2 2 2 1 2 1 2 2 2 1 2 1 2 1 2 2 2 1 1 2 1 1 1 2 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 \n",
        "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 \n",
        "2\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 \n",
        "2\n1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n",
        "2\n1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n",
        "19\n1 2 3 4 5 4 5 6 5 3 5 5 4 6 7 6 6 5 4 8 5 3 7 8 9 10 4 2 8 5 2 5 6 4 9 4 10 7 10 11 5 1 5 11 7 9 8 7 4 9 9 10 10 9 12 12 8 12 8 2 9 2 11 11 13 7 5 1 6 10 14 2 5 11 6 5 8 7 7 12 4 2 15 13 2 5 13 6 15 7 12 9 10 10 12 4 4 8 13 6 8 10 6 12 9 4 6 13 6 7 10 1 4 5 6 14 13 14 15 16 13 4 4 14 16 1 12 1 11 7 16 3 12 17 7 8 18 10 17 10 11 9 15 1 8 7 18 12 14 13 15 16 17 5 15 8 14 14 2 1 4 19 12 13 13 8 6 12 8 19 13 14 9 13 14 12 12 14 17 2 16 15 4 4 17 14 11 13 12 18 16 12 11 17 11 16 18 13 7 17 \n",
        "19\n1 2 3 3 2 4 1 4 3 4 4 2 3 4 4 3 5 5 4 6 6 4 4 5 5 3 6 7 8 9 9 10 6 8 10 11 6 10 1 2 5 8 7 9 6 10 9 8 4 11 9 7 7 12 1 2 2 12 4 7 5 9 6 7 8 11 9 11 10 12 7 13 14 2 10 11 13 11 9 9 10 8 3 5 8 12 4 5 11 7 3 9 12 15 15 10 8 8 11 12 11 6 13 15 7 2 13 11 6 14 4 14 9 7 13 15 10 4 12 13 16 14 11 4 2 8 15 7 2 11 2 12 14 10 6 13 15 17 8 14 11 14 13 16 12 11 7 15 10 5 4 6 8 9 17 5 10 16 4 7 10 11 10 9 10 13 17 15 18 3 18 14 15 16 3 13 11 2 16 19 13 14 8 12 15 14 3 10 9 7 10 16 6 15 15 3 17 2 16 12 \n",
        "19\n1 2 1 2 3 2 3 4 2 1 5 6 3 3 7 6 4 1 5 1 5 6 1 1 2 4 7 3 7 7 6 8 8 3 9 9 10 4 7 5 6 4 9 8 7 10 11 9 4 3 9 7 5 7 4 8 9 11 12 12 1 6 9 12 11 6 10 8 11 5 12 10 11 9 12 8 7 1 10 6 13 11 4 9 13 9 8 5 6 7 9 9 14 7 7 14 11 10 10 6 15 12 8 8 3 13 5 10 4 10 11 11 12 8 6 15 4 9 10 9 5 9 13 10 6 13 14 11 12 13 7 4 14 16 6 16 14 12 15 2 10 1 12 16 14 14 13 3 3 16 13 14 14 12 4 2 4 5 6 10 15 17 8 4 4 17 14 2 16 3 7 17 2 4 16 14 7 14 17 18 8 12 10 1 14 13 17 9 4 13 4 2 19 15 18 14 18 15 9 3 \n",
        "18\n1 1 2 2 3 4 4 2 5 4 3 4 3 1 5 2 6 4 6 2 7 6 7 7 8 5 2 6 9 3 3 4 8 6 4 6 5 6 9 6 5 8 3 5 6 9 5 1 5 6 10 7 2 9 5 8 8 11 9 9 10 11 2 10 7 11 1 5 5 10 9 10 11 12 2 2 12 10 12 13 8 4 7 13 6 6 12 5 14 10 15 11 6 13 12 7 14 12 11 13 10 10 15 13 1 14 13 9 4 2 8 11 15 11 14 15 15 13 8 4 11 3 4 14 10 5 16 13 1 15 12 13 14 12 4 7 13 17 5 12 11 10 10 15 17 15 15 10 15 10 16 18 18 14 10 16 17 9 8 14 17 9 7 17 17 9 9 8 10 5 15 2 10 11 5 15 4 1 16 17 3 12 13 13 12 14 10 5 18 18 18 11 17 12 1 1 17 6 18 18 \n",
        "2\n1 2 \n",
        "1\n1 \n",
        "8\n1 1 2 2 3 3 4 5 6 4 5 2 5 6 5 3 6 7 4 7 5 2 2 6 7 8 7 7 7 8 \n",
        "10\n1 1 1 1 2 3 2 3 4 5 6 7 3 3 8 4 8 3 4 8 9 4 7 3 5 2 10 3 6 4 \n",
        "8\n1 2 1 3 1 1 2 3 4 2 5 5 6 1 5 2 3 5 4 1 3 5 6 7 2 3 3 7 7 8 \n",
        "8\n1 2 2 3 3 4 5 2 3 6 6 4 5 7 3 7 7 8 5 2 8 6 5 6 7 6 6 4 7 6 \n",
        "7\n1 2 2 3 3 1 4 4 5 2 3 1 3 4 3 3 3 3 4 2 4 5 2 3 5 6 7 7 7 2 \n",
        "15\n1 2 3 2 1 3 2 4 1 2 4 5 4 3 4 4 4 5 3 3 5 5 4 5 3 6 6 6 7 4 7 2 7 8 5 9 9 6 5 8 6 10 5 8 5 9 5 6 6 10 2 9 7 10 10 11 11 2 10 9 11 9 6 9 6 1 12 9 9 11 8 12 10 3 13 14 10 14 15 11 12 11 7 11 3 9 12 13 15 1 7 3 6 7 9 6 11 14 2 11 \n",
        "14\n1 2 1 1 2 1 2 3 4 2 3 2 3 5 2 1 3 3 4 4 4 5 2 2 6 1 7 8 9 6 4 6 5 3 5 6 4 7 6 7 6 7 6 5 4 8 7 7 5 3 5 6 3 6 9 6 8 2 8 2 9 5 10 4 9 8 5 6 11 3 12 9 7 8 4 10 3 8 4 8 5 2 9 13 10 5 2 11 11 3 12 4 9 12 13 11 14 1 1 3 \n",
        "12\n1 1 2 1 2 3 4 3 3 1 4 3 5 4 4 4 2 4 4 4 5 6 6 6 5 4 2 6 7 5 7 6 7 7 7 7 8 3 9 1 7 2 8 4 4 9 9 8 5 5 6 6 10 9 2 8 5 2 6 7 7 10 3 9 3 11 7 11 2 7 8 6 2 11 9 6 10 10 5 3 10 7 9 5 11 11 6 11 5 4 4 3 10 2 4 12 4 3 12 11 \n",
        "14\n1 1 1 1 2 1 2 3 2 4 5 1 6 4 3 2 5 7 4 4 3 8 5 4 3 5 4 1 2 2 6 4 7 3 7 5 5 6 5 4 6 7 1 3 5 8 3 8 6 7 8 5 9 5 5 10 10 4 5 11 6 7 9 7 8 8 10 11 7 11 12 4 12 8 11 13 5 14 8 12 13 11 9 9 7 9 10 12 13 8 10 5 12 9 9 9 10 8 13 6 \n",
        "15\n1 2 3 4 3 4 4 2 5 2 5 5 6 4 6 5 2 3 5 5 6 3 4 2 7 6 6 6 3 7 4 8 2 7 8 3 8 9 7 5 6 5 5 9 5 9 6 2 7 8 8 2 8 9 6 5 9 3 10 9 1 2 2 10 1 10 10 7 10 1 8 11 10 11 12 10 11 7 10 11 7 3 12 13 12 5 13 13 11 6 14 4 15 14 14 13 13 7 14 14 \n",
        "5\n1 1 2 2 3 2 4 5 \n",
        "3\n1 1 1 1 2 2 3 3 \n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4014,
    "description": "Petya studies at university. The current academic year finishes with $n$ special days. Petya needs to pass $m$ exams in those special days. The special days in this problem are numbered from $1$ to $n$.\n\nThere are three values about each exam:  $s_i$ \u2014 the day, when questions for the $i$-th exam will be published,  $d_i$ \u2014 the day of the $i$-th exam ($s_i < d_i$),  $c_i$ \u2014 number of days Petya needs to prepare for the $i$-th exam. For the $i$-th exam Petya should prepare in days between $s_i$ and $d_i-1$, inclusive. \n\nThere are three types of activities for Petya in each day: to spend a day doing nothing (taking a rest), to spend a day passing exactly one exam or to spend a day preparing for exactly one exam. So he can't pass/prepare for multiple exams in a day. He can't mix his activities in a day. If he is preparing for the $i$-th exam in day $j$, then $s_i \\le j < d_i$.\n\nIt is allowed to have breaks in a preparation to an exam and to alternate preparations for different exams in consecutive days. So preparation for an exam is not required to be done in consecutive days.\n\nFind the schedule for Petya to prepare for all exams and pass them, or report that it is impossible.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ $(2 \\le n \\le 100, 1 \\le m \\le n)$ \u2014 the number of days and the number of exams.\n\nEach of the following $m$ lines contains three integers $s_i$, $d_i$, $c_i$ $(1 \\le s_i < d_i \\le n, 1 \\le c_i \\le n)$ \u2014 the day, when questions for the $i$-th exam will be given, the day of the $i$-th exam, number of days Petya needs to prepare for the $i$-th exam. \n\nGuaranteed, that all the exams will be in different days. Questions for different exams can be given in the same day. It is possible that, in the day of some exam, the questions for other exams are given.\n\n\n-----Output-----\n\nIf Petya can not prepare and pass all the exams, print -1. In case of positive answer, print $n$ integers, where the $j$-th number is:  $(m + 1)$, if the $j$-th day is a day of some exam (recall that in each day no more than one exam is conducted),  zero, if in the $j$-th day Petya will have a rest,  $i$ ($1 \\le i \\le m$), if Petya will prepare for the $i$-th exam in the day $j$ (the total number of days Petya prepares for each exam should be strictly equal to the number of days needed to prepare for it).\n\nAssume that the exams are numbered in order of appearing in the input, starting from $1$.\n\nIf there are multiple schedules, print any of them.\n\n\n-----Examples-----\nInput\n5 2\n1 3 1\n1 5 1\n\nOutput\n1 2 3 0 3 \n\nInput\n3 2\n1 3 1\n1 2 1\n\nOutput\n-1\n\nInput\n10 3\n4 7 2\n1 10 3\n8 9 1\n\nOutput\n2 2 2 1 1 0 4 3 4 4 \n\n\n\n-----Note-----\n\nIn the first example Petya can, for example, prepare for exam $1$ in the first day, prepare for exam $2$ in the second day, pass exam $1$ in the third day, relax in the fourth day, and pass exam $2$ in the fifth day. So, he can prepare and pass all exams.\n\nIn the second example, there are three days and two exams. So, Petya can prepare in only one day (because in two other days he should pass exams). Then Petya can not prepare and pass all exams.",
    "public_tests": {
      "input": [
        "5 2\n1 3 1\n1 5 1\n",
        "3 2\n1 3 1\n1 2 1\n",
        "10 3\n4 7 2\n1 10 3\n8 9 1\n"
      ],
      "output": [
        "1 2 3 0 3 \n",
        "-1 \n",
        "2 2 2 1 1 0 4 3 4 4 \n"
      ]
    },
    "private_tests": {
      "input": [
        "5 2\n1 3 1\n1 5 1\n",
        "3 2\n1 3 1\n1 2 1\n",
        "10 3\n4 7 2\n1 10 3\n8 9 1\n",
        "2 1\n1 2 1\n",
        "3 1\n1 2 2\n",
        "3 1\n1 3 2\n",
        "100 1\n1 100 99\n",
        "100 1\n1 100 100\n",
        "100 1\n1 100 98\n",
        "100 2\n1 100 49\n1 99 49\n",
        "10 2\n3 7 4\n6 10 1\n",
        "10 4\n2 5 1\n1 4 2\n4 7 1\n7 10 2\n",
        "20 5\n6 16 3\n4 14 4\n3 13 1\n1 11 1\n10 20 4\n",
        "30 7\n1 4 1\n22 25 1\n25 28 2\n9 12 1\n13 16 1\n11 14 1\n14 17 1\n",
        "50 14\n42 44 2\n38 40 1\n6 8 2\n37 39 1\n33 35 1\n17 19 2\n12 14 2\n2 4 1\n9 11 2\n1 3 1\n32 34 1\n24 26 1\n44 46 1\n48 50 1\n",
        "50 7\n45 50 4\n26 31 5\n35 40 3\n38 43 1\n39 44 3\n3 8 2\n1 6 1\n",
        "50 15\n41 46 5\n35 40 5\n27 32 3\n10 15 2\n1 6 3\n20 25 1\n11 16 1\n9 14 1\n13 18 2\n18 23 3\n2 7 2\n25 30 1\n29 34 1\n43 48 1\n45 50 1\n",
        "90 30\n1 5 1\n57 61 3\n13 17 1\n60 64 1\n73 77 2\n5 9 2\n16 20 3\n29 33 4\n83 87 3\n63 67 2\n35 39 4\n18 22 1\n42 46 4\n46 50 2\n48 52 2\n23 27 1\n82 86 1\n77 81 3\n67 71 2\n22 26 2\n37 41 1\n6 10 1\n50 54 1\n8 12 1\n86 90 1\n68 72 1\n11 15 1\n72 76 1\n62 66 1\n52 56 1\n",
        "100 38\n41 43 1\n53 55 2\n91 93 2\n47 49 2\n77 79 2\n5 7 2\n2 4 2\n28 30 1\n79 81 1\n42 44 1\n27 29 1\n95 97 2\n58 60 1\n57 59 1\n61 63 2\n33 35 2\n22 24 1\n44 46 1\n10 12 2\n13 15 1\n97 99 1\n37 39 2\n18 20 1\n50 52 2\n21 23 1\n68 70 2\n83 85 1\n71 73 2\n65 67 1\n64 66 1\n15 17 1\n7 9 1\n88 90 2\n30 32 1\n74 76 1\n24 26 1\n85 87 1\n82 84 1\n",
        "100 43\n76 77 1\n24 25 1\n2 3 1\n85 86 1\n49 50 1\n15 16 1\n30 31 1\n78 79 1\n54 55 1\n58 59 1\n17 18 1\n67 68 1\n21 22 1\n80 81 1\n35 36 1\n8 9 1\n83 84 1\n44 45 1\n62 63 1\n64 65 1\n72 73 1\n27 28 1\n56 57 1\n12 13 1\n40 41 1\n32 33 1\n52 53 1\n70 71 1\n97 98 1\n37 38 1\n87 88 1\n46 47 1\n89 90 1\n4 5 1\n94 95 1\n60 61 1\n99 100 1\n10 11 1\n74 75 1\n6 7 1\n91 92 1\n19 20 1\n42 43 1\n",
        "100 35\n52 55 1\n55 58 1\n69 72 1\n32 35 1\n9 12 3\n68 71 1\n78 81 3\n51 54 1\n56 59 1\n63 66 3\n4 7 2\n12 15 2\n74 77 1\n87 90 3\n72 75 1\n93 96 2\n39 42 2\n15 18 1\n92 95 1\n23 26 3\n83 86 2\n28 31 2\n58 61 1\n47 50 1\n46 49 2\n31 34 1\n82 85 1\n96 99 2\n38 41 1\n41 44 1\n5 8 1\n34 37 1\n19 22 3\n27 30 1\n67 70 1\n",
        "100 4\n73 83 4\n79 89 8\n12 22 6\n23 33 9\n",
        "100 2\n39 43 1\n82 86 3\n",
        "100 36\n2 5 2\n35 38 1\n55 58 2\n40 43 3\n73 76 2\n30 33 3\n87 90 3\n93 96 1\n97 100 1\n42 45 1\n44 47 1\n66 69 3\n95 98 1\n12 15 3\n47 50 1\n72 75 1\n57 60 2\n1 4 1\n8 11 3\n15 18 1\n22 25 2\n76 79 2\n82 85 1\n91 94 2\n83 86 2\n33 36 1\n62 65 3\n26 29 3\n18 21 1\n36 39 1\n68 71 1\n50 53 1\n51 54 1\n4 7 1\n17 20 1\n78 81 1\n",
        "100 37\n49 51 2\n79 81 2\n46 48 2\n71 73 2\n31 33 2\n42 44 1\n17 19 2\n64 66 2\n24 26 1\n8 10 2\n38 40 1\n1 3 2\n75 77 2\n52 54 2\n11 13 2\n87 89 1\n98 100 2\n60 62 1\n56 58 2\n39 41 1\n92 94 1\n13 15 1\n67 69 2\n4 6 2\n19 21 1\n91 93 1\n86 88 1\n43 45 1\n25 27 1\n94 96 1\n81 83 1\n35 37 1\n34 36 1\n61 63 1\n21 23 1\n83 85 1\n27 29 1\n",
        "50 16\n42 44 2\n18 20 2\n10 12 1\n9 11 2\n25 27 1\n45 47 1\n12 14 1\n29 31 2\n4 6 1\n46 48 1\n32 34 2\n34 36 1\n48 50 1\n21 23 1\n15 17 2\n24 26 1\n",
        "90 29\n1 5 1\n56 60 2\n31 35 4\n86 90 2\n25 29 4\n58 62 2\n73 77 2\n12 16 2\n65 69 1\n16 20 3\n42 46 4\n62 66 2\n2 6 2\n77 81 1\n80 84 1\n48 52 4\n81 85 2\n68 72 1\n57 61 1\n75 79 1\n35 39 2\n37 41 1\n18 22 1\n4 8 2\n67 71 1\n85 89 1\n20 24 1\n10 14 2\n51 55 2\n",
        "100 6\n3 43 40\n46 86 24\n38 78 5\n51 91 8\n59 99 12\n60 100 2\n",
        "100 36\n2 5 2\n35 38 1\n55 58 2\n40 43 3\n73 76 2\n30 33 3\n87 90 3\n93 96 1\n97 100 1\n42 45 1\n44 47 1\n66 69 3\n95 98 1\n12 15 3\n47 50 1\n72 75 1\n57 60 2\n1 4 1\n8 11 3\n15 18 1\n22 25 2\n76 79 2\n82 85 1\n91 94 2\n83 86 2\n33 36 1\n62 65 3\n26 29 3\n18 21 1\n36 39 1\n68 71 1\n50 53 2\n51 54 1\n4 7 1\n17 20 1\n78 81 1\n",
        "100 37\n49 51 2\n79 81 2\n46 48 2\n71 73 2\n31 33 3\n42 44 1\n17 19 2\n64 66 2\n24 26 1\n8 10 2\n38 40 1\n1 3 2\n75 77 2\n52 54 2\n11 13 2\n87 89 1\n98 100 2\n60 62 1\n56 58 2\n39 41 1\n92 94 1\n13 15 1\n67 69 2\n4 6 2\n19 21 1\n91 93 1\n86 88 1\n43 45 1\n25 27 1\n94 96 1\n81 83 1\n35 37 1\n34 36 1\n61 63 1\n21 23 1\n83 85 1\n27 29 1\n",
        "90 30\n1 5 1\n57 61 3\n13 17 1\n60 64 1\n73 77 2\n5 9 2\n16 20 3\n29 33 5\n83 87 3\n63 67 2\n35 39 4\n18 22 1\n42 46 4\n46 50 2\n48 52 2\n23 27 1\n82 86 1\n77 81 3\n67 71 2\n22 26 2\n37 41 1\n6 10 1\n50 54 1\n8 12 1\n86 90 1\n68 72 1\n11 15 1\n72 76 1\n62 66 1\n52 56 1\n",
        "100 38\n41 43 1\n53 55 2\n91 93 2\n47 49 2\n77 79 2\n5 7 2\n2 4 2\n28 30 1\n79 81 1\n42 44 1\n27 29 1\n95 97 2\n58 60 1\n57 59 1\n61 63 2\n33 35 2\n22 24 1\n44 46 1\n10 12 2\n13 15 1\n97 99 1\n37 39 3\n18 20 1\n50 52 2\n21 23 1\n68 70 2\n83 85 1\n71 73 2\n65 67 1\n64 66 1\n15 17 1\n7 9 1\n88 90 2\n30 32 1\n74 76 1\n24 26 1\n85 87 1\n82 84 1\n",
        "100 43\n76 77 1\n24 25 1\n2 3 1\n85 86 1\n49 50 1\n15 16 1\n30 31 1\n78 79 2\n54 55 1\n58 59 1\n17 18 1\n67 68 1\n21 22 1\n80 81 1\n35 36 1\n8 9 1\n83 84 1\n44 45 1\n62 63 1\n64 65 1\n72 73 1\n27 28 1\n56 57 1\n12 13 1\n40 41 1\n32 33 1\n52 53 1\n70 71 1\n97 98 1\n37 38 1\n87 88 1\n46 47 1\n89 90 1\n4 5 1\n94 95 1\n60 61 1\n99 100 1\n10 11 1\n74 75 1\n6 7 1\n91 92 1\n19 20 1\n42 43 1\n",
        "100 35\n52 55 1\n55 58 1\n69 72 1\n32 35 1\n9 12 3\n68 71 1\n78 81 3\n51 54 1\n56 59 1\n63 66 3\n4 7 2\n12 15 2\n74 77 1\n87 90 3\n72 75 1\n93 96 2\n39 42 2\n15 18 1\n92 95 1\n23 26 4\n83 86 2\n28 31 2\n58 61 1\n47 50 1\n46 49 2\n31 34 1\n82 85 1\n96 99 2\n38 41 1\n41 44 1\n5 8 1\n34 37 1\n19 22 3\n27 30 1\n67 70 1\n",
        "97 22\n10 17 6\n24 31 6\n79 86 7\n60 67 6\n42 49 5\n67 74 5\n34 41 4\n70 77 3\n51 58 5\n82 89 2\n89 96 5\n14 21 2\n40 47 1\n1 8 2\n23 30 1\n59 66 1\n50 57 2\n26 33 1\n15 22 2\n90 97 1\n32 39 1\n2 9 4\n",
        "12 11\n1 2 1\n2 3 2\n3 4 3\n4 5 4\n5 6 5\n6 7 6\n7 8 7\n8 9 8\n9 10 9\n10 11 10\n11 12 1\n",
        "6 2\n1 6 3\n1 2 1\n",
        "88 1\n1 2 1\n",
        "4 2\n1 4 1\n1 2 1\n",
        "100 2\n1 100 30\n1 20 1\n",
        "88 1\n1 3 1\n",
        "6 2\n1 5 2\n2 3 1\n",
        "7 2\n1 7 3\n2 3 1\n",
        "8 2\n3 8 2\n4 5 1\n",
        "10 2\n1 10 7\n2 3 1\n",
        "5 2\n1 5 2\n2 3 1\n",
        "10 2\n1 10 5\n2 3 1\n",
        "10 2\n1 10 4\n2 4 2\n",
        "10 2\n1 10 6\n3 7 1\n",
        "10 3\n4 8 2\n1 10 3\n5 6 1\n",
        "20 5\n4 14 4\n3 13 1\n1 11 1\n10 20 4\n6 16 3\n",
        "73 2\n33 35 2\n12 63 44\n",
        "86 5\n66 74 1\n29 33 3\n13 78 38\n20 34 2\n72 85 1\n",
        "9 4\n3 7 1\n6 9 1\n2 3 1\n1 8 2\n",
        "10 2\n1 10 5\n2 4 1\n",
        "10 4\n1 10 2\n1 4 2\n2 5 1\n7 8 1\n",
        "10 2\n1 10 7\n3 7 1\n",
        "96 37\n9 43 23\n60 66 4\n7 15 1\n3 86 4\n30 65 14\n36 38 1\n28 36 8\n68 80 4\n7 22 5\n17 68 1\n7 18 1\n12 47 2\n4 6 2\n5 11 3\n41 55 10\n7 45 22\n6 67 16\n12 50 18\n64 70 2\n21 48 26\n2 17 6\n14 44 10\n63 84 18\n14 19 5\n34 92 56\n51 56 2\n13 20 5\n62 74 2\n1 3 1\n6 46 17\n58 62 4\n10 27 16\n13 37 16\n21 23 1\n48 69 13\n67 82 13\n17 51 18\n",
        "31 3\n2 3 1\n1 12 4\n13 15 1\n",
        "7 2\n2 6 4\n3 4 1\n",
        "20 2\n3 4 1\n2 7 3\n",
        "100 5\n15 53 23\n16 85 32\n59 93 3\n54 57 1\n13 40 11\n",
        "100 5\n24 57 8\n28 72 15\n20 75 49\n27 67 7\n68 100 21\n",
        "11 2\n1 11 5\n4 8 4\n",
        "29 5\n5 10 3\n15 22 2\n18 27 4\n16 20 4\n7 11 1\n",
        "28 4\n4 23 11\n11 12 1\n2 4 1\n16 24 1\n",
        "90 8\n7 10 2\n27 28 1\n18 20 2\n12 48 2\n37 84 27\n29 32 2\n37 73 16\n3 40 14\n",
        "61 2\n12 41 24\n20 29 2\n",
        "27 8\n7 22 2\n3 5 1\n24 26 1\n1 14 1\n4 23 8\n10 12 1\n16 18 1\n5 6 1\n",
        "88 8\n1 5 2\n29 50 7\n36 42 6\n72 81 2\n12 19 4\n65 73 2\n15 80 29\n4 43 16\n",
        "34 17\n1 2 1\n6 12 4\n22 23 1\n5 6 1\n8 30 9\n2 7 2\n22 26 3\n3 34 31\n1 19 9\n4 11 7\n2 5 1\n4 9 3\n8 14 4\n2 22 14\n3 8 5\n32 33 1\n18 31 10\n",
        "9 2\n3 7 2\n1 9 5\n",
        "85 6\n4 63 17\n1 47 2\n25 26 1\n1 8 1\n24 78 44\n39 79 4\n",
        "85 5\n3 44 9\n77 85 7\n3 27 8\n5 42 4\n4 7 1\n",
        "50 5\n7 23 7\n4 12 4\n7 46 14\n15 32 8\n16 24 2\n",
        "6 3\n1 5 1\n1 6 1\n1 2 1\n",
        "100 3\n17 21 3\n1 66 38\n8 22 2\n"
      ],
      "output": [
        "1 2 3 0 3 \n",
        "-1\n",
        "2 2 2 1 1 0 4 3 4 4 \n",
        "1 2 \n",
        "-1\n",
        "1 1 2 \n",
        "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 \n",
        "-1\n",
        "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 2 \n",
        "2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 3 \n",
        "0 0 1 1 1 1 3 2 0 3 \n",
        "2 2 1 5 5 3 5 4 4 5 \n",
        "4 0 3 2 2 2 2 1 1 1 6 5 6 6 5 6 5 5 0 6 \n",
        "1 0 0 8 0 0 0 0 4 0 6 8 5 8 7 8 8 0 0 0 0 2 0 0 8 3 3 8 0 0 \n",
        "10 8 15 15 0 3 3 15 9 9 15 7 7 15 0 0 6 6 15 0 0 0 0 12 0 15 0 0 0 0 0 11 5 15 15 0 4 2 15 15 0 1 1 15 13 15 0 14 0 15 \n",
        "7 0 6 6 0 8 0 8 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 8 0 0 0 3 3 3 4 5 8 5 5 8 8 1 1 1 1 0 8 \n",
        "5 5 5 11 11 16 16 0 8 4 4 7 9 16 16 16 9 16 10 10 10 6 16 0 16 12 3 3 3 16 13 16 0 16 2 2 2 2 2 16 1 1 1 1 1 16 14 16 15 16 \n",
        "1 0 0 0 31 6 6 22 31 31 24 31 27 3 31 7 31 7 7 31 12 31 20 20 16 31 31 0 8 8 8 8 31 0 11 11 11 11 31 21 31 13 13 13 13 31 14 14 15 31 15 31 23 31 30 31 2 2 2 4 31 29 10 31 10 31 31 19 19 26 31 31 28 5 5 31 31 18 18 18 31 17 9 9 9 31 31 25 0 31 \n",
        "0 7 7 39 6 6 39 32 39 19 19 39 20 0 39 31 39 23 0 39 25 17 39 39 36 39 11 8 39 39 34 39 16 16 39 0 22 22 39 0 1 10 39 39 18 39 4 4 39 24 24 39 2 2 39 0 14 13 39 39 15 15 39 30 29 39 39 26 26 39 28 28 39 35 0 39 5 5 39 9 39 38 27 39 39 37 39 33 33 39 3 3 39 0 12 12 39 21 39 0 \n",
        "0 3 44 34 44 40 44 16 44 38 44 24 44 0 6 44 11 44 42 44 13 44 0 2 44 0 22 44 0 7 44 26 44 0 15 44 30 44 0 25 44 43 44 18 44 32 44 0 5 44 0 27 44 9 44 23 44 10 44 36 44 19 44 20 44 0 12 44 0 28 44 21 44 39 44 1 44 8 44 14 44 0 17 44 4 44 31 44 33 44 41 44 0 35 44 0 29 44 37 44 \n",
        "0 0 0 11 11 31 36 36 5 5 5 36 12 12 36 18 0 36 33 33 33 36 20 20 20 36 34 22 22 36 36 26 4 36 36 32 36 29 17 17 36 36 30 36 0 25 25 24 36 36 8 1 0 36 36 2 9 36 36 23 36 0 10 10 10 36 35 6 3 36 36 36 15 13 36 0 36 7 7 7 36 27 21 21 36 36 14 14 14 36 0 19 16 16 36 36 28 28 36 0 \n",
        "0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 3 3 0 0 0 0 5 4 4 4 4 4 4 4 4 4 0 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 2 2 2 2 5 2 2 2 2 0 5 0 0 0 0 0 0 0 0 0 0 0 \n",
        "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
        "18 1 1 37 37 34 37 19 19 19 37 14 14 14 37 20 35 37 29 37 37 21 21 0 37 28 28 28 37 6 6 6 37 26 2 37 30 37 37 4 4 4 37 10 37 11 37 15 0 37 32 33 37 37 3 3 17 37 17 37 0 27 27 27 37 12 12 12 37 31 37 16 5 5 37 37 22 22 37 36 37 23 25 25 37 37 7 7 7 37 24 24 8 37 13 37 9 37 0 37 \n",
        "12 12 38 24 24 38 0 10 10 38 15 15 38 22 38 0 7 7 38 25 38 35 38 9 29 38 38 37 38 0 5 5 38 33 32 38 38 11 20 38 38 6 28 38 38 3 3 38 1 1 38 14 14 38 0 19 19 38 0 18 34 38 38 8 8 38 23 23 38 0 4 4 38 0 13 13 38 0 2 2 38 31 38 36 38 27 16 38 38 0 26 21 38 38 30 38 0 17 17 38 \n",
        "-1\n",
        "-1\n",
        "0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 7 3 3 3 3 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 4 4 4 4 7 4 4 4 5 5 5 5 7 5 5 5 5 7 5 5 5 5 6 6 0 7 7 \n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "14 14 22 22 22 22 0 23 23 1 1 1 1 1 1 12 23 12 19 19 23 23 15 2 2 2 2 2 2 23 23 18 23 21 7 7 7 7 23 13 23 5 5 5 5 5 23 0 23 17 17 9 9 9 9 9 23 23 16 4 4 4 4 4 4 23 23 6 6 6 6 6 8 23 8 8 23 0 3 3 3 3 3 3 3 23 10 10 23 11 11 11 11 11 20 23 23 \n",
        "-1\n",
        "2 3 1 1 1 3 \n",
        "1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
        "2 3 1 3 \n",
        "2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 \n",
        "1 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
        "1 2 3 1 3 0 \n",
        "1 2 3 1 1 0 3 \n",
        "0 0 1 2 3 1 0 3 \n",
        "1 2 3 1 1 1 1 1 1 3 \n",
        "1 2 3 1 3 \n",
        "1 2 3 1 1 1 1 0 0 3 \n",
        "1 2 2 3 1 1 1 0 0 3 \n",
        "1 1 2 1 1 1 3 1 0 3 \n",
        "2 2 2 1 3 4 1 4 0 4 \n",
        "3 0 2 1 1 1 1 5 5 5 6 4 6 6 4 6 4 4 0 6 \n",
        "0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 3 0 0 0 0 0 0 0 0 0 0 \n",
        "0 0 0 0 0 0 0 0 0 0 0 0 3 3 3 3 3 3 3 4 4 3 3 3 3 3 3 3 2 2 2 3 6 6 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 1 0 0 0 0 0 5 0 6 0 0 0 6 0 0 0 0 0 0 6 0 \n",
        "4 3 5 1 4 2 5 5 5 \n",
        "1 2 1 3 1 1 1 0 0 3 \n",
        "2 2 3 5 5 1 4 5 1 5 \n",
        "1 1 2 1 1 1 3 1 1 3 \n",
        "-1\n",
        "2 1 4 2 2 2 0 0 0 0 0 4 3 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
        "-1\n",
        "0 2 1 3 2 2 3 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
        "0 0 0 0 0 0 0 0 0 0 0 0 5 5 5 5 5 5 5 5 5 5 5 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 6 1 1 1 1 1 1 1 2 2 2 2 2 6 4 2 2 6 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 6 3 0 0 0 0 0 0 6 0 0 0 0 0 0 0 \n",
        "-1\n",
        "1 1 1 2 2 2 2 3 1 1 3 \n",
        "0 0 0 0 1 1 1 5 0 6 6 0 0 0 2 4 4 4 4 6 2 6 3 3 3 3 6 0 0 \n",
        "0 3 0 5 1 1 1 1 1 1 2 5 1 1 1 1 1 4 0 0 0 0 5 5 0 0 0 0 \n",
        "0 0 8 8 8 8 1 1 8 9 8 8 8 8 8 8 8 3 3 9 8 8 4 4 0 0 2 9 6 6 0 9 0 0 0 0 7 7 7 9 7 7 7 7 7 7 7 9 7 7 7 7 7 7 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 9 5 5 5 5 5 5 5 5 5 0 9 0 0 0 0 0 0 \n",
        "0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 0 0 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n",
        "-1\n",
        "1 1 0 8 9 8 8 8 8 8 8 5 5 5 5 8 8 8 9 8 8 8 8 8 8 7 7 7 2 2 2 2 2 2 2 3 3 3 3 3 3 9 9 7 7 7 7 7 7 9 7 7 7 7 7 7 7 7 7 7 7 7 7 7 6 6 7 7 7 7 7 7 9 4 4 0 0 0 0 9 9 0 0 0 0 0 0 0 \n",
        "-1\n",
        "2 2 1 1 2 2 3 2 3 \n",
        "4 2 2 1 1 1 1 7 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 5 3 7 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 7 5 5 5 5 5 5 5 5 6 6 6 6 0 0 7 7 0 0 0 0 0 0 \n",
        "0 0 3 5 3 3 6 3 3 3 3 3 4 4 4 4 1 1 1 1 1 1 1 1 1 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 6 0 6 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 2 2 2 2 2 2 0 6 \n",
        "0 0 0 2 2 2 2 1 1 1 1 6 1 1 1 5 5 4 4 4 4 4 6 6 4 4 4 3 3 3 3 6 3 3 3 3 3 3 3 3 3 3 0 0 0 6 0 0 0 0 \n",
        "3 4 1 2 4 4 \n",
        "2 2 2 2 2 2 2 3 3 2 2 2 2 2 2 2 1 1 1 2 4 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4729,
    "description": "Insecure Inc.\u00a0has decided to shift directions after a failed attempt at developing a new encryption standard. Their new effort is a password system used to hide a password inside another string of characters we denote as a message. However, it is important that the message has a certain property relative to the hidden password.\n\nLet us assume that we denote the characters of the password as $ c_1 c_2 \\ldots c_ P$ (although those characters need not be distinct). To be a valid message for the password, if you start from the beginning of the message and search for any character from the set $\\{ c_1, \\ldots , c_ P \\} $, it must be that $c_1$ is the first that you find. Subsequently, if you continue looking from that point of the message for any character from the set $\\{ c_2, \\ldots , c_ P \\} $, it must be that $c_2$ is the next that you find. Continuing in that manner, $c_3$ must be the next character from the set $\\{ c_3, \\ldots , c_ P\\} $, and so on until reaching $c_ P$.\n\nFor example, if the password is ABC, then the string HAPPYBIRTHDAYCACEY is a valid message.\n - Notice that A is the first of the set $\\{ $A, B, C$\\} $ to appear in the message. (The initial H is not relevant.)\n - Following the A that was found, the next occurrence from the set $\\{ $B, C$\\} $ is B.\n - Following the B that was found, the next occurrence from the set $\\{ $C$\\} $ is indeed C.\n\n (Note that the A in DAY is not relevant, since we are only looking for a C at this point, and the additional A and C in CACEY are not relevant, because we have already completed the password with the first C.)\n\nHowever, for the password ABC, the string TRAGICBIRTHDAYCACEY is not a valid message.\n - While the A is the first of the set $\\{ $A, B, C$\\} $ to appear in the string,\n\n the next occurrence from the set $\\{ $B, C$\\} $ is C rather than B.\n\nAlso, the string HAPPYBIRTHDAY is not a valid message for the password ABC because the C never appears.\n\nAs an example with duplicate letters in the password, consider the password SECRET. For this password, the string SOMECHORESARETOUGH is a valid message. In contrast, the string SOMECHEERSARETOUGH is not a valid message, because an extraneous E is found at the point when an R is first expected.\n\n-----Input-----\nThe input consists of a single line containing two strings. The first string is the password, having length $P$, with $3 \\leq P \\leq 8$. The second string has length $S$, with $10 \\leq S \\leq 40$. Both strings will consist solely of uppercase letters. (That is, neither string can include whitespace, lowercase letters, digits, or other special characters.)\n\n-----Output-----\nOutput a single line with the word PASS if the second string is a valid message for the password, or FAIL otherwise.\n\n\n\n-----Examples-----\nSample Input 1:\nABC HAPPYBIRTHDAYCACEY\nSample Output 1:\nPASS\n\nSample Input 2:\nABC TRAGICBIRTHDAYCACEY\nSample Output 2:\nFAIL\n\nSample Input 3:\nABC HAPPYBIRTHDAY\nSample Output 3:\nFAIL\n\nSample Input 4:\nSECRET SOMECHORESARETOUGH\nSample Output 4:\nPASS",
    "public_tests": {
      "input": [
        "ABC HAPPYBIRTHDAYCACEY\n",
        "ABC TRAGICBIRTHDAYCACEY\n",
        "ABC HAPPYBIRTHDAY\n",
        "SECRET SOMECHORESARETOUGH\n"
      ],
      "output": [
        "PASS\n",
        "FAIL\n",
        "FAIL\n",
        "PASS\n"
      ]
    },
    "private_tests": {
      "input": [
        "ABC HAPPYBIRTHDAYCACEY\n",
        "ABC TRAGICBIRTHDAYCACEY\n",
        "ABC HAPPYBIRTHDAY\n",
        "SECRET SOMECHORESARETOUGH\n",
        "SECRET SOMECHEERSARETOUGH\n"
      ],
      "output": [
        "PASS\n",
        "FAIL\n",
        "FAIL\n",
        "PASS\n",
        "FAIL\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4859,
    "description": "Since entering $2^\\text {nd}$ grade Theta has daily math homework sheets. The problems on her worksheet usually go like this: There is a certain number of birds, dogs, and cats on a farm. Together they have $14$ legs. How many birds, dogs, and cats could there be? Write down as many answers as you can! \n\nIt is always the same problem, just written in different ways: sometimes with horses, cows, sheep, goats, chickens, beetles, or even spiders \u2013 but never with snakes or fishes!\n\nCan you write a program to double-check Theta\u2019s answers?\n\n-----Input-----\nInput consists of a single line with $4$ integers: $b$, $d$, $c$, and $l$, with $b$, $d$, and $c$ representing the numbers of legs the first, second, and third type of animal has. You are given that $0 < b, c, d \\le 100$ because some farm animals in these math problems may be centipedes. The total number of legs is given by $l$ ($0 \\le l \\le 250$).\n\n-----Output-----\nOutput all possible answers, each on a separate line, in lexicographical order so that they are sorted by the number of the first animal, ties broken by the second and third animal numbers\u2019, respectively. Separate the number of the first, second, and third animal with spaces. If there are no possible solutions, output impossible on a single line!\n\n-----Examples-----\nSample Input 1:\n2 4 4 14\nSample Output 1:\n1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n3 2 0\n5 0 1\n5 1 0\n7 0 0\n\nSample Input 2:\n100 80 60 240\nSample Output 2:\n0 0 4\n0 3 0\n1 1 1",
    "public_tests": {
      "input": [
        "2 4 4 14\n",
        "100 80 60 240\n"
      ],
      "output": [
        "1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n3 2 0\n5 0 1\n5 1 0\n7 0 0\n",
        "0 0 4\n0 3 0\n1 1 1\n"
      ]
    },
    "private_tests": {
      "input": [
        "2 4 4 14\n",
        "100 80 60 240\n",
        "2 4 6 9\n"
      ],
      "output": [
        "1 0 3\n1 1 2\n1 2 1\n1 3 0\n3 0 2\n3 1 1\n3 2 0\n5 0 1\n5 1 0\n7 0 0\n",
        "0 0 4\n0 3 0\n1 1 1\n",
        "impossible\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4769,
    "description": "Pero is a passionate lover of riddles. The newest type of riddles he has come across requires the solver to check whether the given word is a multigram.\n\nA multigram is a word that consists of concatenating two or more words that are all mutually anagrams. The first of these words is called the root of the multigram. For instance, the word bbabab is a multigram with the root bba because it consists of anagrams bba and bab.\n\nHelp Pero solve the riddle by determining whether his word is a multigram and determining its root in case it is. If there are multiple possible roots of the multigram, output the shortest.\n\nNote: Two words are mutually anagrams if one of them can be obtained from the other by changing the letter order.\n\n-----Input-----\nThe first and only line of input contains a word of length at most $100000$ lowercase English characters.\n\n-----Output-----\nIf the given word is not a multigram, output -1. Otherwise, output the shortest root of the given word in one line.\n\n-----Examples-----\nSample Input 1:\naaaa\nSample Output 1:\na\n\nSample Input 2:\nab\nSample Output 2:\n-1",
    "public_tests": {
      "input": [
        "aaaa\n",
        "ab\n"
      ],
      "output": [
        "a\n",
        "-1\n"
      ]
    },
    "private_tests": {
      "input": [
        "aaaa\n",
        "ab\n",
        "bbabab\n"
      ],
      "output": [
        "a\n",
        "-1\n",
        "bba\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4102,
    "description": "-----Input-----\n\nThe only line of the input contains a string of digits. The length of the string is between 1 and 10, inclusive.\n\n\n-----Output-----\n\nOutput \"Yes\" or \"No\".\n\n\n-----Examples-----\nInput\n373\n\nOutput\nYes\n\nInput\n121\n\nOutput\nNo\n\nInput\n436\n\nOutput\nYes",
    "public_tests": {
      "input": [
        "373\n",
        "121\n",
        "436\n"
      ],
      "output": [
        "Yes\n",
        "No\n",
        "Yes\n"
      ]
    },
    "private_tests": {
      "input": [
        "373\n",
        "121\n",
        "436\n",
        "7\n",
        "8\n",
        "4357087936\n",
        "806975480\n",
        "3333333333\n",
        "90785\n",
        "7467467\n",
        "64\n",
        "584609\n",
        "69154\n",
        "363567\n",
        "557654\n",
        "772961\n",
        "788958\n",
        "992045\n",
        "116325\n",
        "320432\n",
        "314729\n",
        "531816\n",
        "673902416\n",
        "880089713\n",
        "004176110\n"
      ],
      "output": [
        "Yes\n",
        "No\n",
        "Yes\n",
        "Yes\n",
        "No\n",
        "Yes\n",
        "Yes\n",
        "Yes\n",
        "Yes\n",
        "Yes\n",
        "Yes\n",
        "Yes\n",
        "No\n",
        "No\n",
        "No\n",
        "No\n",
        "No\n",
        "No\n",
        "No\n",
        "No\n",
        "No\n",
        "No\n",
        "No\n",
        "No\n",
        "No\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4784,
    "description": "Pero has negotiated a Very Good data plan with his internet provider. The provider will let Pero use up $X$ megabytes to surf the internet per month. Each megabyte that he doesn\u2019t spend in that month gets transferred to the next month and can still be spent. Of course, Pero can only spend the megabytes he actually has.\n\nIf we know how much megabytes Pero has spent in each of the first $N$ months of using the plan, determine how many megabytes Pero will have available in the $N + 1$ month of using the plan.\n\n-----Input-----\nThe first line of input contains the integer $X$ ($1 \\leq X \\leq 100$). The second line of input contains the integer $N$ ($1 \\leq N \\leq 100$). Each of the following $N$ lines contains an integer $P_ i$ ($0 \\leq P_ i \\leq 10000$), the number of megabytes spent in each of the first $N$ months of using the plan. Numbers $P_ i$ will be such that Pero will never use more megabytes than he actually has.\n\n-----Output-----\nThe first and only line of output must contain the required value from the task.\n\n-----Examples-----\nSample Input 1:\n10\n3\n4\n6\n2\nSample Output 1:\n28\n\nSample Input 2:\n10\n3\n10\n2\n12\nSample Output 2:\n16",
    "public_tests": {
      "input": [
        "10\n3\n4\n6\n2\n",
        "10\n3\n10\n2\n12\n"
      ],
      "output": [
        "28\n",
        "16\n"
      ]
    },
    "private_tests": {
      "input": [
        "10\n3\n4\n6\n2\n",
        "10\n3\n10\n2\n12\n",
        "15\n3\n15\n10\n20\n"
      ],
      "output": [
        "28\n",
        "16\n",
        "15\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4416,
    "description": "Easy and hard versions are actually different problems, so read statements of both problems completely and carefully.\n\nSummer vacation has started so Alice and Bob want to play and joy, but... Their mom doesn't think so. She says that they have to read some amount of books before all entertainments. Alice and Bob will read each book together to end this exercise faster.\n\nThere are $n$ books in the family library. The $i$-th book is described by three integers: $t_i$ \u2014 the amount of time Alice and Bob need to spend to read it, $a_i$ (equals $1$ if Alice likes the $i$-th book and $0$ if not), and $b_i$ (equals $1$ if Bob likes the $i$-th book and $0$ if not).\n\nSo they need to choose some books from the given $n$ books in such a way that:\n\n  Alice likes at least $k$ books from the chosen set and Bob likes at least $k$ books from the chosen set;  the total reading time of these books is minimized (they are children and want to play and joy as soon a possible). \n\nThe set they choose is the same for both Alice an Bob (it's shared between them) and they read all books together, so the total reading time is the sum of $t_i$ over all books that are in the chosen set.\n\nYour task is to help them and find any suitable set of books or determine that it is impossible to find such a set.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 2 \\cdot 10^5$).\n\nThe next $n$ lines contain descriptions of books, one description per line: the $i$-th line contains three integers $t_i$, $a_i$ and $b_i$ ($1 \\le t_i \\le 10^4$, $0 \\le a_i, b_i \\le 1$), where:\n\n  $t_i$ \u2014 the amount of time required for reading the $i$-th book;  $a_i$ equals $1$ if Alice likes the $i$-th book and $0$ otherwise;  $b_i$ equals $1$ if Bob likes the $i$-th book and $0$ otherwise. \n\n\n-----Output-----\n\nIf there is no solution, print only one integer -1. Otherwise print one integer $T$ \u2014 the minimum total reading time of the suitable set of books.\n\n\n-----Examples-----\nInput\n8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n\nOutput\n18\n\nInput\n5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n\nOutput\n8\n\nInput\n5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n\nOutput\n-1",
    "public_tests": {
      "input": [
        "8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n",
        "5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n",
        "5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n"
      ],
      "output": [
        "18\n",
        "8\n",
        "-1\n"
      ]
    },
    "private_tests": {
      "input": [
        "8 4\n7 1 1\n2 1 1\n4 0 1\n8 1 1\n1 0 1\n1 1 1\n1 0 1\n3 0 0\n",
        "5 2\n6 0 0\n9 0 0\n1 0 1\n2 1 1\n5 1 0\n",
        "5 3\n3 0 0\n2 1 0\n3 1 0\n5 0 1\n3 0 1\n",
        "3 1\n3 0 1\n3 1 0\n3 0 0\n",
        "2 1\n7 1 1\n2 1 1\n",
        "5 1\n2 1 0\n2 0 1\n1 0 1\n1 1 0\n1 0 1\n",
        "6 3\n7 1 1\n8 0 0\n9 1 1\n6 1 0\n10 1 1\n5 0 0\n"
      ],
      "output": [
        "18\n",
        "8\n",
        "-1\n",
        "6\n",
        "2\n",
        "2\n",
        "26\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4156,
    "description": "The busses in Berland are equipped with a video surveillance system. The system records information about changes in the number of passengers in a bus after stops.\n\nIf $x$ is the number of passengers in a bus just before the current bus stop and $y$ is the number of passengers in the bus just after current bus stop, the system records the number $y-x$. So the system records show how number of passengers changed.\n\nThe test run was made for single bus and $n$ bus stops. Thus, the system recorded the sequence of integers $a_1, a_2, \\dots, a_n$ (exactly one number for each bus stop), where $a_i$ is the record for the bus stop $i$. The bus stops are numbered from $1$ to $n$ in chronological order.\n\nDetermine the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to $w$ (that is, at any time in the bus there should be from $0$ to $w$ passengers inclusive).\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $w$ $(1 \\le n \\le 1\\,000, 1 \\le w \\le 10^{9})$ \u2014 the number of bus stops and the capacity of the bus.\n\nThe second line contains a sequence $a_1, a_2, \\dots, a_n$ $(-10^{6} \\le a_i \\le 10^{6})$, where $a_i$ equals to the number, which has been recorded by the video system after the $i$-th bus stop.\n\n\n-----Output-----\n\nPrint the number of possible ways how many people could be in the bus before the first bus stop, if the bus has a capacity equals to $w$. If the situation is contradictory (i.e. for any initial number of passengers there will be a contradiction), print 0.\n\n\n-----Examples-----\nInput\n3 5\n2 1 -3\n\nOutput\n3\n\nInput\n2 4\n-1 1\n\nOutput\n4\n\nInput\n4 10\n2 4 1 2\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example initially in the bus could be $0$, $1$ or $2$ passengers.\n\nIn the second example initially in the bus could be $1$, $2$, $3$ or $4$ passengers.\n\nIn the third example initially in the bus could be $0$ or $1$ passenger.",
    "public_tests": {
      "input": [
        "3 5\n2 1 -3\n",
        "2 4\n-1 1\n",
        "4 10\n2 4 1 2\n"
      ],
      "output": [
        "3\n",
        "4\n",
        "2\n"
      ]
    },
    "private_tests": {
      "input": [
        "3 5\n2 1 -3\n",
        "2 4\n-1 1\n",
        "4 10\n2 4 1 2\n",
        "2 10\n-1 2\n",
        "3 4\n-3 -4 4\n",
        "10 1\n-1 -1 3 -4 2 3 0 -3 3 2\n",
        "5 21\n-3 2 -4 -1 -5\n",
        "5 9\n-2 -1 2 -1 -2\n",
        "8 7\n-5 0 -3 1 -1 5 0 -6\n",
        "3 4\n-2 -1 0\n",
        "1 1000000000\n0\n",
        "2 1000000000\n-1000000 -1000000\n",
        "2 1000000000\n1000000 -1000000\n",
        "2 1000000000\n-1000000 1000000\n",
        "2 1000000000\n1000000 1000000\n",
        "102 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "1 1234564\n1\n",
        "3 4\n1 2 3\n"
      ],
      "output": [
        "3\n",
        "4\n",
        "2\n",
        "9\n",
        "0\n",
        "0\n",
        "11\n",
        "6\n",
        "0\n",
        "2\n",
        "1000000001\n",
        "998000001\n",
        "999000001\n",
        "999000001\n",
        "998000001\n",
        "0\n",
        "1234564\n",
        "0\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4405,
    "description": "Polycarp has prepared $n$ competitive programming problems. The topic of the $i$-th problem is $a_i$, and some problems' topics may coincide.\n\nPolycarp has to host several thematic contests. All problems in each contest should have the same topic, and all contests should have pairwise distinct topics. He may not use all the problems. It is possible that there are no contests for some topics.\n\nPolycarp wants to host competitions on consecutive days, one contest per day. Polycarp wants to host a set of contests in such a way that:  number of problems in each contest is exactly twice as much as in the previous contest (one day ago), the first contest can contain arbitrary number of problems;  the total number of problems in all the contests should be maximized. \n\nYour task is to calculate the maximum number of problems in the set of thematic contests. Note, that you should not maximize the number of contests.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of problems Polycarp has prepared.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) where $a_i$ is the topic of the $i$-th problem.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum number of problems in the set of thematic contests.\n\n\n-----Examples-----\nInput\n18\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\n\nOutput\n14\n\nInput\n10\n6 6 6 3 6 1000000000 3 3 6 6\n\nOutput\n9\n\nInput\n3\n1337 1337 1337\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example the optimal sequence of contests is: $2$ problems of the topic $1$, $4$ problems of the topic $2$, $8$ problems of the topic $10$.\n\nIn the second example the optimal sequence of contests is: $3$ problems of the topic $3$, $6$ problems of the topic $6$.\n\nIn the third example you can take all the problems with the topic $1337$ (the number of such problems is $3$ so the answer is $3$) and host a single contest.",
    "public_tests": {
      "input": [
        "18\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\n",
        "10\n6 6 6 3 6 1000000000 3 3 6 6\n",
        "3\n1337 1337 1337\n"
      ],
      "output": [
        "14\n",
        "9\n",
        "3\n"
      ]
    },
    "private_tests": {
      "input": [
        "18\n2 1 2 10 2 10 10 2 2 1 10 10 10 10 1 1 10 10\n",
        "10\n6 6 6 3 6 1000000000 3 3 6 6\n",
        "3\n1337 1337 1337\n",
        "1\n1000000000\n",
        "2\n1 1\n",
        "3\n1 2 3\n",
        "55\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3\n"
      ],
      "output": [
        "14\n",
        "9\n",
        "3\n",
        "1\n",
        "2\n",
        "1\n",
        "49\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4421,
    "description": "International Women's Day is coming soon! Polycarp is preparing for the holiday.\n\nThere are $n$ candy boxes in the shop for sale. The $i$-th box contains $d_i$ candies.\n\nPolycarp wants to prepare the maximum number of gifts for $k$ girls. Each gift will consist of exactly two boxes. The girls should be able to share each gift equally, so the total amount of candies in a gift (in a pair of boxes) should be divisible by $k$. In other words, two boxes $i$ and $j$ ($i \\ne j$) can be combined as a gift if $d_i + d_j$ is divisible by $k$.\n\nHow many boxes will Polycarp be able to give? Of course, each box can be a part of no more than one gift. Polycarp cannot use boxes \"partially\" or redistribute candies between them. \n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5, 1 \\le k \\le 100$) \u2014 the number the boxes and the number the girls.\n\nThe second line of the input contains $n$ integers $d_1, d_2, \\dots, d_n$ ($1 \\le d_i \\le 10^9$), where $d_i$ is the number of candies in the $i$-th box.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum number of the boxes Polycarp can give as gifts.\n\n\n-----Examples-----\nInput\n7 2\n1 2 2 3 2 4 10\n\nOutput\n6\n\nInput\n8 2\n1 2 2 3 2 4 6 10\n\nOutput\n8\n\nInput\n7 3\n1 2 2 3 2 4 5\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first example Polycarp can give the following pairs of boxes (pairs are presented by indices of corresponding boxes):   $(2, 3)$;  $(5, 6)$;  $(1, 4)$. \n\nSo the answer is $6$.\n\nIn the second example Polycarp can give the following pairs of boxes (pairs are presented by indices of corresponding boxes):   $(6, 8)$;  $(2, 3)$;  $(1, 4)$;  $(5, 7)$. \n\nSo the answer is $8$.\n\nIn the third example Polycarp can give the following pairs of boxes (pairs are presented by indices of corresponding boxes):   $(1, 2)$;  $(6, 7)$. \n\nSo the answer is $4$.",
    "public_tests": {
      "input": [
        "7 2\n1 2 2 3 2 4 10\n",
        "8 2\n1 2 2 3 2 4 6 10\n",
        "7 3\n1 2 2 3 2 4 5\n"
      ],
      "output": [
        "6\n",
        "8\n",
        "4\n"
      ]
    },
    "private_tests": {
      "input": [
        "7 2\n1 2 2 3 2 4 10\n",
        "8 2\n1 2 2 3 2 4 6 10\n",
        "7 3\n1 2 2 3 2 4 5\n",
        "1 2\n120\n",
        "2 9\n80 1\n",
        "2 9\n81 1\n",
        "3 1\n1 1 1\n"
      ],
      "output": [
        "6\n",
        "8\n",
        "4\n",
        "0\n",
        "2\n",
        "0\n",
        "2\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4803,
    "description": "Anthony is just now learning basic math, how exciting! He first learns about addition\\[ a+n=a+\\underbrace{1+1+\\cdots +1}_ n, \\]\n\nthen multiplication\\[ a\\times n=\\underbrace{a+a+\\cdots +a}_ n, \\]\n\nexponentiation\\[ a^n=\\underbrace{a\\times a\\times \\cdots \\times a}_ n. \\]\n\nand finally, tetration\\[ ^na=\\underbrace{a^{a^{\\cdot ^{\\cdot ^{\\cdot ^{a}}}}}}_ n. \\]\n\nVery quickly, Anthony becomes interested in infinite tetrations, namely\\[ ^\\infty a={a^{a^{\\cdot ^{\\cdot ^{\\cdot }}}}}. \\]\n\nAnthony wonders, given an arbitrary real number $N$, what is the solution to $^\\infty a=N$? Unable to figure it out, Anthony has asked you to write a program to help him!\n\nHere\u2019s a fun fact: A solution only exists for $\\frac{1}{e}\\leq N\\leq e$.\n\n-----Input-----\nThe first line of input contains one real number $N$, $0.36788\\leq N\\leq 2.718281$.\n\n-----Output-----\nOutput a single line containing a real number $a$, such that $^\\infty a=N$. Your answer will be considered correct if its absolute or relative error doesn\u2019t exceed $10^{-5}$.\n\n-----Examples-----\nSample Input 1:\n2.000000\nSample Output 1:\n1.414214\n\nSample Input 2:\n1.000000\nSample Output 2:\n1.000000",
    "public_tests": {
      "input": [
        "2.000000\n",
        "1.000000\n"
      ],
      "output": [
        "1.414214\n",
        "1.000000\n"
      ]
    },
    "private_tests": {
      "input": [
        "2.000000\n",
        "1.000000\n",
        "1.500000\n"
      ],
      "output": [
        "1.414214\n",
        "1.000000\n",
        "1.310371\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4032,
    "description": "Mishka started participating in a programming contest. There are $n$ problems in the contest. Mishka's problem-solving skill is equal to $k$.\n\nMishka arranges all problems from the contest into a list. Because of his weird principles, Mishka only solves problems from one of the ends of the list. Every time, he chooses which end (left or right) he will solve the next problem from. Thus, each problem Mishka solves is either the leftmost or the rightmost problem in the list.\n\nMishka cannot solve a problem with difficulty greater than $k$. When Mishka solves the problem, it disappears from the list, so the length of the list decreases by $1$. Mishka stops when he is unable to solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\n\n-----Input-----\n\nThe first line of input contains two integers $n$ and $k$ ($1 \\le n, k \\le 100$) \u2014 the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the difficulty of the $i$-th problem. The problems are given in order from the leftmost to the rightmost in the list.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum number of problems Mishka can solve.\n\n\n-----Examples-----\nInput\n8 4\n4 2 3 1 5 1 6 4\n\nOutput\n5\n\nInput\n5 2\n3 1 2 1 3\n\nOutput\n0\n\nInput\n5 100\n12 34 55 43 21\n\nOutput\n5\n\n\n\n-----Note-----\n\nIn the first example, Mishka can solve problems in the following order: $[4, 2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6, 4] \\rightarrow [2, 3, 1, 5, 1, 6] \\rightarrow [3, 1, 5, 1, 6] \\rightarrow [1, 5, 1, 6] \\rightarrow [5, 1, 6]$, so the number of solved problems will be equal to $5$.\n\nIn the second example, Mishka can't solve any problem because the difficulties of problems from both ends are greater than $k$.\n\nIn the third example, Mishka's solving skill is so amazing that he can solve all the problems.",
    "public_tests": {
      "input": [
        "8 4\n4 2 3 1 5 1 6 4\n",
        "5 2\n3 1 2 1 3\n",
        "5 100\n12 34 55 43 21\n"
      ],
      "output": [
        "5\n",
        "0\n",
        "5\n"
      ]
    },
    "private_tests": {
      "input": [
        "8 4\n4 2 3 1 5 1 6 4\n",
        "5 2\n3 1 2 1 3\n",
        "5 100\n12 34 55 43 21\n",
        "100 100\n44 47 36 83 76 94 86 69 31 2 22 77 37 51 10 19 25 78 53 25 1 29 48 95 35 53 22 72 49 86 60 38 13 91 89 18 54 19 71 2 25 33 65 49 53 5 95 90 100 68 25 5 87 48 45 72 34 14 100 44 94 75 80 26 25 7 57 82 49 73 55 43 42 60 34 8 51 11 71 41 81 23 20 89 12 72 68 26 96 92 32 63 13 47 19 9 35 56 79 62\n",
        "100 99\n84 82 43 4 71 3 30 92 15 47 76 43 2 17 76 4 1 33 24 96 44 98 75 99 59 11 73 27 67 17 8 88 69 41 44 22 91 48 4 46 42 21 21 67 85 51 57 84 11 100 100 59 39 72 89 82 74 19 98 14 37 97 20 78 38 52 44 83 19 83 69 32 56 6 93 13 98 80 80 2 33 71 11 15 55 51 98 58 16 91 39 32 83 58 77 79 88 81 17 98\n",
        "100 69\n80 31 12 89 16 35 8 28 39 12 32 51 42 67 64 53 17 88 63 97 29 41 57 28 51 33 82 75 93 79 57 86 32 100 83 82 99 33 1 27 86 22 65 15 60 100 42 37 38 85 26 43 90 62 91 13 1 92 16 20 100 19 28 30 23 6 5 69 24 22 9 1 10 14 28 14 25 9 32 8 67 4 39 7 10 57 15 7 8 35 62 6 53 59 62 13 24 7 53 2\n",
        "100 2\n2 2 2 2 1 1 1 2 1 2 2 2 1 2 2 2 2 1 2 1 2 1 1 1 2 1 2 1 2 1 1 2 2 2 2 2 1 2 1 2 1 1 2 1 2 1 1 2 1 2 1 2 2 1 2 1 2 1 1 2 1 2 2 1 1 2 2 2 1 1 2 1 1 2 2 2 1 1 1 2 2 2 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 2 2 16\n",
        "100 3\n86 53 82 40 2 20 59 2 46 63 75 49 24 81 70 22 9 9 93 72 47 23 29 77 78 51 17 59 19 71 35 3 20 60 70 9 11 96 71 94 91 19 88 93 50 49 72 19 53 30 38 67 62 71 81 86 5 26 5 32 63 98 1 97 22 32 87 65 96 55 43 85 56 37 56 67 12 100 98 58 77 54 18 20 33 53 21 66 24 64 42 71 59 32 51 69 49 79 10 1\n",
        "13 7\n1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "1 5\n4\n",
        "3 2\n1 4 1\n",
        "1 2\n100\n",
        "7 4\n4 2 3 4 4 2 3\n",
        "1 2\n1\n",
        "1 2\n15\n",
        "2 1\n1 1\n",
        "5 3\n3 4 3 2 1\n",
        "1 1\n2\n",
        "1 5\n1\n",
        "6 6\n7 1 1 1 1 1\n",
        "5 5\n6 5 5 5 5\n",
        "1 4\n2\n",
        "9 4\n1 2 1 2 4 2 1 2 1\n",
        "1 1\n1\n",
        "1 10\n5\n",
        "5 5\n1 1 1 1 1\n",
        "100 10\n2 5 1 10 10 2 7 7 9 4 1 8 1 1 8 4 7 9 10 5 7 9 5 6 7 2 7 5 3 2 1 82 4 80 9 8 6 1 10 7 5 7 1 5 6 7 19 4 2 4 6 2 1 8 31 6 2 2 57 42 3 2 7 1 9 5 10 8 5 4 10 8 3 5 8 7 2 7 6 5 3 3 4 10 6 7 10 8 7 10 7 2 4 6 8 10 10 2 6 4\n",
        "100 90\n17 16 5 51 17 62 24 45 49 41 90 30 19 78 67 66 59 34 28 47 42 8 33 77 90 41 61 16 86 33 43 71 90 95 23 9 56 41 24 90 31 12 77 36 90 67 47 15 92 50 79 88 42 19 21 79 86 60 41 26 47 4 70 62 44 90 82 89 84 91 54 16 90 53 29 69 21 44 18 28 88 74 56 43 12 76 10 22 34 24 27 52 28 76 90 75 5 29 50 90\n",
        "100 10\n6 4 8 4 1 9 4 8 5 2 2 5 2 6 10 2 2 5 3 5 2 3 10 5 2 9 1 1 6 1 5 9 16 42 33 49 26 31 81 27 53 63 81 90 55 97 70 51 87 21 79 62 60 91 54 95 26 26 30 61 87 79 47 11 59 34 40 82 37 40 81 2 7 1 8 4 10 7 1 10 8 7 3 5 2 8 3 3 9 2 1 1 5 7 8 7 1 10 9 8\n",
        "100 90\n45 57 52 69 17 81 85 60 59 39 55 14 87 90 90 31 41 57 35 89 74 20 53 4 33 49 71 11 46 90 71 41 71 90 63 74 51 13 99 92 99 91 100 97 93 40 93 96 100 99 100 92 98 96 78 91 91 91 91 100 94 97 95 97 96 95 17 13 45 35 54 26 2 74 6 51 20 3 73 90 90 42 66 43 86 28 84 70 37 27 90 30 55 80 6 58 57 51 10 22\n",
        "100 10\n10 2 10 10 10 10 10 10 10 7 10 10 10 10 10 10 9 10 10 10 10 10 10 10 10 7 9 10 10 10 37 10 4 10 10 10 59 5 95 10 10 10 10 39 10 10 10 10 10 10 10 5 10 10 10 10 10 10 10 10 10 10 10 10 66 10 10 10 10 10 5 10 10 10 10 10 10 44 10 10 10 10 10 10 10 10 10 10 10 7 10 10 10 10 10 10 10 10 10 2\n",
        "100 90\n57 90 90 90 90 90 90 90 81 90 3 90 39 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 92 90 90 90 90 90 90 90 90 98 90 90 90 90 90 90 90 90 90 90 90 90 90 54 90 90 90 90 90 62 90 90 91 90 90 90 90 90 90 91 90 90 90 90 90 90 90 3 90 90 90 90 90 90 90 2 90 90 90 90 90 90 90 90 90 2 90 90 90 90 90\n",
        "100 10\n10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 6 10 10 10 10 10 10 78 90 61 40 87 39 91 50 64 30 10 24 10 55 28 11 28 35 26 26 10 57 45 67 14 99 96 51 67 79 59 11 21 55 70 33 10 16 92 70 38 50 66 52 5 10 10 10 2 4 10 10 10 10 10 10 10 10 10 6 10 10 10 10 10 10 10 10 10 10 8 10 10 10 10 10\n",
        "100 90\n90 90 90 90 90 90 55 21 90 90 90 90 90 90 90 90 90 90 69 83 90 90 90 90 90 90 90 90 93 95 92 98 92 97 91 92 92 91 91 95 94 95 100 100 96 97 94 93 90 90 95 95 97 99 90 95 98 91 94 96 99 99 94 95 95 97 99 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 90 12 90 3 90 90 90 90 90 90 90\n",
        "100 49\n71 25 14 36 36 48 36 49 28 40 49 49 49 38 40 49 33 22 49 49 14 46 8 44 49 11 37 49 40 49 2 49 3 49 37 49 49 11 25 49 49 32 49 11 49 30 16 21 49 49 23 24 30 49 49 49 49 49 49 27 49 42 49 49 20 32 30 29 35 49 30 49 9 49 27 25 5 49 49 42 49 20 49 35 49 22 15 49 49 49 19 49 29 28 13 49 22 7 6 24\n",
        "100 50\n38 68 9 6 50 18 19 50 50 20 33 34 43 50 24 50 50 2 50 50 50 50 50 21 30 50 41 40 50 50 50 50 50 7 50 21 19 23 1 50 24 50 50 50 25 50 50 50 50 50 50 50 7 24 28 18 50 5 43 50 20 50 13 50 50 16 50 3 2 24 50 50 18 5 50 4 50 50 38 50 33 49 12 33 11 14 50 50 50 33 50 50 50 50 50 50 7 4 50 50\n",
        "100 48\n8 6 23 47 29 48 48 48 48 48 48 26 24 48 48 48 3 48 27 28 41 45 9 29 48 48 48 48 48 48 48 48 48 48 47 23 48 48 48 5 48 22 40 48 48 48 20 48 48 57 48 32 19 48 33 2 4 19 48 48 39 48 16 48 48 44 48 48 48 48 29 14 25 43 46 7 48 19 30 48 18 8 39 48 30 47 35 18 48 45 48 48 30 13 48 48 48 17 9 48\n",
        "100 57\n57 9 57 4 43 57 57 57 57 26 57 18 57 57 57 57 57 57 57 47 33 57 57 43 57 57 55 57 14 57 57 4 1 57 57 57 57 57 46 26 57 57 57 57 57 57 57 39 57 57 57 5 57 12 11 57 57 57 25 37 34 57 54 18 29 57 39 57 5 57 56 34 57 24 7 57 57 57 2 57 57 57 57 1 55 39 19 57 57 57 57 21 3 40 13 3 57 57 62 57\n",
        "100 51\n51 51 38 51 51 45 51 51 51 18 51 36 51 19 51 26 37 51 11 51 45 34 51 21 51 51 33 51 6 51 51 51 21 47 51 13 51 51 30 29 50 51 51 51 51 51 51 45 14 51 2 51 51 23 9 51 50 23 51 29 34 51 40 32 1 36 31 51 11 51 51 47 51 51 51 51 51 51 51 50 39 51 14 4 4 12 3 11 51 51 51 51 41 51 51 51 49 37 5 93\n",
        "100 50\n87 91 95 73 50 50 16 97 39 24 58 50 33 89 42 37 50 50 12 71 3 55 50 50 80 10 76 50 52 36 88 44 66 69 86 71 77 50 72 50 21 55 50 50 78 61 75 89 65 2 50 69 62 47 11 92 97 77 41 31 55 29 35 51 36 48 50 91 92 86 50 36 50 94 51 74 4 27 55 63 50 36 87 50 67 7 65 75 20 96 88 50 41 73 35 51 66 21 29 33\n",
        "100 50\n50 37 28 92 7 76 50 50 50 76 100 57 50 50 50 32 76 50 8 72 14 8 50 91 67 50 55 82 50 50 24 97 88 50 59 61 68 86 44 15 61 67 88 50 40 50 36 99 1 23 63 50 88 59 76 82 99 76 68 50 50 30 31 68 57 98 71 12 15 60 35 79 90 6 67 50 50 50 50 68 13 6 50 50 16 87 84 50 67 67 50 64 50 58 50 50 77 51 50 51\n",
        "100 50\n43 50 50 91 97 67 6 50 86 50 76 60 50 59 4 56 11 38 49 50 37 50 50 20 60 47 33 54 95 58 22 50 77 77 72 9 57 40 81 57 95 50 81 63 62 76 13 87 50 39 74 69 50 99 63 1 11 62 84 31 97 99 56 73 70 36 45 100 28 91 93 9 19 52 73 50 83 58 84 52 86 12 50 44 64 52 97 50 12 71 97 52 87 66 83 66 86 50 9 49\n",
        "88 10\n10 8 1 10 10 1 3 7 10 5 8 8 10 2 7 10 10 10 10 10 1 10 10 10 10 1 2 9 10 9 10 10 10 64 100 25 10 12 9 52 13 8 10 56 10 4 10 7 10 3 10 79 74 8 73 10 10 10 9 10 3 5 10 10 10 5 1 10 10 4 3 10 10 10 4 10 6 4 10 10 10 10 3 3 8 5 6 8\n",
        "100 50\n80 39 33 69 75 50 23 88 50 50 67 90 87 50 29 15 55 32 60 50 50 50 38 95 62 50 50 88 8 97 45 50 42 12 22 93 49 50 24 50 50 71 60 4 50 72 57 57 50 50 50 83 69 17 1 31 72 55 50 11 50 80 93 41 91 94 20 60 50 50 51 48 53 56 76 73 50 72 19 98 50 50 50 50 50 28 48 45 62 11 16 67 93 88 63 50 50 66 48 95\n",
        "100 50\n70 50 38 50 38 50 32 30 50 31 26 42 50 33 34 50 50 50 28 21 50 44 50 47 50 50 9 40 50 50 50 50 50 42 50 50 16 50 50 3 24 50 50 50 4 26 50 2 50 50 33 1 27 50 50 50 8 29 50 23 33 50 6 29 50 50 15 50 50 50 32 50 43 50 50 50 31 50 4 50 50 31 50 50 31 16 50 17 50 17 31 13 25 16 50 10 50 47 50 66\n",
        "2 8\n8 8\n",
        "1 6\n3\n",
        "1 5\n5\n"
      ],
      "output": [
        "5\n",
        "0\n",
        "5\n",
        "100\n",
        "98\n",
        "39\n",
        "99\n",
        "1\n",
        "13\n",
        "1\n",
        "2\n",
        "0\n",
        "7\n",
        "1\n",
        "0\n",
        "2\n",
        "4\n",
        "0\n",
        "1\n",
        "5\n",
        "4\n",
        "1\n",
        "9\n",
        "1\n",
        "1\n",
        "5\n",
        "71\n",
        "63\n",
        "61\n",
        "72\n",
        "52\n",
        "60\n",
        "56\n",
        "61\n",
        "99\n",
        "99\n",
        "99\n",
        "99\n",
        "99\n",
        "3\n",
        "3\n",
        "6\n",
        "66\n",
        "0\n",
        "0\n",
        "2\n",
        "1\n",
        "1\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4233,
    "description": "A star is a figure of the following type: an asterisk character '*' in the center of the figure and four rays (to the left, right, top, bottom) of the same positive length. The size of a star is the length of its rays. The size of a star must be a positive number (i.e. rays of length $0$ are not allowed).\n\nLet's consider empty cells are denoted by '.', then the following figures are stars:\n\n [Image] The leftmost figure is a star of size $1$, the middle figure is a star of size $2$ and the rightmost figure is a star of size $3$. \n\nYou are given a rectangular grid of size $n \\times m$ consisting only of asterisks '*' and periods (dots) '.'. Rows are numbered from $1$ to $n$, columns are numbered from $1$ to $m$. Your task is to draw this grid using any number of stars or find out that it is impossible. Stars can intersect, overlap or even coincide with each other. The number of stars in the output can't exceed $n \\cdot m$. Each star should be completely inside the grid. You can use stars of same and arbitrary sizes.\n\nIn this problem, you do not need to minimize the number of stars. Just find any way to draw the given grid with at most $n \\cdot m$ stars.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($3 \\le n, m \\le 100$) \u2014 the sizes of the given grid.\n\nThe next $n$ lines contains $m$ characters each, the $i$-th line describes the $i$-th row of the grid. It is guaranteed that grid consists of characters '*' and '.' only.\n\n\n-----Output-----\n\nIf it is impossible to draw the given grid using stars only, print \"-1\".\n\nOtherwise in the first line print one integer $k$ ($0 \\le k \\le n \\cdot m$) \u2014 the number of stars needed to draw the given grid. The next $k$ lines should contain three integers each \u2014 $x_j$, $y_j$ and $s_j$, where $x_j$ is the row index of the central star character, $y_j$ is the column index of the central star character and $s_j$ is the size of the star. Each star should be completely inside the grid.\n\n\n-----Examples-----\nInput\n6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\n\nOutput\n3\n3 4 1\n3 5 2\n3 5 1\n\nInput\n5 5\n.*...\n****.\n.****\n..**.\n.....\n\nOutput\n3\n2 2 1\n3 3 1\n3 4 1\n\nInput\n5 5\n.*...\n***..\n.*...\n.*...\n.....\n\nOutput\n-1\n\nInput\n3 3\n*.*\n.*.\n*.*\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example the output 2\n\n3 4 1\n\n3 5 2\n\n\n\nis also correct.",
    "public_tests": {
      "input": [
        "6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\n",
        "5 5\n.*...\n****.\n.****\n..**.\n.....\n",
        "5 5\n.*...\n***..\n.*...\n.*...\n.....\n",
        "3 3\n*.*\n.*.\n*.*\n"
      ],
      "output": [
        "3\n3 4 1\n3 5 2\n3 5 1\n",
        "3\n2 2 1\n3 3 1\n3 4 1\n",
        "-1\n",
        "-1\n"
      ]
    },
    "private_tests": {
      "input": [
        "6 8\n....*...\n...**...\n..*****.\n...**...\n....*...\n........\n",
        "5 5\n.*...\n****.\n.****\n..**.\n.....\n",
        "5 5\n.*...\n***..\n.*...\n.*...\n.....\n",
        "3 3\n*.*\n.*.\n*.*\n",
        "3 3\n.*.\n***\n**.\n",
        "3 3\n.*.\n***\n.*.\n",
        "3 3\n**.\n***\n.*.\n",
        "3 100\n..*..............................................*..................................................\n................................................***.................................................\n.................................................*..................................................\n",
        "3 100\n***************************************************************************************************.\n****************************************************************************************************\n.**************************************************************************************************.\n",
        "100 3\n...\n...\n...\n...\n...\n...\n...\n*..\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n.*.\n***\n.*.\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n",
        "100 3\n.*.\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n***\n**.\n",
        "3 3\n...\n...\n...\n",
        "5 9\n...**....\n..***....\n...*.....\n.........\n.........\n",
        "9 10\n....*.*...\n..******..\n..*****...\n..*****...\n...******.\n*******...\n...*..**..\n..*******.\n...*..**..\n"
      ],
      "output": [
        "2\n3 4 1\n3 5 2\n",
        "3\n2 2 1\n3 3 1\n3 4 1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "1\n2 2 1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "0\n",
        "-1\n",
        "-1\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4104,
    "description": "One very experienced problem writer decided to prepare a problem for April Fools Day contest. The task was very simple - given an arithmetic expression, return the result of evaluating this expression. However, looks like there is a bug in the reference solution...\n\n\n-----Input-----\n\nThe only line of input data contains the arithmetic expression. The expression will contain between 2 and 10 operands, separated with arithmetic signs plus and/or minus. Each operand will be an integer between 0 and 255, inclusive.\n\n\n-----Output-----\n\nReproduce the output of the reference solution, including the bug.\n\n\n-----Examples-----\nInput\n8-7+6-5+4-3+2-1-0\n\nOutput\n4\n\nInput\n2+2\n\nOutput\n-46\n\nInput\n112-37\n\nOutput\n375",
    "public_tests": {
      "input": [
        "8-7+6-5+4-3+2-1-0\n",
        "2+2\n",
        "112-37\n"
      ],
      "output": [
        "4\n",
        "-46\n",
        "375\n"
      ]
    },
    "private_tests": {
      "input": [
        "8-7+6-5+4-3+2-1-0\n",
        "2+2\n",
        "112-37\n",
        "255+255+255+255+255+255+255+255+255+255\n",
        "0-255-255-255-255-255-255-255-255-255\n",
        "0+0+0+0+0+0+0+0+0+0\n",
        "0-0-0-0-0-0-0-0-0-0\n",
        "0+100+100+100+100+100+100+100+100+100\n",
        "255-100-100-100-100-100-100-100-100-100\n",
        "45+5\n",
        "23+6-9\n",
        "123+234-56-78-90\n",
        "97+67+12+9+42+45+13\n",
        "9-109-22+23-87+27-40+10\n",
        "66-165-34+209+76\n",
        "150+222-3-90-248-187+198\n",
        "136+90-200+6-102\n",
        "255-12-34-56-69-78-90\n",
        "243-173+90-56+78-53+53-21\n",
        "131+49+249+71-251-61+159-111+51\n",
        "5-9-1-3+6+4-7+8-2\n",
        "101+200+195+231+107+222+146+254+160+209\n",
        "240-120-234-156-207-189\n",
        "1-2+3-4+5-6\n",
        "9-8+7-6+5-4+3-2+1-0\n"
      ],
      "output": [
        "4\n",
        "-46\n",
        "375\n",
        "-42450\n",
        "24705\n",
        "-450\n",
        "270\n",
        "-44100\n",
        "26355\n",
        "0\n",
        "0\n",
        "-3967\n",
        "-2265\n",
        "2211\n",
        "-2048\n",
        "-3628\n",
        "5380\n",
        "1716\n",
        "2561\n",
        "-4913\n",
        "1\n",
        "-43175\n",
        "14334\n",
        "-13\n",
        "-45\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4744,
    "description": "Fidget spinners are so 2017; this year\u2019s rage are fidget cubes. A fidget cube is a cube with unit side lengths, which you hold in your hand and fidget with. Kids these days, right? \n\nYou work in the planning department for a company that creates and ships fidget cubes. Having done some market analysis, you found that your customers want to receive shipments of exactly $V$ fidget cubes.\n\nThis means you have to design a container that will hold exactly $V$ fidget cubes. Since fidget cubes are very fragile, you cannot have any empty space in your container. If there is empty space, they might move around, bump into each other and get damaged. Because of this, you decide to ship the fidget cubes in a rectangular cardboard box.\n\nThe cost of a cardboard box is proportional to its surface area, costing exactly one unit of money per square unit of surface area. Of course you want to spend as little money as possible. Subject to the above constraints, how much money do you have to spend on a box for $V$ fidget cubes?\n\n-----Input-----\nThe input contains a single integer, $1 \\leq V \\leq 10^6$, the number of fidget cubes for which you need to build a box.\n\n-----Output-----\nPrint the cost of the cheapest rectangular box as specified in the statement.\n\n-----Examples-----\nSample Input 1:\n1\nSample Output 1:\n6\n\nSample Input 2:\n4\nSample Output 2:\n16\n\nSample Input 3:\n3\nSample Output 3:\n14",
    "public_tests": {
      "input": [
        "1\n",
        "4\n",
        "3\n"
      ],
      "output": [
        "6\n",
        "16\n",
        "14\n"
      ]
    },
    "private_tests": {
      "input": [
        "1\n",
        "4\n",
        "3\n",
        "5913\n"
      ],
      "output": [
        "6\n",
        "16\n",
        "14\n",
        "2790\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4098,
    "description": "You are a coach at your local university. There are $n$ students under your supervision, the programming skill of the $i$-th student is $a_i$.\n\nYou have to form $k$ teams for yet another new programming competition. As you know, the more students are involved in competition the more probable the victory of your university is! So you have to form no more than $k$ (and at least one) non-empty teams so that the total number of students in them is maximized. But you also know that each team should be balanced. It means that the programming skill of each pair of students in each team should differ by no more than $5$. Teams are independent from one another (it means that the difference between programming skills of two students from two different teams does not matter).\n\nIt is possible that some students not be included in any team at all.\n\nYour task is to report the maximum possible total number of students in no more than $k$ (and at least one) non-empty balanced teams.\n\nIf you are Python programmer, consider using PyPy instead of Python when you submit your code.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le k \\le n \\le 5000$) \u2014 the number of students and the maximum number of teams, correspondingly.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), where $a_i$ is a programming skill of the $i$-th student.\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum possible total number of students in no more than $k$ (and at least one) non-empty balanced teams.\n\n\n-----Examples-----\nInput\n5 2\n1 2 15 15 15\n\nOutput\n5\n\nInput\n6 1\n36 4 1 25 9 16\n\nOutput\n2\n\nInput\n4 4\n1 10 100 1000\n\nOutput\n4",
    "public_tests": {
      "input": [
        "5 2\n1 2 15 15 15\n",
        "6 1\n36 4 1 25 9 16\n",
        "4 4\n1 10 100 1000\n"
      ],
      "output": [
        "5\n",
        "2\n",
        "4\n"
      ]
    },
    "private_tests": {
      "input": [
        "5 2\n1 2 15 15 15\n",
        "6 1\n36 4 1 25 9 16\n",
        "4 4\n1 10 100 1000\n",
        "10 1\n1496 2336 3413 4121 1835 2835 251 1086 4401 4225\n",
        "10 2\n4714 3696 4102 818 3606 3571 4092 4396 3509 4893\n",
        "10 3\n2124 3161 4790 2107 1865 2410 2934 3514 4512 2857\n",
        "10 4\n3047 4521 3183 3803 931 3145 967 4121 1323 2309\n",
        "10 5\n1265 1689 1576 2796 1894 4689 2512 4727 838 274\n",
        "10 9\n1034 1043 4739 2959 4249 4246 582 4584 3762 4027\n",
        "10 10\n2902 3963 2372 4541 273 2121 679 2017 1499 394\n",
        "50 1\n849 1987 4384 4180 1393 97 1596 2522 451 4037 2186 2421 633 4882 4044 225 1569 4998 4915 2296 3509 1788 4713 4774 810 4732 2031 907 514 3342 3296 1973 4858 315 3140 3651 3212 4996 1390 1323 862 872 438 1533 1378 1411 3232 1565 3724 3753\n",
        "50 2\n4068 1859 72 3173 3163 1640 437 832 2262 1193 3693 3930 3626 3795 1296 377 566 3888 606 2561 2225 3812 1936 1280 3982 345 3485 4930 1303 1652 407 1342 359 2669 668 3382 1463 259 3813 2915 58 2366 2930 2904 1536 3931 91 194 3447 4892\n",
        "50 3\n4182 3220 3465 2166 1422 4671 1983 1439 4073 4157 2496 31 132 2301 1253 4721 371 74 1698 2825 3237 1644 3760 2786 259 4062 1428 1656 1285 369 4006 3414 52 4216 4003 2714 4305 923 20 4508 1149 1564 2717 83 3591 2260 4246 2335 1273 4135\n",
        "50 4\n2400 2684 4154 1158 489 1215 824 4749 2372 4418 3195 3836 830 3510 801 4872 2472 1668 3197 3089 3441 1372 3687 4291 3431 1972 178 679 4778 4895 3413 2783 4746 1571 1531 4341 659 1186 1635 3804 4536 3058 208 1454 3749 2077 1105 1772 3292 274\n",
        "50 25\n893 3630 4022 4336 417 4106 1234 4999 2555 1438 1369 1078 2997 2465 1750 2077 1925 4151 1794 4641 1590 1046 4112 4803 2892 521 586 2649 563 3864 3042 1780 1425 3710 770 4929 208 106 789 4280 4381 4831 2851 4592 2084 1339 4665 1233 1665 3708\n",
        "50 49\n2321 2298 1227 3465 748 4678 4564 4927 3070 1180 4855 1136 3238 1941 4668 4807 1115 1400 4836 1525 4004 3071 3839 1565 3408 912 1824 2191 4670 1821 3623 3881 1015 3677 350 2937 1527 1057 4277 1132 759 3399 4175 4507 3102 1571 3626 2105 3251 257\n",
        "50 50\n1338 3780 285 4514 3255 880 1870 3559 2451 1208 3670 2621 1244 673 3163 909 1158 947 2357 847 1568 4666 4420 746 4596 4591 3860 4000 931 4046 2512 3159 4863 1254 4036 1481 104 1972 170 1764 3784 3135 4054 467 2527 4781 3074 404 895 4469\n",
        "100 1\n4678 2743 2651 2491 3010 3941 118 4138 1584 4362 32 3971 3253 1486 3194 1171 3154 3609 1566 873 3293 1564 3683 282 1366 3325 437 846 2659 4479 475 2273 2084 3143 359 2659 2751 4672 2697 1713 2781 3344 3269 1201 2027 2041 872 2234 1811 3537 3927 4226 4552 1410 4648 2846 1181 1131 2838 1821 855 53 4225 4989 1830 1006 892 2869 232 4281 910 4233 1926 317 1729 4866 2670 3466 4838 1419 95 1039 1335 341 4216 3918 2500 3260 801 1630 679 4527 4031 841 4376 4052 3301 4451 4081 1673\n",
        "100 2\n600 4911 3340 1484 2485 4677 1663 2448 2587 2326 3027 480 1655 2696 446 514 2959 203 3066 3433 4305 3588 1315 1788 2643 4339 1084 4868 1152 3197 4882 1642 4481 3202 1399 2798 3297 2232 1608 1009 3872 2134 760 4868 4082 1858 27 863 1533 484 2700 2467 3214 2128 71 1200 1781 4928 4591 1808 4348 712 897 3954 2364 3904 759 3536 3919 4758 1135 2817 3807 1793 3810 64 1150 1607 685 2755 4468 2168 2587 4709 3621 1224 1160 36 4328 817 4104 3635 2193 3263 4438 1473 2167 1850 3757 1113\n",
        "100 3\n1522 1271 1732 477 743 1220 504 759 1694 290 4534 1581 456 3906 2698 666 61 1389 1861 3698 725 1419 2730 3294 3519 760 4026 3891 1942 1914 1185 1818 2278 4749 3927 4426 3844 599 519 2602 3068 1332 547 1239 4240 4379 1886 3004 3552 1622 664 3413 1068 4742 1302 4963 1972 1430 1344 4091 545 4475 274 4135 193 314 1035 1499 310 3338 4064 1401 4880 4078 82 3366 2335 4748 724 4898 3033 592 1542 2588 3834 18 4821 324 151 3107 2120 1935 2650 4197 4500 1999 4546 736 4242 2848\n",
        "100 4\n4741 3440 2421 1765 4810 1955 4346 1365 2697 3255 3337 386 1154 115 4951 2306 4058 279 4849 3962 1737 1147 362 4799 4796 3670 481 2913 435 1032 592 1187 4676 1295 2262 3757 2494 862 2134 1898 4159 530 3038 2610 4399 2707 1041 4337 3275 3569 4437 166 4730 3165 4022 3317 1763 227 3505 566 4846 2431 1946 3100 1534 3212 902 4462 1294 1918 3482 4985 4464 554 2162 1268 3519 2889 1570 2042 111 1721 497 1956 3239 1107 3481 613 974 806 2841 3748 3515 1619 4563 2125 4220 2327 3918 4584\n",
        "100 50\n83 3456 243 3266 4413 505 3246 4875 1866 1421 2128 14 871 2225 991 1555 2764 863 207 4126 2685 459 773 3663 1365 2737 5 472 3159 3261 1629 3075 2587 3033 1423 626 3335 4171 1155 2237 3219 500 3818 4575 4180 1930 1716 1441 2394 862 659 4342 25 743 4590 4325 812 2710 367 4363 2589 3448 549 4382 2599 895 4531 3435 1245 2297 3271 3024 1687 3151 4612 4011 4348 3879 4984 2097 3347 1707 4607 631 3952 4808 1238 885 718 4520 1313 2727 1847 2104 445 738 3942 1755 2638 565\n",
        "100 99\n3053 2962 749 3221 4549 489 1851 1954 2012 357 1688 2720 1642 898 4079 1360 949 4250 486 2750 822 2749 962 2883 570 1827 2720 3987 2970 2892 309 3941 1459 1808 4600 974 303 3631 4747 4022 2875 1027 1253 3481 1647 4505 2178 4927 1097 4692 577 4148 1794 4266 1901 3761 391 1837 3221 2537 3673 602 3773 133 797 509 1699 4920 4389 3084 1850 1196 726 96 818 4316 2336 2263 110 1280 2281 804 276 3364 3506 2373 2161 2184 3208 3588 4531 4937 2260 1808 597 2215 692 353 622 1277\n",
        "100 100\n788 971 2303 1779 2871 3887 38 55 3082 1718 661 4289 894 3184 912 2235 1849 287 4630 3185 4358 3875 2933 1525 1450 3222 1243 1788 8 3049 454 2823 366 1029 4494 251 1278 4899 2246 2929 1174 2285 4958 3326 2200 1522 1684 3820 4715 2662 526 1120 4600 183 1553 2850 3061 3121 3110 4792 4382 4283 255 355 3823 1312 4215 2744 627 3552 3831 4600 2312 3444 1298 4152 4329 1245 1146 146 3267 533 2720 4906 4288 4908 1440 163 4215 101 2986 2736 2529 854 115 1434 4318 3876 3826 1280\n",
        "3 2\n999999995 10000 1000000000\n",
        "1 1\n1000000000\n"
      ],
      "output": [
        "5\n",
        "2\n",
        "4\n",
        "1\n",
        "2\n",
        "3\n",
        "4\n",
        "5\n",
        "10\n",
        "10\n",
        "2\n",
        "4\n",
        "6\n",
        "6\n",
        "27\n",
        "50\n",
        "50\n",
        "2\n",
        "4\n",
        "6\n",
        "8\n",
        "58\n",
        "100\n",
        "100\n",
        "3\n",
        "1\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4341,
    "description": "You are given an undirected graph consisting of $n$ vertices and $m$ edges. Your task is to find the number of connected components which are cycles.\n\nHere are some definitions of graph theory.\n\nAn undirected graph consists of two sets: set of nodes (called vertices) and set of edges. Each edge connects a pair of vertices. All edges are bidirectional (i.e. if a vertex $a$ is connected with a vertex $b$, a vertex $b$ is also connected with a vertex $a$). An edge can't connect vertex with itself, there is at most one edge between a pair of vertices.\n\nTwo vertices $u$ and $v$ belong to the same connected component if and only if there is at least one path along edges connecting $u$ and $v$.\n\nA connected component is a cycle if and only if its vertices can be reordered in such a way that:  the first vertex is connected with the second vertex by an edge,  the second vertex is connected with the third vertex by an edge,  ...  the last vertex is connected with the first vertex by an edge,  all the described edges of a cycle are distinct. \n\nA cycle doesn't contain any other edges except described above. By definition any cycle contains three or more vertices. [Image] There are $6$ connected components, $2$ of them are cycles: $[7, 10, 16]$ and $[5, 11, 9, 15]$. \n\n\n-----Input-----\n\nThe first line contains two integer numbers $n$ and $m$ ($1 \\le n \\le 2 \\cdot 10^5$, $0 \\le m \\le 2 \\cdot 10^5$) \u2014 number of vertices and edges.\n\nThe following $m$ lines contains edges: edge $i$ is given as a pair of vertices $v_i$, $u_i$ ($1 \\le v_i, u_i \\le n$, $u_i \\ne v_i$). There is no multiple edges in the given graph, i.e. for each pair ($v_i, u_i$) there no other pairs ($v_i, u_i$) and ($u_i, v_i$) in the list of edges.\n\n\n-----Output-----\n\nPrint one integer \u2014 the number of connected components which are also cycles.\n\n\n-----Examples-----\nInput\n5 4\n1 2\n3 4\n5 4\n3 5\n\nOutput\n1\n\nInput\n17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example only component $[3, 4, 5]$ is also a cycle.\n\nThe illustration above corresponds to the second example.",
    "public_tests": {
      "input": [
        "5 4\n1 2\n3 4\n5 4\n3 5\n",
        "17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n"
      ],
      "output": [
        "1\n",
        "2\n"
      ]
    },
    "private_tests": {
      "input": [
        "5 4\n1 2\n3 4\n5 4\n3 5\n",
        "17 15\n1 8\n1 12\n5 11\n11 9\n9 15\n15 5\n4 13\n3 13\n4 3\n10 16\n7 10\n16 7\n14 3\n14 4\n17 6\n",
        "4 4\n1 2\n2 3\n1 3\n1 4\n",
        "5 5\n1 2\n2 3\n3 4\n4 1\n3 5\n",
        "200000 0\n",
        "1 0\n",
        "5 10\n1 2\n2 3\n3 4\n4 5\n5 1\n1 4\n2 4\n3 5\n3 1\n2 5\n",
        "5 10\n1 2\n1 3\n1 4\n1 5\n2 3\n2 4\n2 5\n3 4\n3 5\n4 5\n",
        "6 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n6 2\n2 4\n6 4\n",
        "4 6\n1 2\n2 3\n3 4\n4 1\n1 3\n2 4\n"
      ],
      "output": [
        "1\n",
        "2\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4749,
    "description": "You are given an $n$-by-$n$ grid where each square is colored either black or white. A grid is correct if all of the following conditions are satisfied:\n - Every row has the same number of black squares as it has white squares.\n - Every column has the same number of black squares as it has white squares.\n - No row or column has $3$ or more consecutive squares of the same color.\n\nGiven a grid, determine whether it is correct.\n\n-----Input-----\nThe first line contains an integer $n$ ($2\\le n\\le 24$; $n$ is even). Each of the next $n$ lines contains a string of length $n$ consisting solely of the characters \u2018B\u2019 and \u2018W\u2019, representing the colors of the grid squares.\n\n-----Output-----\nIf the grid is correct, print the number $1$ on a single line. Otherwise, print the number $0$ on a single line.\n\n-----Examples-----\nSample Input 1:\n4\nWBBW\nWBWB\nBWWB\nBWBW\nSample Output 1:\n1\n\nSample Input 2:\n4\nBWWB\nBWBB\nWBBW\nWBWW\nSample Output 2:\n0\n\nSample Input 3:\n6\nBWBWWB\nWBWBWB\nWBBWBW\nBBWBWW\nBWWBBW\nWWBWBB\nSample Output 3:\n0",
    "public_tests": {
      "input": [
        "4\nWBBW\nWBWB\nBWWB\nBWBW\n",
        "4\nBWWB\nBWBB\nWBBW\nWBWW\n",
        "6\nBWBWWB\nWBWBWB\nWBBWBW\nBBWBWW\nBWWBBW\nWWBWBB\n"
      ],
      "output": [
        "1\n",
        "0\n",
        "0\n"
      ]
    },
    "private_tests": {
      "input": [
        "4\nWBBW\nWBWB\nBWWB\nBWBW\n",
        "4\nBWWB\nBWBB\nWBBW\nWBWW\n",
        "6\nBWBWWB\nWBWBWB\nWBBWBW\nBBWBWW\nBWWBBW\nWWBWBB\n",
        "6\nWWBBWB\nBBWWBW\nWBWBWB\nBWBWBW\nBWBBWW\nWBWWBB\n"
      ],
      "output": [
        "1\n",
        "0\n",
        "0\n",
        "1\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4820,
    "description": "Being educated in Computer Science and Mathematics is not always easy. Especially not if you have \u201cfriends\u201d who repeatedly insist on showing you their new \u201cproofs\u201d that P equals NP, that the Riemann Hypothesis is true, and so on.\n\nOne of your friends recently claims to have found a fantastic new compression algorithm. As an example of its amazing performance, your friend has told you that every file in your precious collection of random bit strings after compression would be at most $b$ bits long! Naturally, you find this a bit hard to believe, so you want to determine whether it is even theoretically possible for this to be true.\n\nYour collection of random bit strings consists of $N$ files, no two of which are identical, and each of which is exactly $1000$ bits long.\n\n-----Input-----\nThe input consists of two integers $N$ ($1 \\le N \\le 10^{15}$) and $b$ ($0 \\le b \\le 50$), giving the number of files in your collection and the maximum number of bits a compressed file is allowed to have.\n\n-----Output-----\nOutput a line containing either \u201cyes\u201d if it is possible to compress all the $N$ files in your collection into files of size at most $b$ bits, or \u201cno\u201d otherwise.\n\n-----Examples-----\nSample Input 1:\n13 3\nSample Output 1:\nyes\n\nSample Input 2:\n1 0\nSample Output 2:\nyes",
    "public_tests": {
      "input": [
        "13 3\n",
        "1 0\n"
      ],
      "output": [
        "yes\n",
        "yes\n"
      ]
    },
    "private_tests": {
      "input": [
        "13 3\n",
        "1 0\n",
        "31415926535897 40\n"
      ],
      "output": [
        "yes\n",
        "yes\n",
        "no\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4187,
    "description": "Each day in Berland consists of $n$ hours. Polycarp likes time management. That's why he has a fixed schedule for each day \u2014 it is a sequence $a_1, a_2, \\dots, a_n$ (each $a_i$ is either $0$ or $1$), where $a_i=0$ if Polycarp works during the $i$-th hour of the day and $a_i=1$ if Polycarp rests during the $i$-th hour of the day.\n\nDays go one after another endlessly and Polycarp uses the same schedule for each day.\n\nWhat is the maximal number of continuous hours during which Polycarp rests? It is guaranteed that there is at least one working hour in a day.\n\n\n-----Input-----\n\nThe first line contains $n$ ($1 \\le n \\le 2\\cdot10^5$) \u2014 number of hours per day.\n\nThe second line contains $n$ integer numbers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 1$), where $a_i=0$ if the $i$-th hour in a day is working and $a_i=1$ if the $i$-th hour is resting. It is guaranteed that $a_i=0$ for at least one $i$.\n\n\n-----Output-----\n\nPrint the maximal number of continuous hours during which Polycarp rests. Remember that you should consider that days go one after another endlessly and Polycarp uses the same schedule for each day.\n\n\n-----Examples-----\nInput\n5\n1 0 1 0 1\n\nOutput\n2\n\nInput\n6\n0 1 0 1 1 0\n\nOutput\n2\n\nInput\n7\n1 0 1 1 1 0 1\n\nOutput\n3\n\nInput\n3\n0 0 0\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example, the maximal rest starts in last hour and goes to the first hour of the next day.\n\nIn the second example, Polycarp has maximal rest from the $4$-th to the $5$-th hour.\n\nIn the third example, Polycarp has maximal rest from the $3$-rd to the $5$-th hour.\n\nIn the fourth example, Polycarp has no rest at all.",
    "public_tests": {
      "input": [
        "5\n1 0 1 0 1\n",
        "6\n0 1 0 1 1 0\n",
        "7\n1 0 1 1 1 0 1\n",
        "3\n0 0 0\n"
      ],
      "output": [
        "2\n",
        "2\n",
        "3\n",
        "0\n"
      ]
    },
    "private_tests": {
      "input": [
        "5\n1 0 1 0 1\n",
        "6\n0 1 0 1 1 0\n",
        "7\n1 0 1 1 1 0 1\n",
        "3\n0 0 0\n",
        "1\n0\n",
        "2\n0 0\n",
        "2\n0 1\n",
        "2\n1 0\n",
        "3\n1 0 0\n",
        "3\n0 0 1\n",
        "3\n1 0 1\n",
        "3\n0 1 1\n",
        "4\n1 1 0 1\n",
        "4\n0 1 0 1\n",
        "23\n1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1\n",
        "21\n1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1\n"
      ],
      "output": [
        "2\n",
        "2\n",
        "3\n",
        "0\n",
        "0\n",
        "0\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "2\n",
        "2\n",
        "3\n",
        "1\n",
        "2\n",
        "2\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4745,
    "description": "After the festive opening of your new store, the Boutique store for Alternative Paramedicine and Cwakhsahlvereigh, to your disappointment you find out that you are not making as many sales as you had hoped. To remedy this, you decide to run a special offer: you will mark some subset of the $n$ items for sale in your store as participating in the offer, and if people buy exactly two of these items, and the cost of these items is strictly more than $X$ euros, you will give them a free complimentary unicorn horn!\n\nSince you recently found out all your unicorn horns are really narwhal tusks, you decide to rig the offer by picking the participating items in such a way that no one can earn a horn anyway.\n\nTo make sure no one becomes suspicious, you want to mark as many items as possible as participating in the offer.\n\n-----Input-----\n - On the first line are two integers, $1 \\leq n \\leq 10^5$, the number of items for sale in your store, and $1\\leq X \\leq 10^9$, the minimum cost specified in the statement.\n - On the second line are $n$ positive integers, each at most $10^9$. These are the prices of the items in the store.\n\n-----Output-----\nPrint the maximum number of items you can mark as part of your special offer, without anyone actually being able to receive a horn.\n\n-----Examples-----\nSample Input 1:\n5 6\n1 2 3 4 5\nSample Output 1:\n3\n\nSample Input 2:\n5 10\n4 8 1 9 7\nSample Output 2:\n2\n\nSample Input 3:\n4 10\n1 3 1 7\nSample Output 3:\n4",
    "public_tests": {
      "input": [
        "5 6\n1 2 3 4 5\n",
        "5 10\n4 8 1 9 7\n",
        "4 10\n1 3 1 7\n"
      ],
      "output": [
        "3\n",
        "2\n",
        "4\n"
      ]
    },
    "private_tests": {
      "input": [
        "5 6\n1 2 3 4 5\n",
        "5 10\n4 8 1 9 7\n",
        "4 10\n1 3 1 7\n",
        "1 5\n6\n"
      ],
      "output": [
        "3\n",
        "2\n",
        "4\n",
        "1\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4819,
    "description": "Given two integers $A$ and $B$, $A$ modulo $B$ is the remainder when dividing $A$ by $B$. For example, the numbers $7$, $14$, $27$ and $38$ become $1$, $2$, $0$ and $2$, modulo $3$. Write a program that accepts $10$ numbers as input and outputs the number of distinct numbers in the input, if the numbers are considered modulo $42$.\n\n-----Input-----\nThe input will contain 10 non-negative integers, each smaller than $1000$, one per line.\n\n-----Output-----\nOutput the number of distinct values when considered modulo $42$ on a single line.\n\n-----Explanation of Sample Inputs-----\nIn sample input $1$, the numbers modulo $42$ are $1, 2, 3, 4, 5, 6, 7, 8, 9$ and $10$.\n\nIn sample input $2$, all numbers modulo $42$ are $0$.\n\nIn sample input $3$, the numbers modulo $42$ are $39, 40, 41, 0, 1, 2, 40, 41, 0$ and $1$. There are $6$ distinct numbers.\n\n-----Examples-----\nSample Input 1:\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nSample Output 1:\n10\n\nSample Input 2:\n42\n84\n252\n420\n840\n126\n42\n84\n420\n126\nSample Output 2:\n1",
    "public_tests": {
      "input": [
        "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n",
        "42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n"
      ],
      "output": [
        "10\n",
        "1\n"
      ]
    },
    "private_tests": {
      "input": [
        "1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n",
        "42\n84\n252\n420\n840\n126\n42\n84\n420\n126\n",
        "39\n40\n41\n42\n43\n44\n82\n83\n84\n85\n"
      ],
      "output": [
        "10\n",
        "1\n",
        "6\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4457,
    "description": "Recently Vasya decided to improve his pistol shooting skills. Today his coach offered him the following exercise. He placed $n$ cans in a row on a table. Cans are numbered from left to right from $1$ to $n$. Vasya has to knock down each can exactly once to finish the exercise. He is allowed to choose the order in which he will knock the cans down.\n\nVasya knows that the durability of the $i$-th can is $a_i$. It means that if Vasya has already knocked $x$ cans down and is now about to start shooting the $i$-th one, he will need $(a_i \\cdot x + 1)$ shots to knock it down. You can assume that if Vasya starts shooting the $i$-th can, he will be shooting it until he knocks it down.\n\nYour task is to choose such an order of shooting so that the number of shots required to knock each of the $n$ given cans down exactly once is minimum possible.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ $(2 \\le n \\le 1\\,000)$ \u2014 the number of cans.\n\nThe second line of the input contains the sequence $a_1, a_2, \\dots, a_n$ $(1 \\le a_i \\le 1\\,000)$, where $a_i$ is the durability of the $i$-th can.\n\n\n-----Output-----\n\nIn the first line print the minimum number of shots required to knock each of the $n$ given cans down exactly once.\n\nIn the second line print the sequence consisting of $n$ distinct integers from $1$ to $n$ \u2014 the order of indices of cans that minimizes the number of shots required. If there are several answers, you can print any of them.\n\n\n-----Examples-----\nInput\n3\n20 10 20\n\nOutput\n43\n1 3 2 \n\nInput\n4\n10 10 10 10\n\nOutput\n64\n2 1 4 3 \n\nInput\n6\n5 4 5 4 4 5\n\nOutput\n69\n6 1 3 5 2 4 \n\nInput\n2\n1 4\n\nOutput\n3\n2 1 \n\n\n\n-----Note-----\n\nIn the first example Vasya can start shooting from the first can. He knocks it down with the first shot because he haven't knocked any other cans down before. After that he has to shoot the third can. To knock it down he shoots $20 \\cdot 1 + 1 = 21$ times. After that only second can remains. To knock it down Vasya shoots $10 \\cdot 2 + 1 = 21$ times. So the total number of shots is $1 + 21 + 21 = 43$.\n\nIn the second example the order of shooting does not matter because all cans have the same durability.",
    "public_tests": {
      "input": [
        "3\n20 10 20\n",
        "4\n10 10 10 10\n",
        "6\n5 4 5 4 4 5\n",
        "2\n1 4\n"
      ],
      "output": [
        "43\n1 3 2 \n",
        "64\n2 1 4 3 \n",
        "69\n6 1 3 5 2 4 \n",
        "3\n2 1 \n"
      ]
    },
    "private_tests": {
      "input": [
        "3\n20 10 20\n",
        "4\n10 10 10 10\n",
        "6\n5 4 5 4 4 5\n",
        "2\n1 4\n",
        "5\n13 16 20 18 11\n"
      ],
      "output": [
        "43\n1 3 2 \n",
        "64\n2 1 4 3 \n",
        "69\n6 1 3 5 2 4 \n",
        "3\n2 1 \n",
        "138\n3 4 2 1 5 \n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4801,
    "description": "Given a permutation $A = (a_1, a_2, \\dots , a_ N)$ of the integers $1, 2, \\dots , N$, we define the greedily increasing subsequence (GIS) in the following way.\n\nLet $g_1 = a_1$. For every $i > 1$, let $g_ i$ be the leftmost integer in $A$ that is strictly larger than $g_{i-1}$. If there for a given $i$ is no such integer, we say that the GIS of the sequence is the sequence $(g_1, g_2, ..., g_{i - 1})$.\n\nYour task is to, given a permutation $A$, compute the GIS of $A$.\n\n-----Input-----\nThe first line of input contains an integer $1 \\le N \\le 10^6$, the number of elements of the permutation $A$. The next line contains $N$ distinct integers between $1$ and $N$, the elements $a_1, \\dots , a_ N$ of the permutation $A$.\n\n-----Output-----\nFirst, output a line containing the length $l$ of the GIS of $A$. Then, output $l$ integers, containing (in order) the elements of the GIS.\n\n-----Explanation of sample 1-----\nIn this case, we have the permutation $2, 3, 1, 5, 4, 7, 6$. First, we have $g_1 = 2$. The leftmost integer larger than $2$ is $3$, so $g_2 = 3$. The leftmost integer larger than $3$ is $5$ ($1$ is too small), so $g_3 = 5$. The leftmost integer larger than $5$ is $7$, so $g_4 = 7$. Finally, there is no integer larger than $7$. Thus, the GIS of $2, 3, 1, 5, 4, 7, 6$ is $2, 3, 5, 7$.\n\n-----Examples-----\nSample Input 1:\n7\n2 3 1 5 4 7 6\nSample Output 1:\n4\n2 3 5 7\n\nSample Input 2:\n5\n1 2 3 4 5\nSample Output 2:\n5\n1 2 3 4 5",
    "public_tests": {
      "input": [
        "7\n2 3 1 5 4 7 6\n",
        "5\n1 2 3 4 5\n"
      ],
      "output": [
        "4\n2 3 5 7\n",
        "5\n1 2 3 4 5\n"
      ]
    },
    "private_tests": {
      "input": [
        "7\n2 3 1 5 4 7 6\n",
        "5\n1 2 3 4 5\n",
        "5\n5 4 3 2 1\n"
      ],
      "output": [
        "4\n2 3 5 7\n",
        "5\n1 2 3 4 5\n",
        "1\n5\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4797,
    "description": "Shortly before the programming contest started, Bjarki decided to update his computer. He didn\u2019t notice anything strange until he started coding in his favorite editor, Bim (Bjarki IMproved). Usually when he\u2019s writing in an editor and presses the backspace key a single character is erased to the left. But after the update pressing that key outputs the character <. He\u2019s tested all the editors on his machine, Bmacs, Neobim, bjedit, NoteBjad++ and Subjark Text, but they all seem to have the same problem. He doesn\u2019t have time to search the web for a solution, and instead decides to temporarily circumvent the issue with a simple program.\n\nHelp Bjarki write a program that takes as input the string that was written in the text editor, and outputs the string as Bjarki intended to write it. You can assume that Bjarki never intended to write the character <, and that Bjarki never pressed the backspace key in an empty line.\n\n-----Input-----\nOne line containing the string that was written in the text editor. The length of the string is at most $10^6$, and it will only contain lowercase letters from the English alphabet as well as the character <.\n\n-----Output-----\nOne line containing the string as Bjarki intended to write it.\n\n-----Examples-----\nSample Input 1:\na<bc<\nSample Output 1:\nb\n\nSample Input 2:\nfoss<<rritun\nSample Output 2:\nforritun",
    "public_tests": {
      "input": [
        "a<bc<\n",
        "foss<<rritun\n"
      ],
      "output": [
        "b\n",
        "forritun\n"
      ]
    },
    "private_tests": {
      "input": [
        "a<bc<\n",
        "foss<<rritun\n",
        "a<a<a<aa<<\n"
      ],
      "output": [
        "b\n",
        "forritun\n",
        "\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4790,
    "description": "A mysterious circular arrangement of black stones and white stones has appeared. Ming has been tasked with balancing the stones so that only one black and one white stone remain.\n\nMing has two operations for balancing the stones:\n - Take some consecutive sequence of stones where there is exactly one more black stone than a white stone and replace the stones with a single black stone\n - Take some consecutive sequence of stones where there is exactly one more white stone than black stone and replace the stones with a single white stone\n\nGiven a circular arrangement, determine if it is possible for Ming to balance the stones.\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The input will consist of a single string $s$ ($1 \\le |s| \\le 10^5$), with only the characters capital \u2018B\u2019 and \u2018W\u2019. The stones are arranged in a circle, so the first stone and the last stone are adjacent.\n\n-----Output-----\nOutput $1$ if it is possible for Ming to balance the stones with his rules. Otherwise, output $0$.\n\n-----Examples-----\nSample Input 1:\nWWBWBB\nSample Output 1:\n1\n\nSample Input 2:\nWWWWBBW\nSample Output 2:\n0",
    "public_tests": {
      "input": [
        "WWBWBB\n",
        "WWWWBBW\n"
      ],
      "output": [
        "1\n",
        "0\n"
      ]
    },
    "private_tests": {
      "input": [
        "WWBWBB\n",
        "WWWWBBW\n",
        "WBBBBBWWBW\n"
      ],
      "output": [
        "1\n",
        "0\n",
        "0\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4524,
    "description": "You are given two huge binary integer numbers $a$ and $b$ of lengths $n$ and $m$ respectively. You will repeat the following process: if $b > 0$, then add to the answer the value $a~ \\&~ b$ and divide $b$ by $2$ rounding down (i.e. remove the last digit of $b$), and repeat the process again, otherwise stop the process.\n\nThe value $a~ \\&~ b$ means bitwise AND of $a$ and $b$. Your task is to calculate the answer modulo $998244353$.\n\nNote that you should add the value $a~ \\&~ b$ to the answer in decimal notation, not in binary. So your task is to calculate the answer in decimal notation. For example, if $a = 1010_2~ (10_{10})$ and $b = 1000_2~ (8_{10})$, then the value $a~ \\&~ b$ will be equal to $8$, not to $1000$.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5$) \u2014 the length of $a$ and the length of $b$ correspondingly.\n\nThe second line of the input contains one huge integer $a$. It is guaranteed that this number consists of exactly $n$ zeroes and ones and the first digit is always $1$.\n\nThe third line of the input contains one huge integer $b$. It is guaranteed that this number consists of exactly $m$ zeroes and ones and the first digit is always $1$.\n\n\n-----Output-----\n\nPrint the answer to this problem in decimal notation modulo $998244353$.\n\n\n-----Examples-----\nInput\n4 4\n1010\n1101\n\nOutput\n12\n\nInput\n4 5\n1001\n10101\n\nOutput\n11\n\n\n\n-----Note-----\n\nThe algorithm for the first example:   add to the answer $1010_2~ \\&~ 1101_2 = 1000_2 = 8_{10}$ and set $b := 110$;  add to the answer $1010_2~ \\&~ 110_2 = 10_2 = 2_{10}$ and set $b := 11$;  add to the answer $1010_2~ \\&~ 11_2 = 10_2 = 2_{10}$ and set $b := 1$;  add to the answer $1010_2~ \\&~ 1_2 = 0_2 = 0_{10}$ and set $b := 0$. \n\nSo the answer is $8 + 2 + 2 + 0 = 12$.\n\nThe algorithm for the second example:   add to the answer $1001_2~ \\&~ 10101_2 = 1_2 = 1_{10}$ and set $b := 1010$;  add to the answer $1001_2~ \\&~ 1010_2 = 1000_2 = 8_{10}$ and set $b := 101$;  add to the answer $1001_2~ \\&~ 101_2 = 1_2 = 1_{10}$ and set $b := 10$;  add to the answer $1001_2~ \\&~ 10_2 = 0_2 = 0_{10}$ and set $b := 1$;  add to the answer $1001_2~ \\&~ 1_2 = 1_2 = 1_{10}$ and set $b := 0$. \n\nSo the answer is $1 + 8 + 1 + 0 + 1 = 11$.",
    "public_tests": {
      "input": [
        "4 4\n1010\n1101\n",
        "4 5\n1001\n10101\n"
      ],
      "output": [
        "12\n",
        "11\n"
      ]
    },
    "private_tests": {
      "input": [
        "4 4\n1010\n1101\n",
        "4 5\n1001\n10101\n",
        "5 5\n11111\n11111\n"
      ],
      "output": [
        "12\n",
        "11\n",
        "57\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4765,
    "description": "\"Perket\" is a widely known and delicious meal. For perket to be what it is, cooks must carefully choose the ingredients to get the fullest taste possible while keeping the meal traditional.\n\nYou have $N$ ingredients at your disposal. For each we know its sourness $S$ and bitterness $B$. When using multiple ingredients, the total sourness is the product of sourness amounts of all ingredients, while the total bitterness is the sum of bitterness amounts of all ingredients.\n\nAs everyone knows, perket is supposed to be neither sour nor bitter; we want to choose the ingredients so that the absolute difference between sourness and bitterness is the smallest.\n\nAlso, it is necessary to use at least one ingredient; you can\u2019t serve water as the main course.\n\n-----Input-----\nThe first line contains the integer $N$ $(1 \\leq N \\leq 10)$, the number of ingredients at our disposal. Each of the next $N$ lines contains two integers separated by a space, the sourness and bitterness of each ingredient.\n\nThe input data will be such that, if we make a meal with all ingredients, both the sourness and bitterness will be less than $1000000000$.\n\n-----Output-----\nOutput the smallest possible difference between sourness and bitterness.\n\n-----Examples-----\nSample Input 1:\n1\n3 10\nSample Output 1:\n7\n\nSample Input 2:\n2\n3 8\n5 8\nSample Output 2:\n1",
    "public_tests": {
      "input": [
        "1\n3 10\n",
        "2\n3 8\n5 8\n"
      ],
      "output": [
        "7\n",
        "1\n"
      ]
    },
    "private_tests": {
      "input": [
        "1\n3 10\n",
        "2\n3 8\n5 8\n",
        "4\n1 7\n2 6\n3 8\n4 9\n"
      ],
      "output": [
        "7\n",
        "1\n",
        "1\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4731,
    "description": "The Japanese game of Shiritori is the perfect 2-player game for a long car ride. The rules are simple: the first player picks any word to say, then the second player must choose a new word that begins with the last letter of the word that the first player just said. Then it is the first player\u2019s turn again to say a word that begins with the last letter of the previous word the second player said, and so on. At each turn, the player whose turn it is must say a word that links to the previous one and which has not been called out before during the game. Your job is to determine if the game was played according to these rules, given a history of the words used in a particular game. In a game, player $1$ always starts first.\n\n-----Input-----\nInput consists of one test case that begins with an integer $N$ ($2 \\leq N \\leq 100000$) on a single line. Each of the following $N$ lines contains $1$ word. The words are presented in the order in which the players called them out, starting with player $1$. All words consist of between $1$ and $120$ lowercase English letters.\n\n-----Output-----\nIf the game was played according to the rules, output \u201cFair Game\u201d. Otherwise, find out which player first violated the rules of the game. That player lost the game, so output \u201cPlayer <i> lost\u201d. For example, if player $1$ violated the rules first, output \u201cPlayer 1 lost\u201d.\n\n-----Examples-----\nSample Input 1:\n5\napple\near\nreal\nletters\nstyle\nSample Output 1:\nFair Game\n\nSample Input 2:\n3\napple\nextra\napple\nSample Output 2:\nPlayer 1 lost\n\nSample Input 3:\n2\napple\nneat\nSample Output 3:\nPlayer 2 lost",
    "public_tests": {
      "input": [
        "5\napple\near\nreal\nletters\nstyle\n",
        "3\napple\nextra\napple\n",
        "2\napple\nneat\n"
      ],
      "output": [
        "Fair Game\n",
        "Player 1 lost\n",
        "Player 2 lost\n"
      ]
    },
    "private_tests": {
      "input": [
        "5\napple\near\nreal\nletters\nstyle\n",
        "3\napple\nextra\napple\n",
        "2\napple\nneat\n",
        "5\napple\neast\nteam\nmeat\nteam\n"
      ],
      "output": [
        "Fair Game\n",
        "Player 1 lost\n",
        "Player 2 lost\n",
        "Player 1 lost\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4735,
    "description": "You are an eccentric billionaire with an affinity for sending stuff to Mars. In an ideal world you would send stuff to Mars all the time, but your engineers tell you that it is most efficient to do it when Earth and Mars are somewhat close to each other. \n\nYour engineers have calculated that optimal launch windows occur once every 26 months, and that one of them occurs in April 2018. They also tell you that they will not have any Big Finished Rockets by then, so you will have to wait for a later launch window.\n\nSince your rocket scientists apparently can not be bothered to tell you about the optimal launch windows before it is too late, you have to keep track of that yourself. Write a program that determines if there is an optimal launch window in any given year.\n\n-----Input-----\nThe only line of input contains an integer $y$ ($2018 \\le y \\le 10000$), the year you are interested in.\n\n-----Output-----\nOutput \u201cyes\u201d if there is an optimal launch window in the year $y$, otherwise output \u201cno\u201d.\n\n-----Examples-----\nSample Input 1:\n2018\nSample Output 1:\nyes\n\nSample Input 2:\n2019\nSample Output 2:\nno\n\nSample Input 3:\n2020\nSample Output 3:\nyes",
    "public_tests": {
      "input": [
        "2018\n",
        "2019\n",
        "2020\n"
      ],
      "output": [
        "yes\n",
        "no\n",
        "yes\n"
      ]
    },
    "private_tests": {
      "input": [
        "2018\n",
        "2019\n",
        "2020\n",
        "2028\n"
      ],
      "output": [
        "yes\n",
        "no\n",
        "yes\n",
        "no\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4086,
    "description": "Petya has an array $a$ consisting of $n$ integers. He wants to remove duplicate (equal) elements.\n\nPetya wants to leave only the rightmost entry (occurrence) for each element of the array. The relative order of the remaining unique elements should not be changed.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 50$) \u2014 the number of elements in Petya's array.\n\nThe following line contains a sequence $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 1\\,000$) \u2014 the Petya's array.\n\n\n-----Output-----\n\nIn the first line print integer $x$ \u2014 the number of elements which will be left in Petya's array after he removed the duplicates.\n\nIn the second line print $x$ integers separated with a space \u2014 Petya's array after he removed the duplicates. For each unique element only the rightmost entry should be left.\n\n\n-----Examples-----\nInput\n6\n1 5 5 1 6 1\n\nOutput\n3\n5 6 1 \n\nInput\n5\n2 4 2 4 4\n\nOutput\n2\n2 4 \n\nInput\n5\n6 6 6 6 6\n\nOutput\n1\n6 \n\n\n\n-----Note-----\n\nIn the first example you should remove two integers $1$, which are in the positions $1$ and $4$. Also you should remove the integer $5$, which is in the position $2$.\n\nIn the second example you should remove integer $2$, which is in the position $1$, and two integers $4$, which are in the positions $2$ and $4$.\n\nIn the third example you should remove four integers $6$, which are in the positions $1$, $2$, $3$ and $4$.",
    "public_tests": {
      "input": [
        "6\n1 5 5 1 6 1\n",
        "5\n2 4 2 4 4\n",
        "5\n6 6 6 6 6\n"
      ],
      "output": [
        "3\n5 6 1 \n",
        "2\n2 4 \n",
        "1\n6 \n"
      ]
    },
    "private_tests": {
      "input": [
        "6\n1 5 5 1 6 1\n",
        "5\n2 4 2 4 4\n",
        "5\n6 6 6 6 6\n",
        "7\n1 2 3 4 2 2 3\n",
        "9\n100 100 100 99 99 99 100 100 100\n",
        "27\n489 489 487 488 750 230 43 645 42 42 489 42 973 42 973 750 645 355 868 112 868 489 750 489 887 489 868\n",
        "40\n151 421 421 909 117 222 909 954 227 421 227 954 954 222 421 227 421 421 421 151 421 227 222 222 222 222 421 183 421 227 421 954 222 421 954 421 222 421 909 421\n",
        "48\n2 2 2 903 903 2 726 2 2 2 2 2 2 2 2 2 2 726 2 2 2 2 2 2 2 726 2 2 2 2 62 2 2 2 2 2 2 2 2 726 62 726 2 2 2 903 903 2\n",
        "1\n1\n",
        "13\n5 37 375 5 37 33 37 375 37 2 3 3 2\n",
        "50\n1 2 3 4 5 4 3 2 1 2 3 2 1 4 5 5 4 3 2 1 1 2 3 4 5 4 3 2 1 2 3 2 1 4 5 5 4 3 2 1 4 3 2 5 1 6 6 6 6 6\n",
        "47\n233 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "47\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "2\n964 964\n",
        "2\n1000 1000\n",
        "1\n1000\n",
        "45\n991 991 996 996 992 992 999 1000 998 1000 992 999 996 999 991 991 999 993 992 999 1000 997 992 999 996 991 994 996 991 999 1000 993 999 997 999 992 991 997 991 998 998 995 998 994 993\n",
        "6\n994 993 1000 998 991 994\n",
        "48\n992 995 992 991 994 992 995 999 996 993 999 995 993 992 1000 992 997 996 991 993 992 998 998 998 999 995 992 992 993 992 992 995 996 995 997 991 997 991 999 994 994 997 1000 998 1000 992 1000 999\n",
        "3\n6 6 3\n",
        "36\n999 1000 993 993 1000 999 996 997 998 995 995 997 999 995 1000 998 998 994 993 998 994 999 1000 995 996 994 991 991 999 996 993 999 996 998 991 997\n",
        "49\n991 997 995 991 995 998 994 996 997 991 998 993 992 999 996 995 991 991 999 997 995 993 997 1000 997 993 993 994 999 994 992 991 1000 996 994 996 996 999 992 992 1000 991 997 993 991 994 997 991 996\n",
        "2\n1000 999\n",
        "28\n997 994 991 994 994 995 1000 992 995 994 994 995 991 996 991 996 991 999 999 993 994 997 995 992 991 992 998 1000\n",
        "15\n991 995 995 1000 991 993 997 998 1000 994 1000 992 991 995 992\n",
        "6\n1000 1 1000 2 1000 1\n",
        "6\n1000 1 1000 2 1 1000\n",
        "7\n1 1000 1 999 1000 1 2\n"
      ],
      "output": [
        "3\n5 6 1 \n",
        "2\n2 4 \n",
        "1\n6 \n",
        "4\n1 4 2 3 \n",
        "2\n99 100 \n",
        "13\n487 488 230 43 42 973 645 355 112 750 887 489 868 \n",
        "8\n117 151 183 227 954 222 909 421 \n",
        "4\n62 726 903 2 \n",
        "1\n1 \n",
        "6\n5 33 375 37 3 2 \n",
        "6\n4 3 2 5 1 6 \n",
        "2\n233 1 \n",
        "1\n1 \n",
        "1\n964 \n",
        "1\n1000 \n",
        "1\n1000 \n",
        "10\n996 1000 999 992 997 991 995 998 994 993 \n",
        "5\n993 1000 998 991 994 \n",
        "10\n993 996 995 991 994 997 998 992 1000 999 \n",
        "2\n6 3 \n",
        "9\n1000 995 994 993 999 996 998 991 997 \n",
        "10\n998 995 999 992 1000 993 994 997 991 996 \n",
        "2\n1000 999 \n",
        "10\n996 999 993 994 997 995 991 992 998 1000 \n",
        "8\n993 997 998 994 1000 991 995 992 \n",
        "3\n2 1000 1 \n",
        "3\n2 1 1000 \n",
        "4\n999 1000 1 2 \n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4121,
    "description": "Vova's family is building the Great Vova Wall (named by Vova himself). Vova's parents, grandparents, grand-grandparents contributed to it. Now it's totally up to Vova to put the finishing touches.\n\nThe current state of the wall can be respresented by a sequence $a$ of $n$ integers, with $a_i$ being the height of the $i$-th part of the wall.\n\nVova can only use $2 \\times 1$ bricks to put in the wall (he has infinite supply of them, however).\n\nVova can put bricks horizontally on the neighboring parts of the wall of equal height. It means that if for some $i$ the current height of part $i$ is the same as for part $i + 1$, then Vova can put a brick there and thus increase both heights by 1. Obviously, Vova can't put bricks in such a way that its parts turn out to be off the borders (to the left of part $1$ of the wall or to the right of part $n$ of it).\n\nThe next paragraph is specific to the version 1 of the problem.\n\nVova can also put bricks vertically. That means increasing height of any part of the wall by 2.\n\nVova is a perfectionist, so he considers the wall completed when:\n\n  all parts of the wall has the same height;  the wall has no empty spaces inside it. \n\nCan Vova complete the wall using any amount of bricks (possibly zero)?\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of parts in the wall.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$) \u2014 the initial heights of the parts of the wall.\n\n\n-----Output-----\n\nPrint \"YES\" if Vova can complete the wall using any amount of bricks (possibly zero).\n\nPrint \"NO\" otherwise.\n\n\n-----Examples-----\nInput\n5\n2 1 1 2 5\n\nOutput\nYES\n\nInput\n3\n4 5 3\n\nOutput\nYES\n\nInput\n2\n10 10\n\nOutput\nYES\n\nInput\n3\n1 2 3\n\nOutput\nNO\n\n\n\n-----Note-----\n\nIn the first example Vova can put a brick on parts 2 and 3 to make the wall $[2, 2, 2, 2, 5]$ and then put 3 bricks on parts 1 and 2 and 3 bricks on parts 3 and 4 to make it $[5, 5, 5, 5, 5]$.\n\nIn the second example Vova can put a brick vertically on part 3 to make the wall $[4, 5, 5]$, then horizontally on parts 2 and 3 to make it $[4, 6, 6]$ and then vertically on part 1 to make it $[6, 6, 6]$.\n\nIn the third example the wall is already complete.",
    "public_tests": {
      "input": [
        "5\n2 1 1 2 5\n",
        "3\n4 5 3\n",
        "2\n10 10\n",
        "3\n1 2 3\n"
      ],
      "output": [
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n"
      ]
    },
    "private_tests": {
      "input": [
        "5\n2 1 1 2 5\n",
        "3\n4 5 3\n",
        "2\n10 10\n",
        "3\n1 2 3\n",
        "10\n1 9 7 6 2 4 7 8 1 3\n",
        "1\n1\n",
        "1\n2\n",
        "3\n2 1 2\n",
        "2\n1 2\n",
        "5\n1 2 2 1 2\n",
        "5\n5 2 5 2 6\n",
        "4\n3 3 3 4\n",
        "3\n1 1 1\n",
        "5\n2 1 1 2 1\n",
        "2\n99999999 99999998\n",
        "5\n1 1 2 1 2\n",
        "4\n1 2 2 2\n",
        "5\n1 2 2 2 2\n",
        "6\n3 3 4 4 3 4\n",
        "5\n2 10 6 9 4\n",
        "7\n10 2 3 4 2 8 8\n",
        "9\n2 5 1 9 6 5 7 3 1\n"
      ],
      "output": [
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "NO\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4788,
    "description": "Jonas is developing the JUxtaPhone and is tasked with animating the compass needle. The API is simple: the compass needle is currently in some direction (between\u00a0$0$ and\u00a0$359$ degrees, with north being\u00a0$0$, east being\u00a0$90$), and is being animated by giving the degrees to spin it. If the needle is pointing north, and you give the compass an input of\u00a0$90$, it will spin clockwise (positive numbers mean clockwise direction) to stop at east, whereas an input of\u00a0$-45$ would spin it counterclockwise to stop at north west. \n\nThe compass gives the current direction the phone is pointing and Jonas\u2019 task is to animate the needle taking the shortest path from the current needle direction to the correct direction. Many ifs, moduli, and even an arctan later, he is still not convinced his minimumDistance function is correct; he calls you on the phone.\n\n-----Input-----\nThe first line of input contains an integer $n_1$ ($0 \\le n_1 \\le 359$), the current direction of the needle. The second line of input contains an integer $n_2$ ($0 \\le n_2 \\le 359$), the correct direction of the needle.\n\n-----Output-----\nOutput the change in direction that would make the needle spin the shortest distance from\u00a0$n_1$ to\u00a0$n_2$. A positive change indicates spinning the needle clockwise, and a negative change indicates spinning the needle counter-clockwise. If the two input numbers are diametrically opposed, the needle should travel clockwise. I.e., in this case, output\u00a0$180$ rather than\u00a0$-180$.\n\n-----Examples-----\nSample Input 1:\n315\n45\nSample Output 1:\n90\n\nSample Input 2:\n180\n270\nSample Output 2:\n90",
    "public_tests": {
      "input": [
        "315\n45\n",
        "180\n270\n"
      ],
      "output": [
        "90\n",
        "90\n"
      ]
    },
    "private_tests": {
      "input": [
        "315\n45\n",
        "180\n270\n",
        "45\n270\n"
      ],
      "output": [
        "90\n",
        "90\n",
        "-135\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4771,
    "description": "It\u2019s that time of the year when students head back to school, which will usually involve moving lots of stuff, and packing lots of that stuff into boxes. However, before we go through that effort, it would be nice to know whether the boxes we have are the right size!\n\nA box has three dimensions, $l$, $w$, and $h$, and a box\u2019s volume $v$ is simply $l\\cdot w \\cdot h$. We have many small items to pack, and we don\u2019t care about their exact geometry: we know that, as long as a box has a volume of, at least, $\\mathbf{V}$, we will be able to pack all those items into that single box. So, given a box $i$, and its volume $v_ i$, then the difference $d_ i=v_ i-\\mathbf{V}$ can tell us whether the box is big enough or not to pack all the items. If $d_ i$ is greater than or equal to zero, the box is big enough; otherwise, the box is too small.\n\nSo, we want to answer a simple question: given multiple boxes, is the largest box (by volume) large enough to store all our items? For example, suppose $\\mathbf{V}=10$ and we have three boxes, $A$, $B$, and $C$, with dimensions $(1,1,2)$, $(2,2,2)$, and $(3,2,1)$, respectively. Their volumes will be $v_ A=2$, $v_ B=8$, and $v_ C=6$, which means the largest box is $B$. Unfortunately, $d_ B=v_ B-\\mathbf{V}=8-10=-2$, which means our largest box is not large enough.\n\nOn the other hand, suppose $\\mathbf{V}=980$, and we had four boxes, $W$, $X$, $Y$, and $Z$ with dimensions $(10,10,10)$, $(10,5,2)$, $(5,3,2)$, and $(90,5,2)$, respectively. Their volumes will be $v_ W=1000$, $v_ X=100$, $v_ Y=30$ and $v_ Z=900$, making $W$ the largest box and, since $d_ W=v_ W-\\mathbf{V}=1000-980=20$, that means $W$ is big enough for all our items.\n\n-----Input-----\nThe input specifies a set of boxes. It begins with a line containing two integers: $n$ ($1 \\le n \\le 100$), specifying the number of boxes, and $\\mathbf{V}$, as defined above. The remaining input is composed of $n$ lines, each specifying one box. Each line contains the dimensions $l$, $w$, and $h$ for the box. You may assume that $1 \\leqslant l, w, h, \\mathbf{V} < 2^{32}$. You may also assume that, for any given box $i$, its volume $v_ i$ will always be less than\u00a0$2^{32}$\n\n-----Output-----\nThe output is a single integer: the value of $d_ i$ for the largest box by volume.\n\n-----Examples-----\nSample Input 1:\n3 10\n1 1 2\n2 2 2\n3 2 1\nSample Output 1:\n-2\n\nSample Input 2:\n3 30\n1 1 1\n5 2 3\n5 2 1\nSample Output 2:\n0",
    "public_tests": {
      "input": [
        "3 10\n1 1 2\n2 2 2\n3 2 1\n",
        "3 30\n1 1 1\n5 2 3\n5 2 1\n"
      ],
      "output": [
        "-2\n",
        "0\n"
      ]
    },
    "private_tests": {
      "input": [
        "3 10\n1 1 2\n2 2 2\n3 2 1\n",
        "3 30\n1 1 1\n5 2 3\n5 2 1\n",
        "4 980\n10 10 10\n10 5 2\n5 3 2\n90 5 2\n"
      ],
      "output": [
        "-2\n",
        "0\n",
        "20\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4027,
    "description": "You are given an integer sequence $1, 2, \\dots, n$. You have to divide it into two sets $A$ and $B$ in such a way that each element belongs to exactly one set and $|sum(A) - sum(B)|$ is minimum possible.\n\nThe value $|x|$ is the absolute value of $x$ and $sum(S)$ is the sum of elements of the set $S$.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^9$).\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum possible value of $|sum(A) - sum(B)|$ if you divide the initial sequence $1, 2, \\dots, n$ into two sets $A$ and $B$.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n0\n\nInput\n5\n\nOutput\n1\n\nInput\n6\n\nOutput\n1\n\n\n\n-----Note-----\n\nSome (not all) possible answers to examples:\n\nIn the first example you can divide the initial sequence into sets $A = \\{1, 2\\}$ and $B = \\{3\\}$ so the answer is $0$.\n\nIn the second example you can divide the initial sequence into sets $A = \\{1, 3, 4\\}$ and $B = \\{2, 5\\}$ so the answer is $1$.\n\nIn the third example you can divide the initial sequence into sets $A = \\{1, 4, 5\\}$ and $B = \\{2, 3, 6\\}$ so the answer is $1$.",
    "public_tests": {
      "input": [
        "3\n",
        "5\n",
        "6\n"
      ],
      "output": [
        "0\n",
        "1\n",
        "1\n"
      ]
    },
    "private_tests": {
      "input": [
        "3\n",
        "5\n",
        "6\n",
        "2000000000\n",
        "1999999999\n",
        "1999999997\n",
        "1999999998\n",
        "1\n",
        "69420\n",
        "999999998\n",
        "65535\n",
        "27397633\n",
        "46341\n",
        "1000271094\n",
        "84457\n",
        "2\n",
        "250489\n",
        "1777777\n",
        "1825468885\n",
        "4\n",
        "1000005\n",
        "1000080110\n",
        "1999999993\n",
        "1000000002\n",
        "1999999929\n",
        "123456789\n",
        "1999999990\n",
        "1000001\n",
        "129847189\n",
        "1777778\n",
        "7656765\n",
        "999998\n",
        "12345\n",
        "1000003346\n",
        "333333333\n",
        "1000070102\n",
        "46353\n",
        "199999990\n",
        "63245\n",
        "123214213\n",
        "123124213\n",
        "1244164813\n",
        "199999998\n",
        "1234567889\n",
        "10\n",
        "46342\n",
        "65538\n",
        "1465465413\n",
        "778778777\n",
        "46369\n",
        "46362\n",
        "46401\n",
        "99\n",
        "999\n"
      ],
      "output": [
        "0\n",
        "1\n",
        "1\n",
        "0\n",
        "0\n",
        "1\n",
        "1\n",
        "1\n",
        "0\n",
        "1\n",
        "0\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "0\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "0\n",
        "0\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4447,
    "description": "You are given an array consisting of $n$ integers $a_1, a_2, \\dots, a_n$, and a positive integer $m$. It is guaranteed that $m$ is a divisor of $n$.\n\nIn a single move, you can choose any position $i$ between $1$ and $n$ and increase $a_i$ by $1$.\n\nLet's calculate $c_r$ ($0 \\le r \\le m-1)$ \u2014 the number of elements having remainder $r$ when divided by $m$. In other words, for each remainder, let's find the number of corresponding elements in $a$ with that remainder.\n\nYour task is to change the array in such a way that $c_0 = c_1 = \\dots = c_{m-1} = \\frac{n}{m}$.\n\nFind the minimum number of moves to satisfy the above requirement.\n\n\n-----Input-----\n\nThe first line of input contains two integers $n$ and $m$ ($1 \\le n \\le 2 \\cdot 10^5, 1 \\le m \\le n$). It is guaranteed that $m$ is a divisor of $n$.\n\nThe second line of input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^9$), the elements of the array.\n\n\n-----Output-----\n\nIn the first line, print a single integer \u2014 the minimum number of moves required to satisfy the following condition: for each remainder from $0$ to $m - 1$, the number of elements of the array having this remainder equals $\\frac{n}{m}$.\n\nIn the second line, print any array satisfying the condition and can be obtained from the given array with the minimum number of moves. The values of the elements of the resulting array must not exceed $10^{18}$.\n\n\n-----Examples-----\nInput\n6 3\n3 2 0 6 10 12\n\nOutput\n3\n3 2 0 7 10 14 \n\nInput\n4 2\n0 1 2 3\n\nOutput\n0\n0 1 2 3",
    "public_tests": {
      "input": [
        "6 3\n3 2 0 6 10 12\n",
        "4 2\n0 1 2 3\n"
      ],
      "output": [
        "3\n3 2 0 7 10 14 \n",
        "0\n0 1 2 3 \n"
      ]
    },
    "private_tests": {
      "input": [
        "6 3\n3 2 0 6 10 12\n",
        "4 2\n0 1 2 3\n",
        "1 1\n1000000000\n",
        "6 3\n3 2 0 6 10 11\n",
        "100 25\n6745 2075 7499 7517 1776 5164 2335 2745 4465 1457 7565 2232 2486 9025 8059 9646 8017 7662 9690 3352 2306 366 7422 1073 7169 8966 4506 8225 5614 8628 2908 7452 9625 9332 7097 353 1043 8118 5794 4486 626 971 6731 6618 887 6354 4814 7307 7681 6160 9351 2579 411 3436 5570 2812 2726 4433 3220 577 5891 3861 528 2183 127 5579 6979 4005 9953 5038 9937 4792 3003 9417 8796 1565 11 2596 2486 3494 4464 9568 5512 5565 9822 9820 4848 2889 9527 2249 9860 8236 256 8434 8038 6407 5570 5922 7435 2815\n"
      ],
      "output": [
        "3\n3 2 0 7 10 14 \n",
        "0\n0 1 2 3 \n",
        "0\n1000000000 \n",
        "1\n3 2 0 7 10 11 \n",
        "88\n6745 2075 7499 7517 1776 5164 2335 2745 4465 1457 7565 2232 2486 9025 8059 9646 8017 7662 9690 3352 2306 366 7422 1073 7169 8966 4506 8225 5614 8628 2908 7452 9625 9332 7097 353 1043 8118 5794 4486 626 971 6731 6618 887 6354 4814 7307 7681 6160 9351 2579 411 3436 5570 2812 2726 4433 3220 577 5891 3863 528 2183 127 5579 6979 4005 9953 5038 9937 4792 3005 9417 8796 1565 24 2596 2505 3494 4464 9568 5513 5566 9822 9823 4848 2899 9530 2249 9860 8259 259 8434 8038 6408 5573 5922 7435 2819 \n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4780,
    "description": "When moving, ants form rows so that each ant except the first is behind another ant. It is not widely known what happens when two rows of ants moving in opposite directions run into each other in a passage too narrow for both rows to pass through. One theory says that, in that situation, ants will jump over each other.\n\nFrom the moment the rows meet, each second every ant jumps over (or gets jumped over, as they agree upon) the ant in front of himself so that the two ants swap places, but only if the other ant is moving in the opposite direction. Find the order of the ants after $T$ seconds.\n\n-----Input-----\nThe first line contains two integers $N_1$ and $N_2$, the numbers of ants in the first and second rows, respectively.\n\nThe next two rows contain the orders of ants in the first and second row (first to last). Each ant is uniquely determined by an uppercase letter of the English alphabet (this letter is unique between both rows).\n\nThe last line of input contains the integer $T$ $(0 \\leq T \\leq 50)$.\n\n-----Output-----\nOutput the order of the ants after $T$ seconds on a single line. Our viewpoint is such that the first row of ants comes from our left side and the other one from our right side.\n\n-----Examples-----\nSample Input 1:\n3 3\nABC\nDEF\n0\nSample Output 1:\nCBADEF\n\nSample Input 2:\n3 3\nABC\nDEF\n2\nSample Output 2:\nCDBEAF",
    "public_tests": {
      "input": [
        "3 3\nABC\nDEF\n0\n",
        "3 3\nABC\nDEF\n2\n"
      ],
      "output": [
        "CBADEF\n",
        "CDBEAF\n"
      ]
    },
    "private_tests": {
      "input": [
        "3 3\nABC\nDEF\n0\n",
        "3 3\nABC\nDEF\n2\n",
        "3 4\nJLA\nCRUO\n3\n"
      ],
      "output": [
        "CBADEF\n",
        "CDBEAF\n",
        "CARLUJO\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4378,
    "description": "You have a garland consisting of $n$ lamps. Each lamp is colored red, green or blue. The color of the $i$-th lamp is $s_i$ ('R', 'G' and 'B' \u2014 colors of lamps in the garland).\n\nYou have to recolor some lamps in this garland (recoloring a lamp means changing its initial color to another) in such a way that the obtained garland is diverse.\n\nA garland is called diverse if any two adjacent (consecutive) lamps (i. e. such lamps that the distance between their positions is $1$) have distinct colors.\n\nIn other words, if the obtained garland is $t$ then for each $i$ from $1$ to $n-1$ the condition $t_i \\ne t_{i + 1}$ should be satisfied.\n\nAmong all ways to recolor the initial garland to make it diverse you have to choose one with the minimum number of recolored lamps. If there are multiple optimal solutions, print any of them.\n\n\n-----Input-----\n\nThe first line of the input contains one integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) \u2014 the number of lamps.\n\nThe second line of the input contains the string $s$ consisting of $n$ characters 'R', 'G' and 'B' \u2014 colors of lamps in the garland.\n\n\n-----Output-----\n\nIn the first line of the output print one integer $r$ \u2014 the minimum number of recolors needed to obtain a diverse garland from the given one.\n\nIn the second line of the output print one string $t$ of length $n$ \u2014 a diverse garland obtained from the initial one with minimum number of recolors. If there are multiple optimal solutions, print any of them.\n\n\n-----Examples-----\nInput\n9\nRBGRRBRGG\n\nOutput\n2\nRBGRGBRGR\n\nInput\n8\nBBBGBRRR\n\nOutput\n2\nBRBGBRGR\n\nInput\n13\nBBRRRRGGGGGRR\n\nOutput\n6\nBGRBRBGBGBGRG",
    "public_tests": {
      "input": [
        "9\nRBGRRBRGG\n",
        "8\nBBBGBRRR\n",
        "13\nBBRRRRGGGGGRR\n"
      ],
      "output": [
        "2\nRBGRGBRGR\n",
        "2\nBRBGBRGR\n",
        "6\nBGRBRBGBGBGRG\n"
      ]
    },
    "private_tests": {
      "input": [
        "9\nRBGRRBRGG\n",
        "8\nBBBGBRRR\n",
        "13\nBBRRRRGGGGGRR\n",
        "1\nB\n",
        "2\nBB\n",
        "3\nRGG\n",
        "5\nGBBRG\n",
        "500\nBRGRRBBGGRBBRBBGGGRBGBGRGRRBRRRBGRBGBRGGGRBBRRBBBRGGBGBBBGGGRGRBBBRBGGBRGGGBRGGRBRGBBGBRRGGBGRGBGGGGGRBBRGBGGRBGGGRBRGGBBGRBBRRRGBRRBGGBGBGGGGRBGRGRRGGGBRBRRGBGGGRBRBBGBBGGBRBGBRRGGRRBGGRRRRBRGRBBBRRBGRBBGBGBRRGGBRRBBRRGGRRRBGBRBBGRRRRBGGGBRGRRBRRRRGGRBRRBBRRGRGBGRRRBRRGGBBGRRBBGRGRBRGBRBBRBBBBGBRGGGGGGBBBGRGGBGRRBRBBBBRBGBRRGGRGBGGBRGRBGRBGBGRRGRGBGGRRRGRGBRGBGBBGRRBBGGGBRGGBGRRGGGRBGGRRBRGBGGBRRBBGGGGRRBGGGBRGGBRRRBRBGGRRRRGBRBBRBRGRGRRBBBBGBRGRRRRGBGBRGGGRBRGGGBGBBRGRRRBBRBGGGRGBRRGGRRGGBBGRR\n",
        "69\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\n"
      ],
      "output": [
        "2\nRBGRGBRGR\n",
        "2\nBRBGBRGR\n",
        "6\nBGRBRBGBGBGRG\n",
        "0\nB\n",
        "1\nBR\n",
        "1\nRGR\n",
        "1\nGBGRG\n",
        "131\nBRGRGBRGBRBGRBRGBGRBGBGRGRGBRGRBGRBGBRGBGRBGRGBGBRGRBGBRBGBGRGRBGBRBGRBRGRGBRGBRBRGBRGBRBGRBGRGBGBGBGRBGRGBGBRBGBGRBRGRBRGRBGRBRGBRGBGRBGBGBGBRBGRGRBGRGBRBRBGBGBGRBRBRGBRGRBRBGBRBGBRGBGBRGRGBRGRBGBRGBGRBRGBGBRBGRBRGBGRBGBRGRBGBRBRGRGRGBGRGBRGRGBRBRBGBRBRGBGRBGRGBGRGRBRBGRBRGRGBRGRGRBRGBRBGRBRBRGBRGRGRGRBRBGRGRBGRGBRBGBGRBGBRBGBRGBGRBRGRBGRBGBGRBGRGBGBRBRGRGBRGBGBRGRGBRGRGBRGRBGRBGBGRBGBRGBRGBGRBRGBRGBGBRGBGRGBRGRBRGRBRBGBRBRBGBRBGRBRGRGRGBRBRGBRGRBRBGBGBRGBGRBRGRGBGBGRGRGRBGRBGBGRGBRBGBRBGRBRGRG\n",
        "34\nRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGRGR\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4096,
    "description": "The only difference between easy and hard versions is the constraints.\n\nPolycarp has to write a coursework. The coursework consists of $m$ pages.\n\nPolycarp also has $n$ cups of coffee. The coffee in the $i$-th cup has $a_i$ caffeine in it. Polycarp can drink some cups of coffee (each one no more than once). He can drink cups in any order. Polycarp drinks each cup instantly and completely (i.e. he cannot split any cup into several days).\n\nSurely, courseworks are not usually being written in a single day (in a perfect world of Berland, at least). Some of them require multiple days of hard work.\n\nLet's consider some day of Polycarp's work. Consider Polycarp drinks $k$ cups of coffee during this day and caffeine dosages of cups Polycarp drink during this day are $a_{i_1}, a_{i_2}, \\dots, a_{i_k}$. Then the first cup he drinks gives him energy to write $a_{i_1}$ pages of coursework, the second cup gives him energy to write $max(0, a_{i_2} - 1)$ pages, the third cup gives him energy to write $max(0, a_{i_3} - 2)$ pages, ..., the $k$-th cup gives him energy to write $max(0, a_{i_k} - k + 1)$ pages.\n\nIf Polycarp doesn't drink coffee during some day, he cannot write coursework at all that day.\n\nPolycarp has to finish his coursework as soon as possible (spend the minimum number of days to do it). Your task is to find out this number of days or say that it is impossible.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n \\le 100$, $1 \\le m \\le 10^4$) \u2014 the number of cups of coffee and the number of pages in the coursework.\n\nThe second line of the input contains $n$ integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 100$), where $a_i$ is the caffeine dosage of coffee in the $i$-th cup.\n\n\n-----Output-----\n\nIf it is impossible to write the coursework, print -1. Otherwise print the minimum number of days Polycarp needs to do it.\n\n\n-----Examples-----\nInput\n5 8\n2 3 1 1 2\n\nOutput\n4\n\nInput\n7 10\n1 3 4 2 1 4 2\n\nOutput\n2\n\nInput\n5 15\n5 5 5 5 5\n\nOutput\n1\n\nInput\n5 16\n5 5 5 5 5\n\nOutput\n2\n\nInput\n5 26\n5 5 5 5 5\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first example Polycarp can drink fourth cup during first day (and write $1$ page), first and second cups during second day (and write $2 + (3 - 1) = 4$ pages), fifth cup during the third day (and write $2$ pages) and third cup during the fourth day (and write $1$ page) so the answer is $4$. It is obvious that there is no way to write the coursework in three or less days in this test.\n\nIn the second example Polycarp can drink third, fourth and second cups during first day (and write $4 + (2 - 1) + (3 - 2) = 6$ pages) and sixth cup during second day (and write $4$ pages) so the answer is $2$. It is obvious that Polycarp cannot write the whole coursework in one day in this test.\n\nIn the third example Polycarp can drink all cups of coffee during first day and write $5 + (5 - 1) + (5 - 2) + (5 - 3) + (5 - 4) = 15$ pages of coursework.\n\nIn the fourth example Polycarp cannot drink all cups during first day and should drink one of them during the second day. So during first day he will write $5 + (5 - 1) + (5 - 2) + (5 - 3) = 14$ pages of coursework and during second day he will write $5$ pages of coursework. This is enough to complete it.\n\nIn the fifth example Polycarp cannot write the whole coursework at all, even if he will drink one cup of coffee during each day, so the answer is -1.",
    "public_tests": {
      "input": [
        "5 8\n2 3 1 1 2\n",
        "7 10\n1 3 4 2 1 4 2\n",
        "5 15\n5 5 5 5 5\n",
        "5 16\n5 5 5 5 5\n",
        "5 26\n5 5 5 5 5\n"
      ],
      "output": [
        "4\n",
        "2\n",
        "1\n",
        "2\n",
        "-1\n"
      ]
    },
    "private_tests": {
      "input": [
        "5 8\n2 3 1 1 2\n",
        "7 10\n1 3 4 2 1 4 2\n",
        "5 15\n5 5 5 5 5\n",
        "5 16\n5 5 5 5 5\n",
        "5 26\n5 5 5 5 5\n",
        "100 10000\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n",
        "100 10000\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 99 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n",
        "100 133\n1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1 1 1 3 1 1 2 1 3 1 1 1 2 1 3 1 1 1 2 2 1 1 1 1 1 1 1 3 1 2 1 1 2\n",
        "100 550\n12 7 8 16 13 6 12 6 10 12 13 10 6 12 9 8 5 13 7 13 5 14 10 13 9 6 14 14 6 11 13 13 8 3 8 13 12 8 13 8 14 10 15 8 12 8 10 13 13 13 7 8 12 9 7 10 16 10 10 4 9 9 11 8 8 13 8 15 11 8 9 6 6 16 12 11 9 8 10 9 12 8 11 9 8 10 7 13 6 13 10 9 15 9 3 11 5 17 7 13\n",
        "100 1960\n18 11 82 57 57 53 81 33 89 3 78 61 82 12 23 55 97 3 91 25 38 60 23 65 67 24 57 52 7 61 95 16 60 95 100 42 41 98 72 61 5 77 36 65 58 53 19 100 99 84 55 13 10 10 92 84 58 91 39 39 70 79 73 92 21 1 58 100 56 96 7 94 56 57 56 46 93 3 62 19 51 90 22 90 69 85 92 44 9 4 94 91 85 70 98 17 9 39 3 40\n",
        "100 1641\n94 59 24 80 3 80 94 45 34 21 35 13 95 66 8 38 75 41 69 76 97 83 18 86 10 16 35 91 86 91 77 42 73 67 92 34 11 23 31 54 12 59 51 6 57 69 7 60 84 25 33 65 17 90 100 45 75 70 92 35 67 70 34 10 90 39 77 73 58 62 58 12 41 50 81 16 41 8 17 11 1 38 96 66 30 9 25 97 55 85 56 75 82 5 89 15 1 88 61 16\n",
        "100 807\n70 14 71 10 42 8 10 61 78 38 95 73 5 37 85 17 60 82 51 28 49 5 9 11 49 7 18 38 78 20 47 71 82 30 79 34 81 52 93 43 19 44 62 52 68 82 96 20 66 62 15 13 31 61 8 3 89 49 33 30 56 53 99 32 55 82 92 53 67 24 13 17 21 38 5 86 89 21 64 95 46 86 62 38 95 49 61 51 6 58 30 62 71 44 80 21 85 41 15 3\n",
        "100 2019\n46 74 21 28 88 31 35 69 7 56 56 30 3 96 70 8 38 28 33 87 96 15 91 31 88 87 97 77 54 50 21 97 87 98 78 26 48 77 56 29 18 30 81 97 72 98 76 76 52 100 6 61 42 41 12 65 98 36 82 14 49 39 64 47 31 17 7 29 68 98 56 31 10 26 26 52 29 38 11 87 91 29 27 14 60 77 89 4 60 35 96 46 64 83 63 31 77 90 81 79\n",
        "100 686\n18 25 67 51 38 62 52 81 51 74 16 90 13 67 47 91 23 70 10 34 48 38 82 48 31 79 76 12 41 84 7 22 95 62 69 26 18 2 18 18 22 11 96 39 83 22 65 36 26 37 88 10 53 13 16 30 15 11 35 10 37 26 25 69 100 51 23 6 77 64 12 45 95 10 59 21 68 51 58 83 45 69 1 94 21 5 21 58 10 17 58 41 52 18 54 32 68 42 39 63\n",
        "100 3599\n97 74 72 46 41 31 18 51 98 37 18 61 78 30 64 7 47 3 2 36 27 93 7 23 67 61 88 35 47 14 20 9 77 13 54 17 77 24 49 56 60 4 75 45 2 65 83 59 62 38 13 57 98 98 98 10 44 57 82 13 6 32 48 39 79 57 94 48 56 45 58 65 32 35 50 33 36 52 48 11 63 53 67 46 91 75 68 29 59 32 62 19 3 87 23 13 3 60 100 23\n",
        "100 4344\n25 15 25 23 3 4 2 43 54 23 58 5 72 71 91 24 61 61 20 80 67 75 12 99 24 82 10 100 68 92 34 79 76 42 66 17 7 95 87 67 61 18 60 99 99 53 90 3 80 1 31 8 83 26 94 45 35 74 29 25 9 54 88 12 10 18 79 71 55 79 7 52 51 47 29 63 92 39 1 15 14 2 93 70 26 47 28 72 100 51 96 32 11 56 40 99 11 12 42 47\n",
        "100 5013\n45 59 71 97 56 73 77 31 9 5 98 44 63 1 2 41 88 15 43 29 16 61 25 78 81 90 31 53 80 58 60 53 67 78 71 25 37 62 36 82 53 41 45 58 91 36 6 47 94 63 41 52 80 47 86 79 22 99 84 30 21 59 31 94 45 75 56 99 46 13 52 42 66 51 4 93 52 22 50 23 60 58 27 85 69 7 100 18 50 74 34 44 22 17 49 1 28 63 76 63\n",
        "100 3961\n73 3 25 75 14 50 60 19 73 84 37 92 53 42 29 54 2 73 65 70 68 39 42 61 34 98 48 14 100 28 78 28 54 10 80 25 59 32 70 88 58 51 30 4 80 16 14 83 12 26 67 4 62 75 79 17 12 12 39 38 28 80 70 80 76 41 44 19 45 51 9 32 89 66 80 27 12 9 4 39 11 14 54 13 4 83 76 69 4 92 68 61 25 82 59 88 36 10 22 84\n",
        "100 4916\n1 48 78 56 75 22 48 7 28 70 77 32 43 71 40 72 29 28 83 15 9 16 52 40 91 14 69 75 13 95 5 6 53 47 93 33 92 7 7 95 51 66 11 58 77 3 29 27 34 89 80 60 47 95 79 60 3 32 86 50 39 85 5 58 99 6 29 42 36 77 53 15 8 78 51 58 65 96 49 47 70 70 80 37 47 51 40 12 57 19 5 77 32 47 68 86 44 57 60 96\n",
        "100 4799\n25 100 32 34 25 99 19 99 84 52 20 83 34 12 59 89 51 86 5 63 57 2 61 23 48 27 90 28 29 65 31 73 40 79 89 29 18 86 49 14 48 84 100 17 65 79 37 71 52 47 98 100 40 20 71 94 90 53 41 54 47 2 40 36 35 63 14 66 35 11 2 97 23 90 26 88 17 79 2 59 12 22 14 61 78 15 7 62 7 38 43 94 43 12 77 80 60 9 2 20\n",
        "42 12\n28 42 80 47 45 41 13 38 52 66 91 73 84 40 98 37 52 79 63 66 28 79 19 11 34 89 5 62 54 4 20 26 47 58 38 31 88 29 11 18 3 46\n",
        "69 3483\n60 56 86 28 76 4 96 31 56 49 68 43 28 81 64 84 17 35 13 10 96 18 33 76 19 40 33 71 69 63 35 87 53 56 89 98 15 74 88 35 67 20 18 97 4 20 53 70 26 53 66 68 85 54 63 7 75 8 9 97 78 56 7 96 12 39 9 72 56\n",
        "100 112\n1 1 1 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 2 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 2 1\n",
        "100 10000\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "1 5\n6\n",
        "18 76\n6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 1 1\n"
      ],
      "output": [
        "4\n",
        "2\n",
        "1\n",
        "2\n",
        "-1\n",
        "100\n",
        "-1\n",
        "-1\n",
        "9\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "1\n",
        "4\n",
        "9\n",
        "23\n",
        "6\n",
        "93\n",
        "47\n",
        "1\n",
        "35\n",
        "-1\n",
        "-1\n",
        "1\n",
        "5\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4433,
    "description": "You are given an undirected unweighted connected graph consisting of $n$ vertices and $m$ edges. It is guaranteed that there are no self-loops or multiple edges in the given graph.\n\nYour task is to find any spanning tree of this graph such that the maximum degree over all vertices is maximum possible. Recall that the degree of a vertex is the number of edges incident to it.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($2 \\le n \\le 2 \\cdot 10^5$, $n - 1 \\le m \\le min(2 \\cdot 10^5, \\frac{n(n-1)}{2})$) \u2014 the number of vertices and edges, respectively.\n\nThe following $m$ lines denote edges: edge $i$ is represented by a pair of integers $v_i$, $u_i$ ($1 \\le v_i, u_i \\le n$, $u_i \\ne v_i$), which are the indices of vertices connected by the edge. There are no loops or multiple edges in the given graph, i. e. for each pair ($v_i, u_i$) there are no other pairs ($v_i, u_i$) or ($u_i, v_i$) in the list of edges, and for each pair $(v_i, u_i)$ the condition $v_i \\ne u_i$ is satisfied.\n\n\n-----Output-----\n\nPrint $n-1$ lines describing the edges of a spanning tree such that the maximum degree over all vertices is maximum possible. Make sure that the edges of the printed spanning tree form some subset of the input edges (order doesn't matter and edge $(v, u)$ is considered the same as the edge $(u, v)$).\n\nIf there are multiple possible answers, print any of them.\n\n\n-----Examples-----\nInput\n5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n\nOutput\n3 5\n2 1\n3 2\n3 4\n\nInput\n4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n\nOutput\n4 1\n1 2\n1 3\n\nInput\n8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n\nOutput\n3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\n\n\n\n-----Note-----\n\nPicture corresponding to the first example: [Image]\n\nIn this example the number of edges of spanning tree incident to the vertex $3$ is $3$. It is the maximum degree over all vertices of the spanning tree. It is easy to see that we cannot obtain a better answer.\n\nPicture corresponding to the second example: [Image]\n\nIn this example the number of edges of spanning tree incident to the vertex $1$ is $3$. It is the maximum degree over all vertices of the spanning tree. It is easy to see that we cannot obtain a better answer.\n\nPicture corresponding to the third example: [Image]\n\nIn this example the number of edges of spanning tree incident to the vertex $2$ is $4$. It is the maximum degree over all vertices of the spanning tree. It is easy to see that we cannot obtain a better answer. But because this example is symmetric, we can choose almost the same spanning tree but with vertex $5$ instead of $2$.",
    "public_tests": {
      "input": [
        "5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n",
        "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n",
        "8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n"
      ],
      "output": [
        "3 5\n2 1\n3 2\n3 4\n",
        "4 1\n1 2\n1 3\n",
        "3 2\n2 5\n8 5\n6 1\n2 7\n1 2\n3 4\n"
      ]
    },
    "private_tests": {
      "input": [
        "5 5\n1 2\n2 3\n3 5\n4 3\n1 5\n",
        "4 6\n1 2\n1 3\n1 4\n2 3\n2 4\n3 4\n",
        "8 9\n1 2\n2 3\n2 5\n1 6\n3 4\n6 5\n4 5\n2 7\n5 8\n",
        "2 1\n1 2\n",
        "5 6\n1 5\n2 5\n3 5\n4 5\n2 3\n1 2\n",
        "5 6\n2 1\n2 3\n2 4\n2 5\n3 4\n3 5\n"
      ],
      "output": [
        "4 3\n3 5\n2 3\n1 2\n",
        "1 3\n1 2\n1 4\n",
        "4 3\n7 2\n5 8\n5 2\n6 1\n2 3\n1 2\n",
        "2 1\n",
        "5 3\n1 5\n4 5\n5 2\n",
        "2 4\n3 2\n1 2\n2 5\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4843,
    "description": "The \u201ceight queens puzzle\u201d is a classic puzzle where you have to place eight queens on a chess board in such a way that no queen can attack another queen. Remember that, in chess, queens can move in any direction (horizontal, vertical, and diagonal), which means the eight queens would have to be laid out in such a way that no two queens are on the same row, column, or diagonal.\n\nThis puzzle actually has multiple solutions. The following is one possible solution:\n\nFinding the solutions to the \u201ceight queens puzzle\u201d is actually an interesting computational problem. However, that\u2019s not the problem you will be solving here. Instead, you will be solving a much simpler problem: given a proposed solution to the puzzle, you must verify whether it is a valid solution (i.e., whether no queen can attack another queen).\n\nWhen referring to specific squares on the board, we will assume that the bottom-left square is the $(0,0)$ square, and that the $x$ coordinate increases as you move right, and the $y$ coordinate increases as you move up.\n\nIn other words, something like this:\n\nFurthermore, we will consider the more general \u201c$N$-queens puzzle\u201d, where the chessboard can have $N\\times N$ squares, and there will be $N$ queens on the board. For example, this would be a correct solution to the 4-queens puzzle:\n\nAnd this would be an incorrect solution to the 4-queens puzzle:\n\nNotice how the queen in (2,2) can attack the queen in (0,2) and the queen in (2,3).\n\n-----Input-----\nThe input begins with a line containing a single integer: the value of $N$ ($0 < N \\le 5000$). This is followed by $N$ lines, each containing the position of a queen as two integers: $x$ and $y$ (separated by a single space), where $0 \\le x, y < N$.\n\n-----Output-----\nThe output contains either CORRECT if the positions of the queens is a solution to the $N$-queens puzzle, and INCORRECT otherwise.\n\nNote that the sample data presented below corresponds to the three boards shows earlier.\n\n-----Examples-----\nSample Input 1:\n8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\nSample Output 1:\nCORRECT\n\nSample Input 2:\n4\n2 3\n1 0\n0 2\n3 1\nSample Output 2:\nCORRECT",
    "public_tests": {
      "input": [
        "8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n",
        "4\n2 3\n1 0\n0 2\n3 1\n"
      ],
      "output": [
        "CORRECT\n",
        "CORRECT\n"
      ]
    },
    "private_tests": {
      "input": [
        "8\n1 5\n6 2\n3 1\n5 0\n4 6\n0 3\n2 7\n7 4\n",
        "4\n2 3\n1 0\n0 2\n3 1\n",
        "4\n2 3\n0 2\n1 0\n2 2\n"
      ],
      "output": [
        "CORRECT\n",
        "CORRECT\n",
        "INCORRECT\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4101,
    "description": "You are given a binary matrix $a$ of size $n \\times m$. A binary matrix is a matrix where each element is either $0$ or $1$.\n\nYou may perform some (possibly zero) operations with this matrix. During each operation you can inverse the row of this matrix or a column of this matrix. Formally, inverting a row is changing all values in this row to the opposite ($0$ to $1$, $1$ to $0$). Inverting a column is changing all values in this column to the opposite.\n\nYour task is to sort the initial matrix by some sequence of such operations. The matrix is considered sorted if the array $[a_{1, 1}, a_{1, 2}, \\dots, a_{1, m}, a_{2, 1}, a_{2, 2}, \\dots, a_{2, m}, \\dots, a_{n, m - 1}, a_{n, m}]$ is sorted in non-descending order.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $m$ ($1 \\le n, m \\le 200$) \u2014 the number of rows and the number of columns in the matrix.\n\nThe next $n$ lines contain $m$ integers each. The $j$-th element in the $i$-th line is $a_{i, j}$ ($0 \\le a_{i, j} \\le 1$) \u2014 the element of $a$ at position $(i, j)$.\n\n\n-----Output-----\n\nIf it is impossible to obtain a sorted matrix, print \"NO\" in the first line.\n\nOtherwise print \"YES\" in the first line. In the second line print a string $r$ of length $n$. The $i$-th character $r_i$ of this string should be '1' if the $i$-th row of the matrix is inverted and '0' otherwise. In the third line print a string $c$ of length $m$. The $j$-th character $c_j$ of this string should be '1' if the $j$-th column of the matrix is inverted and '0' otherwise. If there are multiple answers, you can print any.\n\n\n-----Examples-----\nInput\n2 2\n1 1\n0 1\n\nOutput\nYES\n00\n10\n\nInput\n3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\n\nOutput\nYES\n010\n0000\n\nInput\n3 3\n0 0 0\n1 0 1\n1 1 0\n\nOutput\nNO",
    "public_tests": {
      "input": [
        "2 2\n1 1\n0 1\n",
        "3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\n",
        "3 3\n0 0 0\n1 0 1\n1 1 0\n"
      ],
      "output": [
        "YES\n00\n10\n",
        "YES\n010\n0000\n",
        "NO\n"
      ]
    },
    "private_tests": {
      "input": [
        "2 2\n1 1\n0 1\n",
        "3 4\n0 0 0 1\n0 0 0 0\n1 1 1 1\n",
        "3 3\n0 0 0\n1 0 1\n1 1 0\n",
        "4 5\n0 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n",
        "2 2\n0 1\n1 1\n",
        "1 1\n0\n",
        "1 2\n0 1\n",
        "1 2\n0 0\n",
        "1 3\n0 1 1\n",
        "1 3\n1 0 1\n",
        "2 1\n0\n1\n",
        "2 1\n1\n1\n",
        "2 1\n0\n0\n",
        "2 2\n1 0\n1 0\n",
        "2 2\n0 1\n0 0\n",
        "2 2\n0 0\n0 0\n",
        "2 2\n1 1\n1 0\n",
        "2 2\n1 1\n1 1\n",
        "2 3\n0 1 0\n0 1 0\n",
        "2 3\n0 0 1\n0 1 0\n",
        "2 3\n0 1 0\n0 1 1\n",
        "2 3\n0 1 0\n1 0 1\n",
        "2 3\n1 0 1\n1 1 0\n",
        "2 3\n1 0 0\n0 1 0\n",
        "2 3\n1 1 0\n1 1 0\n"
      ],
      "output": [
        "YES\n00\n10\n",
        "YES\n010\n0000\n",
        "NO\n",
        "YES\n0000\n00000\n",
        "YES\n00\n00\n",
        "YES\n0\n1\n",
        "YES\n0\n10\n",
        "YES\n0\n11\n",
        "YES\n0\n100\n",
        "YES\n0\n010\n",
        "YES\n01\n1\n",
        "YES\n00\n0\n",
        "YES\n00\n1\n",
        "YES\n00\n01\n",
        "YES\n01\n00\n",
        "YES\n00\n11\n",
        "YES\n01\n10\n",
        "YES\n00\n00\n",
        "YES\n00\n101\n",
        "YES\n01\n010\n",
        "YES\n01\n011\n",
        "YES\n01\n101\n",
        "YES\n01\n110\n",
        "YES\n00\n101\n",
        "YES\n00\n001\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 4846,
    "description": "The impossible has happened. Bear G. has fallen into his own trap. Lured by a delicious box of Doma\u0107ica, without even thinking, he rushed and fell into his trap. In order to get out of the trap, he must solve the following task with your help. You are given three integers $L$, $D$ and $X$.\n - determine the minimal integer $N$ such that $L \\leq N \\leq D$ and the sum of its digits is $X$\n - determine the maximal integer $M$ such that $L \\leq M \\leq D$ and the sum of its digits is $X$\n\nBear will be able to escape from the trap if he correctly determines numbers $N$ and $M$. The numbers $N$ and $M$ will always exist.\n\n-----Input-----\nThe first line of input contains the integer $L$ ($1 \\leq L \\leq 10000$), the number from the task. The second line of input contains the integer $D$ ($1 \\leq D \\leq 10000$, $L \\leq D$), the number from the task. The third line of input contains the integer $X$ ($1 \\leq X \\leq 36$), the number from the task.\n\n-----Output-----\nThe first line of output must contain the integer $N$ from the task. The second line of output must contain the integer $M$ from the task.\n\n-----Examples-----\nSample Input 1:\n1\n100\n4\nSample Output 1:\n4\n40\n\nSample Input 2:\n100\n500\n12\nSample Output 2:\n129\n480",
    "public_tests": {
      "input": [
        "1\n100\n4\n",
        "100\n500\n12\n"
      ],
      "output": [
        "4\n40\n",
        "129\n480\n"
      ]
    },
    "private_tests": {
      "input": [
        "1\n100\n4\n",
        "100\n500\n12\n",
        "1\n10000\n1\n"
      ],
      "output": [
        "4\n40\n",
        "129\n480\n",
        "1\n10000\n"
      ]
    },
    "difficulty": "introductory"
  },
  {
    "name": 3069,
    "description": "A bracket sequence consisting of \u2018(\u2019 and \u2018)\u2019 is defined to be valid as follows: \n - An empty sequence is valid.\n - If $X$ is a valid bracket sequence, then $(X)$ is a valid bracket sequence.\n - If $X$ and $Y$ are valid bracket sequences, then the concatenation of $X$ and $Y$, $Z=XY$, is a valid bracket sequence.\n\nFor example, \u201c(())\u201d, \u201c()()\u201d, and \u201c(()())()\u201d are all valid bracket sequences, while \u201c(\u201d and \u201c())\u201d are invalid bracket sequences.\n\nYou get a bracket sequence from the professor of length $n$. However, it might not be valid at the moment. The professor asks you to check if it is possible to make the sequence valid by performing at most one segment inversion operation. That is, you may choose two 1-based indices $l$ and $r$ ($1~ \\leq ~ l~ \\leq ~ r~ \\leq ~ n$) and invert each bracket with an index in the closed interval $[l,r]$. After the inversion, a left bracket \u2018(\u2019 becomes a right bracket \u2018)\u2019, and a right bracket \u2018)\u2019 becomes a left bracket \u2018(\u2019.\n\nYou can make \u201c())(\u201d valid by inverting the segment $[3,4]$. You can make \u201c()))\u201d valid by inverting the segment $[3,3]$, or alternatively by inverting the segment $[2,2]$. However, there does not exist a segment you can invert to make \u201c)))(\u201d valid.\n\n-----Input-----\nThe input consists of one line containing between $1$ and $5000$ brackets.\n\n-----Output-----\nOutput \u201cpossible\u201d if you can make the bracket sequence valid by performing at most one segment inversion, or \u201cimpossible\u201d otherwise.\n\n-----Examples-----\nSample Input 1:\n()))\nSample Output 1:\npossible\n\nSample Input 2:\n)))(\nSample Output 2:\nimpossible",
    "public_tests": {
      "input": [
        "()))\n",
        ")))(\n"
      ],
      "output": [
        "possible\n",
        "impossible\n"
      ]
    },
    "private_tests": {
      "input": [
        "()))\n",
        ")))(\n",
        "()\n"
      ],
      "output": [
        "possible\n",
        "impossible\n",
        "possible\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3103,
    "description": "Lysias loves his full-rigged ship and takes it out to his island castle as often as possible. On his way back to the castle one day, the engines capable of turning the sails failed. As it is a full-rigged ship, he and his crew are now unable to turn the sails in any direction.\n\nBut, as luck would have it, there is a south wind which is blowing them in the right direction\u2026at least approximately. Since they may not get to the castle by wind only, Lysias believes he can use the ocean\u2019s currents to move the ship either east or west temporarily by retracting and lowering the ship\u2019s sails. In that way, the ship can move in two potential directions:\n - Move north by lowering the sails\n - Retract the sails and move in the direction of the current they\u2019re on top of (east/west)\n\nLysias has dug up an old map of all the currents in this part of the ocean. As he is fond of mathematics, not only does Lysias wonder if it\u2019s possible to get home without fixing the sails; he also wonders how many different routes they can take to get home. Can you help him?\n\n-----Input-----\nThe first line has three integers: $Y$ and $X$ and $x_{init}$, representing the number of rows and columns of the map, and which column the ship is currently placed at. The ship always starts on the bottom row.\n\nThen follow $Y$ rows, each with $X$ characters each. All characters $C_{x,y}$ is one of \u2018~\u2019, \u2018#\u2019, \u2018@\u2019, \u2018>\u2019 and \u2018<\u2019. \u2019~\u2019 represents open sea without any currents, \u2018#\u2019 is impassable shallow waters, and \u2018>\u2019 and \u2018<\u2019 are currents moving the boat to the right and left respectively. \u2018@\u2019 represents Lysias\u2019 castle.\n\n-----Output-----\nOutput all the different distinct paths the ship could take to get back to the castle. Since there may be very many different ways to get back, output the answer modulo $1000003$.\n\nIf there are no ways to get to the castle, output \u201cbegin repairs\u201d.\n\n-----Limits-----\n - $0 < Y \\leq 300$\n - $0 \\leq x_{init} < X \\leq 50000$\n - If $C_{x,y} = \\text {\u2018>\u2019}$, then $x+1 < X$ and $C_{x+1,y} \\notin \\{ \\text {\u2018<\u2019}, \\verb|`#'|\\} $\n - If $C_{x,y} = \\text {\u2018<\u2019}$, then $0 \\leq x-1$ and $C_{x-1,y} \\notin \\{ \\text {\u2018>\u2019}, \\verb|`#'|\\} $\n - There is exactly one \u2018@\u2019 tile on the map\n - The boat will not start on a `#' tile\n\n-----Examples-----\nSample Input 1:\n2 2 0\n>@\n>~\nSample Output 1:\n2\n\nSample Input 2:\n3 5 1\n>>@<<\n>~#~<\n>>>>~\nSample Output 2:\n4",
    "public_tests": {
      "input": [
        "2 2 0\n>@\n>~\n",
        "3 5 1\n>>@<<\n>~#~<\n>>>>~\n"
      ],
      "output": [
        "2\n",
        "4\n"
      ]
    },
    "private_tests": {
      "input": [
        "2 2 0\n>@\n>~\n",
        "3 5 1\n>>@<<\n>~#~<\n>>>>~\n",
        "3 4 0\n>~@~\n~<#~\n>>>~\n"
      ],
      "output": [
        "2\n",
        "4\n",
        "begin repairs\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3886,
    "description": "What are you doing at the end of the world? Are you busy? Will you save us?\n\n\n\n[Image]\n\nNephren is playing a game with little leprechauns.\n\nShe gives them an infinite array of strings, f_{0... \u221e}.\n\nf_0 is \"What are you doing at the end of the world? Are you busy? Will you save us?\".\n\nShe wants to let more people know about it, so she defines f_{i} =  \"What are you doing while sending \"f_{i} - 1\"? Are you busy? Will you send \"f_{i} - 1\"?\" for all i \u2265 1.\n\nFor example, f_1 is\n\n\"What are you doing while sending \"What are you doing at the end of the world? Are you busy? Will you save us?\"? Are you busy? Will you send \"What are you doing at the end of the world? Are you busy? Will you save us?\"?\". Note that the quotes in the very beginning and in the very end are for clarity and are not a part of f_1.\n\nIt can be seen that the characters in f_{i} are letters, question marks, (possibly) quotation marks and spaces.\n\nNephren will ask the little leprechauns q times. Each time she will let them find the k-th character of f_{n}. The characters are indexed starting from 1. If f_{n} consists of less than k characters, output '.' (without quotes).\n\nCan you answer her queries?\n\n\n-----Input-----\n\nThe first line contains one integer q (1 \u2264 q \u2264 10)\u00a0\u2014 the number of Nephren's questions.\n\nEach of the next q lines describes Nephren's question and contains two integers n and k (0 \u2264 n \u2264 10^5, 1 \u2264 k \u2264 10^18).\n\n\n-----Output-----\n\nOne line containing q characters. The i-th character in it should be the answer for the i-th query.\n\n\n-----Examples-----\nInput\n3\n1 1\n1 2\n1 111111111111\n\nOutput\nWh.\nInput\n5\n0 69\n1 194\n1 139\n0 47\n1 66\n\nOutput\nabdef\nInput\n10\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n\nOutput\nAreyoubusy\n\n\n-----Note-----\n\nFor the first two examples, refer to f_0 and f_1 given in the legend.",
    "public_tests": {
      "input": [
        "3\n1 1\n1 2\n1 111111111111\n",
        "5\n0 69\n1 194\n1 139\n0 47\n1 66\n",
        "10\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n"
      ],
      "output": [
        "Wh.",
        "abdef",
        "Areyoubusy"
      ]
    },
    "private_tests": {
      "input": [
        "3\n1 1\n1 2\n1 111111111111\n",
        "5\n0 69\n1 194\n1 139\n0 47\n1 66\n",
        "10\n4 1825\n3 75\n3 530\n4 1829\n4 1651\n3 187\n4 584\n4 255\n4 774\n2 474\n",
        "1\n0 1\n",
        "1\n999 1000000000000000000\n",
        "10\n1 8\n1 8\n9 5\n0 1\n8 1\n7 3\n5 2\n0 9\n4 6\n9 4\n",
        "10\n72939 670999605706502447\n67498 428341803949410086\n62539 938370976591475035\n58889 657471364021290792\n11809 145226347556228466\n77111 294430864855433173\n29099 912050147755964704\n27793 196249143894732547\n118 154392540400153863\n62843 63234003203996349\n",
        "10\n74 752400948436334811\n22 75900251524550494\n48 106700456127359025\n20 623493261724933249\n90 642991963097110817\n42 47750435275360941\n24 297055789449373682\n65 514620361483452045\n99 833434466044716497\n0 928523848526511085\n",
        "10\n26302 2898997\n2168 31686909\n56241 27404733\n9550 44513376\n70116 90169838\n14419 95334944\n61553 16593205\n85883 42147334\n55209 74676056\n57866 68603505\n",
        "9\n50 161003686678495163\n50 161003686678495164\n50 161003686678495165\n51 322007373356990395\n51 322007373356990396\n51 322007373356990397\n52 644014746713980859\n52 644014746713980860\n52 644014746713980861\n",
        "10\n100000 1000000000000000000\n99999 999999999999998683\n99998 999999999999997366\n99997 999999999999996049\n99996 999999999999994732\n99995 999999999999993415\n99994 999999999999992098\n99993 999999999999990781\n99992 999999999999989464\n99991 999999999999988147\n",
        "10\n94455 839022536766957828\n98640 878267599238035211\n90388 54356607570140506\n93536 261222577013066170\n91362 421089574363407592\n95907 561235487589345620\n91888 938806156011561508\n90820 141726323964466814\n97856 461989202234320135\n92518 602709074380260370\n",
        "10\n100000 873326525630182716\n100000 620513733919162415\n100000 482953375281256917\n100000 485328193417229962\n100000 353549227094721271\n100000 367447590857326107\n100000 627193846053528323\n100000 243833127760837417\n100000 287297493528203749\n100000 70867563577617188\n",
        "10\n1 1\n1 34\n1 35\n1 109\n1 110\n1 141\n1 142\n1 216\n1 217\n1 218\n",
        "10\n5 1\n5 34\n5 35\n5 2254\n5 2255\n5 2286\n5 2287\n5 4506\n5 4507\n5 4508\n",
        "10\n10 1\n10 34\n10 35\n10 73182\n10 73183\n10 73214\n10 73215\n10 146362\n10 146363\n10 146364\n",
        "10\n15 1\n15 34\n15 35\n15 2342878\n15 2342879\n15 2342910\n15 2342911\n15 4685754\n15 4685755\n15 4685756\n",
        "10\n35 1\n35 34\n35 35\n35 2456721293278\n35 2456721293279\n35 2456721293310\n35 2456721293311\n35 4913442586554\n35 4913442586555\n35 4913442586556\n",
        "10\n47 1\n47 34\n47 35\n47 10062730417405918\n47 10062730417405919\n47 10062730417405950\n47 10062730417405951\n47 20125460834811834\n47 20125460834811835\n47 20125460834811836\n",
        "10\n50 1\n50 34\n50 35\n50 80501843339247582\n50 80501843339247583\n50 80501843339247614\n50 80501843339247615\n50 161003686678495162\n50 161003686678495163\n50 161003686678495164\n",
        "10\n52 1\n52 34\n52 35\n52 322007373356990430\n52 322007373356990431\n52 322007373356990462\n52 322007373356990463\n52 644014746713980858\n52 644014746713980859\n52 644014746713980860\n",
        "10\n54986 859285936548585889\n49540 198101079999865795\n96121 658386311981208488\n27027 787731514451843966\n60674 736617460878411577\n57761 569094390437687993\n93877 230086639196124716\n75612 765187050118682698\n75690 960915623784157529\n1788 121643460920471434\n",
        "10\n13599 295514896417102030\n70868 206213281730527977\n99964 675362501525687265\n8545 202563221795027954\n62885 775051601455683055\n44196 552672589494215033\n38017 996305706075726957\n82157 778541544539864990\n13148 755735956771594947\n66133 739544460375378867\n",
        "10\n23519 731743847695683578\n67849 214325487756157455\n39048 468966654215390234\n30476 617394929138211942\n40748 813485737737987237\n30632 759622821110550585\n30851 539152740395520686\n23942 567423516617312907\n93605 75958684925842506\n24977 610678262374451619\n",
        "10\n66613 890998077399614704\n59059 389024292752123693\n10265 813853582068134597\n71434 128404685079108014\n76180 582880920044162144\n1123 411409570241705915\n9032 611954441092300071\n78951 57503725302368508\n32102 824738435154619172\n44951 53991552354407935\n",
        "10\n96988 938722606709261427\n97034 794402579184858837\n96440 476737696947281053\n96913 651380108479508367\n99570 535723325634376015\n97425 180427887538234591\n97817 142113098762476646\n96432 446510004868669235\n98788 476529766139390976\n96231 263034481360542586\n",
        "10\n99440 374951566577777567\n98662 802514785210488315\n97117 493713886491759829\n97252 66211820117659651\n98298 574157457621712902\n99067 164006086594761631\n99577 684960128787303079\n96999 12019940091341344\n97772 796752494293638534\n96958 134168283359615339\n",
        "10\n95365 811180517856359115\n97710 810626986941150496\n98426 510690080331205902\n99117 481043523165876343\n95501 612591593904017084\n96340 370956318211097183\n96335 451179199961872617\n95409 800901907873821965\n97650 893603181298142989\n96159 781930052798879580\n",
        "10\n96759 970434747560290241\n95684 985325796232084031\n99418 855577012478917561\n98767 992053283401739711\n99232 381986776210191990\n97804 22743067342252513\n95150 523980900658652001\n98478 290982116558877566\n98012 642382931526919655\n96374 448615375338644407\n",
        "10\n27314 39\n71465 12\n29327 53\n33250 85\n52608 41\n19454 55\n72760 12\n83873 90\n67859 78\n91505 73\n",
        "10\n76311 57\n79978 83\n34607 89\n62441 98\n28700 35\n54426 67\n66596 15\n30889 21\n68793 7\n29916 71\n"
      ],
      "output": [
        "Wh.",
        "abdef",
        "Areyoubusy",
        "W",
        "?",
        "ee WWah at",
        "?usaglrnyh",
        "h... .. d.",
        "donts ly o",
        "\"?.\"?.\"?.",
        "o u lugW? ",
        "youni iiee",
        "o  W  rlot",
        "W\"W?\"\"W?\"?",
        "W\"W?\"\"W?\"?",
        "W\"W?\"\"W?\"?",
        "W\"W?\"\"W?\"?",
        "W\"W?\"\"W?\"?",
        "W\"W?\"\"W?\"?",
        "W\"W?\"\"W?\"?",
        "W\"W?\"\"W?\"?",
        "oru A\" de\"",
        "t?W y  wnr",
        "WonreeuhAn",
        "i  oio u? ",
        "eunWwdtnA ",
        "idrd? o nl",
        "oisv\"sb ta",
        " e\"atdW? e",
        " u nrhuiy ",
        "lohiW ohra"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3233,
    "description": "Brandon Greg Jr. considers an array to be scary if its leftmost element is the median of its elements. Given an array with distinct elements $[p_1, p_2, \\ldots , p_ n]$, Brandon wants to count the number of scary subarrays.\n\nA subarray is some contiguous chunk of elements $[p_ l, p_{l+1}, \\ldots , p_ r]$ where $l\\le r$. The median of a set of $n$ numbers is the middle number in sorted order if $n$ is odd, or the average of the middle two numbers in sorted order if $n$ is even. Note that all subarrays of length $1$ are scary, and no even-length subarrays are scary because the elements are all distinct.\n\n-----Input-----\nThe first line of input contains a single integer $n$ ($1\\le n\\le 2\\cdot 10^5$), representing the length of the given array.\n\nThe second line of input contains $n$ space-separated integers $p_ i$ ($1\\le p_ i\\le n$), representing the given array. It is guaranteed that the $p_ i$\u2019s are distinct.\n\n-----Output-----\nOutput one integer representing the number of scary subarrays.\n\n-----Examples-----\nSample Input 1:\n5\n1 2 3 4 5\nSample Output 1:\n5\n\nSample Input 2:\n6\n3 2 1 6 4 5\nSample Output 2:\n8",
    "public_tests": {
      "input": [
        "5\n1 2 3 4 5\n",
        "6\n3 2 1 6 4 5\n"
      ],
      "output": [
        "5\n",
        "8\n"
      ]
    },
    "private_tests": {
      "input": [
        "5\n1 2 3 4 5\n",
        "6\n3 2 1 6 4 5\n",
        "7\n2 1 5 3 6 7 4\n"
      ],
      "output": [
        "5\n",
        "8\n",
        "11\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3796,
    "description": "You are given $n$ integers. You need to choose a subset and put the chosen numbers in a beautiful rectangle (rectangular matrix). Each chosen number should occupy one of its rectangle cells, each cell must be filled with exactly one chosen number. Some of the $n$ numbers may not be chosen.\n\nA rectangle (rectangular matrix) is called beautiful if in each row and in each column all values are different.\n\nWhat is the largest (by the total number of cells) beautiful rectangle you can construct? Print the rectangle itself.\n\n\n-----Input-----\n\nThe first line contains $n$ ($1 \\le n \\le 4\\cdot10^5$). The second line contains $n$ integers ($1 \\le a_i \\le 10^9$).\n\n\n-----Output-----\n\nIn the first line print $x$ ($1 \\le x \\le n$) \u2014 the total number of cells of the required maximum beautiful rectangle. In the second line print $p$ and $q$ ($p \\cdot q=x$): its sizes. In the next $p$ lines print the required rectangle itself. If there are several answers, print any.\n\n\n-----Examples-----\nInput\n12\n3 1 4 1 5 9 2 6 5 3 5 8\n\nOutput\n12\n3 4\n1 2 3 5\n3 1 5 4\n5 6 8 9\n\nInput\n5\n1 1 1 1 1\n\nOutput\n1\n1 1\n1",
    "public_tests": {
      "input": [
        "12\n3 1 4 1 5 9 2 6 5 3 5 8\n",
        "5\n1 1 1 1 1\n"
      ],
      "output": [
        "12\n3 4\n1 2 3 5\n3 1 5 4\n5 6 8 9\n",
        "1\n1 1\n1\n"
      ]
    },
    "private_tests": {
      "input": [
        "12\n3 1 4 1 5 9 2 6 5 3 5 8\n",
        "5\n1 1 1 1 1\n",
        "1\n1000000000\n",
        "1\n1\n",
        "2\n1 2\n",
        "2\n1000000000 1000000000\n",
        "3\n1 2 3\n",
        "3\n1 2 2\n",
        "3\n1 1 1\n",
        "4\n1 2 3 4\n",
        "4\n1 2 3 3\n",
        "4\n1 1 2 2\n",
        "4\n1 1 1 4\n",
        "5\n5 3 5 6 3\n",
        "5\n1 2 1 1 1\n",
        "5\n1 5 5 4 2\n",
        "6\n3 3 3 3 3 3\n",
        "6\n3 6 7 4 3 5\n",
        "6\n7 8 6 8 9 8\n",
        "7\n8 5 10 4 10 8 3\n",
        "7\n2 1 3 3 2 3 3\n",
        "7\n3 2 3 3 2 3 3\n",
        "8\n2 1 2 4 3 4 2 2\n",
        "8\n11 7 10 10 11 10 12 11\n",
        "8\n6 12 9 9 6 12 9 10\n",
        "9\n4 9 5 9 6 8 9 8 7\n",
        "9\n2 7 2 2 7 1 6 1 9\n",
        "9\n3 1 4 3 4 4 2 3 2\n",
        "10\n15 9 9 13 13 15 10 15 12 5\n",
        "10\n8 9 9 6 5 8 5 8 9 3\n",
        "10\n7 3 7 8 4 8 10 7 5 10\n",
        "11\n4 4 5 5 5 3 5 5 5 3 2\n",
        "11\n18 16 21 21 12 17 16 21 20 21 20\n",
        "11\n19 22 18 22 21 21 19 13 21 21 16\n",
        "12\n10 15 17 14 14 15 17 17 13 13 16 18\n",
        "12\n5 1 6 1 4 1 5 1 2 3 8 3\n",
        "12\n1 2 5 1 1 5 1 3 4 5 2 3\n",
        "13\n15 25 25 26 17 18 22 18 18 23 22 25 21\n",
        "13\n16 18 5 17 11 12 4 11 3 16 17 2 3\n",
        "13\n8 4 14 8 13 14 10 3 4 9 6 14 3\n",
        "14\n1 1 4 8 10 4 6 1 4 8 4 2 14 12\n",
        "14\n7 7 6 7 6 5 7 6 6 6 6 7 4 5\n",
        "14\n1 1 1 1 1 2 2 1 3 1 2 1 2 1\n",
        "15\n9 13 29 10 17 15 21 7 7 7 13 4 5 16 2\n",
        "15\n17 5 20 11 14 9 5 12 5 11 5 14 1 12 18\n",
        "15\n6 7 11 8 13 11 4 20 17 12 9 15 18 13 9\n",
        "4\n1 1 1 1\n"
      ],
      "output": [
        "12\n3 4\n5 1 3 6\n8 5 1 3\n4 9 5 2\n",
        "1\n1 1\n1\n",
        "1\n1 1\n1000000000\n",
        "1\n1 1\n1\n",
        "2\n1 2\n1 2\n",
        "1\n1 1\n1000000000\n",
        "3\n1 3\n1 2 3\n",
        "2\n1 2\n1 2\n",
        "1\n1 1\n1\n",
        "4\n1 4\n1 2 3 4\n",
        "4\n2 2\n3 1\n2 3\n",
        "4\n2 2\n1 2\n2 1\n",
        "2\n1 2\n1 4\n",
        "4\n2 2\n3 5\n5 3\n",
        "2\n1 2\n1 2\n",
        "4\n1 4\n1 2 4 5\n",
        "1\n1 1\n3\n",
        "6\n2 3\n3 4 6\n7 3 5\n",
        "4\n1 4\n6 7 8 9\n",
        "6\n2 3\n8 10 3\n4 8 10\n",
        "4\n2 2\n2 3\n3 2\n",
        "4\n2 2\n2 3\n3 2\n",
        "6\n2 3\n2 4 1\n3 2 4\n",
        "6\n2 3\n10 11 7\n12 10 11\n",
        "6\n2 3\n6 9 12\n12 6 9\n",
        "9\n3 3\n9 4 7\n8 9 5\n6 8 9\n",
        "9\n3 3\n2 1 7\n7 2 1\n6 9 2\n",
        "9\n3 3\n3 4 1\n2 3 4\n4 2 3\n",
        "9\n3 3\n15 5 10\n12 15 9\n9 13 15\n",
        "9\n3 3\n8 9 3\n5 8 9\n9 5 8\n",
        "9\n3 3\n7 3 8\n8 7 4\n5 10 7\n",
        "6\n2 3\n3 4 5\n5 3 4\n",
        "9\n3 3\n21 12 17\n18 21 16\n16 20 21\n",
        "9\n3 3\n21 13 19\n19 21 16\n18 22 21\n",
        "12\n3 4\n17 10 14 15\n16 17 13 14\n15 18 17 13\n",
        "10\n2 5\n1 3 5 2 6\n8 1 3 5 4\n",
        "9\n3 3\n1 5 2\n2 1 5\n5 3 1\n",
        "12\n3 4\n18 25 15 22\n22 18 25 17\n21 23 18 25\n",
        "12\n2 6\n3 11 16 17 2 5\n12 3 11 16 17 4\n",
        "12\n2 6\n3 4 8 14 6 10\n13 3 4 8 14 9\n",
        "12\n3 4\n1 4 2 8\n10 1 4 6\n8 12 1 4\n",
        "9\n3 3\n6 7 4\n5 6 7\n7 5 6\n",
        "4\n2 2\n1 2\n2 1\n",
        "15\n3 5\n7 2 13 17 9\n10 7 4 15 21\n29 13 7 5 16\n",
        "12\n2 6\n5 11 12 14 1 17\n18 5 11 12 14 9\n",
        "15\n3 5\n4 11 17 8 13\n13 6 11 18 9\n9 15 7 12 20\n",
        "1\n1 1\n1\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3897,
    "description": "You are given an integer m as a product of integers a_1, a_2, ... a_{n} $(m = \\prod_{i = 1}^{n} a_{i})$. Your task is to find the number of distinct decompositions of number m into the product of n ordered positive integers.\n\nDecomposition into n products, given in the input, must also be considered in the answer. As the answer can be very large, print it modulo 1000000007 (10^9 + 7).\n\n\n-----Input-----\n\nThe first line contains positive integer n (1 \u2264 n \u2264 500). The second line contains space-separated integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nIn a single line print a single number k \u2014 the number of distinct decompositions of number m into n ordered multipliers modulo 1000000007 (10^9 + 7).\n\n\n-----Examples-----\nInput\n1\n15\n\nOutput\n1\n\nInput\n3\n1 1 2\n\nOutput\n3\n\nInput\n2\n5 7\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the second sample, the get a decomposition of number 2, you need any one number out of three to equal 2, and the rest to equal 1.\n\nIn the third sample, the possible ways of decomposing into ordered multipliers are [7,5], [5,7], [1,35], [35,1].\n\nA decomposition of positive integer m into n ordered multipliers is a cortege of positive integers b = {b_1, b_2, ... b_{n}} such that $m = \\prod_{i = 1}^{n} b_{i}$. Two decompositions b and c are considered different, if there exists index i such that b_{i} \u2260 c_{i}.",
    "public_tests": {
      "input": [
        "1\n15\n",
        "3\n1 1 2\n",
        "2\n5 7\n"
      ],
      "output": [
        "1\n",
        "3\n",
        "4\n"
      ]
    },
    "private_tests": {
      "input": [
        "1\n15\n",
        "3\n1 1 2\n",
        "2\n5 7\n",
        "2\n5 10\n",
        "3\n1 30 1\n",
        "2\n1000000000 1000000000\n",
        "1\n1\n",
        "3\n1 1 1\n",
        "2\n1 2\n",
        "2\n1 6\n",
        "3\n8 10 8\n",
        "5\n14 67 15 28 21\n",
        "8\n836 13 77 218 743 530 404 741\n",
        "10\n6295 3400 4042 2769 3673 264 5932 4977 1776 5637\n",
        "23\n77 12 25 7 44 75 80 92 49 77 56 93 59 45 45 39 86 83 99 91 4 70 83\n",
        "1\n111546435\n",
        "7\n111546435 58642669 600662303 167375713 371700317 33984931 89809099\n",
        "19\n371700317 12112039 167375713 7262011 21093827 89809099 600662303 18181979 9363547 30857731 58642669 111546435 645328247 5605027 38706809 14457349 25456133 44227723 33984931\n",
        "1\n536870912\n",
        "2\n536870912 387420489\n",
        "10\n214358881 536870912 815730721 387420489 893871739 244140625 282475249 594823321 148035889 410338673\n",
        "5\n387420489 536870912 536870912 536870912 387420489\n",
        "5\n387420489 244140625 387420489 387420489 1\n",
        "10\n2097152 67108864 65536 262144 262144 131072 8388608 536870912 65536 2097152\n",
        "10\n237254761 1 817430153 1 1 1 1 1 90679621 1\n",
        "20\n16777216 1048576 524288 8192 8192 524288 2097152 8388608 1048576 67108864 16777216 1048576 4096 8388608 134217728 67108864 1048576 536870912 67108864 67108864\n",
        "50\n675 25000 2025 50 450 31250 3750 225 1350 250 72 187500 12000 281250 187500 30000 45000 90000 90 1200 9000 56250 5760 270000 3125 3796875 2250 101250 40 2500 175781250 1250000 45000 2250 3000 31250 46875 135000 421875000 36000 360 140625000 13500 1406250 1125 250 75000 62500 150 6\n",
        "2\n999983 999983\n",
        "3\n1 1 39989\n"
      ],
      "output": [
        "1\n",
        "3\n",
        "4\n",
        "6\n",
        "27\n",
        "361\n",
        "1\n",
        "1\n",
        "2\n",
        "4\n",
        "108\n",
        "459375\n",
        "544714485\n",
        "928377494\n",
        "247701073\n",
        "1\n",
        "25706464\n",
        "376284721\n",
        "1\n",
        "570\n",
        "547239398\n",
        "255309592\n",
        "772171400\n",
        "176451954\n",
        "1000\n",
        "985054761\n",
        "18983788\n",
        "3\n",
        "3\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3059,
    "description": "A speedrun is a playthrough of a game with the intention to complete it as quickly as possible. When speedrunning, you usually follow a pre-planned path through the game. Along this path, there may be some places where you have to pull off a difficult technique, or trick, which may cause a delay if you fail to pull it off successfully. Luckily you can reset the game at any time: if you have made a few mistakes, you can start a new run, losing your progress but instantaneously starting over with a clean slate. You can do this as often as you like.\n\nThe game you are currently speedrunning has a record of $r$ seconds, which you intend to beat. You have discovered a path through the game that, in the best case, takes $n < r$ seconds. There are some tricks along the way, though: you know exactly where along the run they occur, what the probability is that you will pull them off successfully, and how many seconds you have to spend to recover if they fail.\n\nGiven this data, you want to find the optimal strategy for when to reset the game to minimise the expected time to set a new record. Write a program to determine what this smallest possible expected time is.\n\n-----Input-----\nThe input consists of:\n - One line with three integers $n$, $r$ and $m$ ($2 \\leq n < r \\leq 5000$, $1 \\le m \\le 50$), where $n$ and $r$ are as described above and $m$ is the number of tricks.\n - $m$ lines, each containing three numbers describing a trick:\n - An integer $t$ ($1 \\le t < n$), the time in the route (assuming no failed tricks before) at which the trick occurs,\n - a real number $p$ ($0 < p < 1$ and $p$ has at most $6$ digits after the decimal point), the probability that the trick succeeds, and\n - an integer $d$ ($1 \\le d \\le 1000$), the number of seconds required to recover in case the trick fails.\n\nThe tricks are given in sorted order by $t$, and no two tricks occur at the same time $t$ in the route.\n\nYou may assume that, without resetting, a single playthrough has a probability of at least $1$ in $50000$ to succeed at improving the record.\n\n-----Output-----\nOutput the expected time you will have to play the game to set a new record, assuming an optimal strategy is used. Your answer should have an absolute or relative error of at most $10^{-6}$.Explanation of Sample Input 1\n\nThe record for this game is $111$ seconds, and your route takes $100$ seconds if everything goes right.\n\nAfter playing for $20$ seconds, there is a trick with a $50\\% $ success rate. If it succeeds, you keep playing. If it fails, you incur a $10$ second time loss: now the run will take at least $110$ seconds. It is still possible to set a record, but every other trick in the run has to be successful. It turns out to be faster on average to reset after failing the first trick.\n\nThus you repeat the first $20$ seconds of the game until the trick is successful: with probability $1/2$, it takes $1$ attempt; with probability $1/4$, it takes $2$ attempts; and so on. On average, you spend $40$ seconds on the first $20$ seconds of the route.\n\nOnce you have successfully performed the first trick, you want to finish the run no matter the result of the other tricks: it takes $80$ seconds, plus on average $1$ second loss from each of the remaining $4$ tricks. So the expected time until you set a record is $124$ seconds.\n\n-----Examples-----\nSample Input 1:\n100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\nSample Output 1:\n124\n\nSample Input 2:\n2 4 1\n1 0.5 5\nSample Output 2:\n3\n\nSample Input 3:\n10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\nSample Output 3:\n18.9029850746",
    "public_tests": {
      "input": [
        "100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n",
        "2 4 1\n1 0.5 5\n",
        "10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n"
      ],
      "output": [
        "124\n",
        "3\n",
        "18.9029850746\n"
      ]
    },
    "private_tests": {
      "input": [
        "100 111 5\n20 0.5 10\n80 0.5 2\n85 0.5 2\n90 0.5 2\n95 0.5 2\n",
        "2 4 1\n1 0.5 5\n",
        "10 20 3\n5 0.3 8\n6 0.8 3\n8 0.9 3\n",
        "10 50 1\n5 0.5 30\n"
      ],
      "output": [
        "124\n",
        "3\n",
        "18.9029850746\n",
        "15\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3092,
    "description": "A road network in a country consists of $N$ cities and $M$ one-way roads. The cities are numbered $1$ through $N$. For each road we know the origin and destination cities, as well as its length.\n\nWe say that the road $F$ is a continuation of road $E$ if the destination city of road $E$ is the same as the origin city of road $F$. A path from city $A$ to city $B$ is a sequence of road such that origin of the first road is city $A$, each other road is a continuation of the one before it, and the destination of the last road is city $B$. The length of the path is the sum of lengths of all roads in it.\n\nA path from $A$ to $B$ is a shortest path if there is no other path from $A$ to $B$ that is shorter in length.\n\nYour task is to, for each road, output how many different shortest paths contain that road, modulo $1000000007$.\n\n-----Input-----\nThe first line contains two integers $N$ and $M$ $(1 \\le N \\le 1500, 1 \\le M \\le 5000)$, the number of cities and roads.\n\nEach of the following $M$ lines contains three positive integers $O$, $D$ and $L$. These represent a one-way road from city $O$ to city $D$ of length $L$. The numbers $O$ and $D$ will be different and $L$ will be at most $10000$.\n\n-----Output-----\nOutput $M$ integers each on its own line \u2013 for each road, the number of different shortest paths containing it, modulo $1000000007$. The order of these numbers should match the order of roads in the input.\n\n-----Examples-----\nSample Input 1:\n4 3\n1 2 5\n2 3 5\n3 4 5\nSample Output 1:\n3\n4\n3\n\nSample Input 2:\n4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8\nSample Output 2:\n2\n3\n2\n1",
    "public_tests": {
      "input": [
        "4 3\n1 2 5\n2 3 5\n3 4 5\n",
        "4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n"
      ],
      "output": [
        "3\n4\n3\n",
        "2\n3\n2\n1\n"
      ]
    },
    "private_tests": {
      "input": [
        "4 3\n1 2 5\n2 3 5\n3 4 5\n",
        "4 4\n1 2 5\n2 3 5\n3 4 5\n1 4 8\n",
        "5 8\n1 2 20\n1 3 2\n2 3 2\n4 2 3\n4 2 3\n3 4 5\n4 3 5\n5 4 20\n"
      ],
      "output": [
        "3\n4\n3\n",
        "2\n3\n2\n1\n",
        "0\n4\n6\n6\n6\n7\n2\n6\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3310,
    "description": "After finding a suitable residence in the Swiss Alps, Robin thought he finally had what it takes to be happy. But every day he woke up feeling that something was missing. Maybe it was the lack of English food in these parts? Spotting a market opportunity and solving his problem at the same time, he teamed up with the famous English chef Jim to open a restaurant nearby. While he has no doubts about Jim\u2019s talents as a chef, Robin wants to be sure that opening an English restaurant in the Swiss Alps is a good idea.\n\nFortunately, as a local, he knows the habits of restaurant customers. At the stroke of each hour, a group of people arrives of size that is uniformly random between $1$ and $g$ people (inclusive). The group finds the smallest completely unoccupied table that fits the group and occupies it. If they can not find such a table, the group leaves with great disappointment. Once seated, a group never leaves until the restaurant closes, as Jim has no difficulty keeping the guests entertained.\n\nAs an example, suppose the restaurant has $3$ tables of capacities $5$, $8$ and $9$. If groups of sizes $5, 10$ and $3$ arrive (in that order), in the end there will be $8$ people in the restaurant. The first group occupies the table of capacity $5$, the second group leaves and the last group occupies the table of capacity $8$.\n\nRobin plans to keep his restaurant open for $t$ hours in total. In the restaurant business the most important metric is the expected number of people in the restaurant when it is closes. Can you help Robin calculate the expected occupancy after $t$ hours?\n\n-----Input-----\nThe input consists of:\n - One line with three integers $n, g, t$ ($1 \\le n \\le 100, 1\\leq g\\leq 200, 1\\leq t \\leq 100$), the number of tables in the restaurant, the maximum group size, and the number of hours the restaurant is open.\n - One line with $n$ integers $c_1, \\ldots , c_ n$ ($1 \\le c_ i \\le 200$ for each $i$) giving the capacities of the tables.\n\n-----Output-----\nOutput the expected number of people in the restaurant when it closes. Your answer should have an absolute or relative error of at most $10^{-6}$.\n\n-----Examples-----\nSample Input 1:\n3 3 2\n1 2 3\nSample Output 1:\n3.666666667\n\nSample Input 2:\n4 11 4\n10 10 10 10\nSample Output 2:\n20.000000000",
    "public_tests": {
      "input": [
        "3 3 2\n1 2 3\n",
        "4 11 4\n10 10 10 10\n"
      ],
      "output": [
        "3.666666667\n",
        "20.000000000\n"
      ]
    },
    "private_tests": {
      "input": [
        "3 3 2\n1 2 3\n",
        "4 11 4\n10 10 10 10\n",
        "4 3 3\n4 1 3 2\n"
      ],
      "output": [
        "3.666666667\n",
        "20.000000000\n",
        "5.888888888888\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3916,
    "description": "\u00c6sir - CHAOS \u00c6sir - V.\n\n\"Everything has been planned out. No more hidden concerns. The condition of Cytus is also perfect.\n\nThe time right now...... 00:01:12......\n\nIt's time.\"\n\nThe emotion samples are now sufficient. After almost 3 years, it's time for Ivy to awake her bonded sister, Vanessa.\n\nThe system inside A.R.C.'s Library core can be considered as an undirected graph with infinite number of processing nodes, numbered with all positive integers ($1, 2, 3, \\ldots$). The node with a number $x$ ($x > 1$), is directly connected with a node with number $\\frac{x}{f(x)}$, with $f(x)$ being the lowest prime divisor of $x$.\n\nVanessa's mind is divided into $n$ fragments. Due to more than 500 years of coma, the fragments have been scattered: the $i$-th fragment is now located at the node with a number $k_i!$ (a factorial of $k_i$).\n\nTo maximize the chance of successful awakening, Ivy decides to place the samples in a node $P$, so that the total length of paths from each fragment to $P$ is smallest possible. If there are multiple fragments located at the same node, the path from that node to $P$ needs to be counted multiple times.\n\nIn the world of zeros and ones, such a requirement is very simple for Ivy. Not longer than a second later, she has already figured out such a node.\n\nBut for a mere human like you, is this still possible?\n\nFor simplicity, please answer the minimal sum of paths' lengths from every fragment to the emotion samples' assembly node $P$.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($1 \\le n \\le 10^6$)\u00a0\u2014 number of fragments of Vanessa's mind.\n\nThe second line contains $n$ integers: $k_1, k_2, \\ldots, k_n$ ($0 \\le k_i \\le 5000$), denoting the nodes where fragments of Vanessa's mind are located: the $i$-th fragment is at the node with a number $k_i!$.\n\n\n-----Output-----\n\nPrint a single integer, denoting the minimal sum of path from every fragment to the node with the emotion samples (a.k.a. node $P$).\n\nAs a reminder, if there are multiple fragments at the same node, the distance from that node to $P$ needs to be counted multiple times as well.\n\n\n-----Examples-----\nInput\n3\n2 1 4\n\nOutput\n5\n\nInput\n4\n3 1 4 4\n\nOutput\n6\n\nInput\n4\n3 1 4 1\n\nOutput\n6\n\nInput\n5\n3 1 4 1 5\n\nOutput\n11\n\n\n\n-----Note-----\n\nConsidering the first $24$ nodes of the system, the node network will look as follows (the nodes $1!$, $2!$, $3!$, $4!$ are drawn bold):\n\n[Image]\n\nFor the first example, Ivy will place the emotion samples at the node $1$. From here:\n\n  The distance from Vanessa's first fragment to the node $1$ is $1$.  The distance from Vanessa's second fragment to the node $1$ is $0$.  The distance from Vanessa's third fragment to the node $1$ is $4$. \n\nThe total length is $5$.\n\nFor the second example, the assembly node will be $6$. From here:\n\n  The distance from Vanessa's first fragment to the node $6$ is $0$.  The distance from Vanessa's second fragment to the node $6$ is $2$.  The distance from Vanessa's third fragment to the node $6$ is $2$.  The distance from Vanessa's fourth fragment to the node $6$ is again $2$. \n\nThe total path length is $6$.",
    "public_tests": {
      "input": [
        "3\n2 1 4\n",
        "4\n3 1 4 4\n",
        "4\n3 1 4 1\n",
        "5\n3 1 4 1 5\n"
      ],
      "output": [
        "5\n",
        "6\n",
        "6\n",
        "11\n"
      ]
    },
    "private_tests": {
      "input": [
        "3\n2 1 4\n",
        "4\n3 1 4 4\n",
        "4\n3 1 4 1\n",
        "5\n3 1 4 1 5\n",
        "11\n5000 5000 5000 5000 5000 5000 0 1 0 1 0\n",
        "1\n0\n",
        "1\n1\n",
        "4\n0 1 1 0\n",
        "17\n1 9 2 8 4 5 7 3 8 4 6 2 8 4 1 0 5\n",
        "4\n57 918 827 953\n",
        "51\n17 26 14 0 41 18 40 14 29 25 5 23 46 20 8 14 12 27 8 38 9 42 17 16 31 2 5 45 16 35 37 1 46 27 27 16 20 38 11 48 11 3 23 40 10 46 31 47 32 49 17\n",
        "95\n28 12 46 4 24 37 23 19 7 22 29 34 10 10 9 11 9 17 26 23 8 42 12 31 33 39 25 17 1 41 30 21 11 26 14 43 19 24 32 14 3 42 29 47 40 16 27 43 33 28 6 25 40 4 0 21 5 36 2 3 35 38 49 41 32 34 0 27 30 44 45 18 2 6 1 50 13 22 20 20 7 5 16 18 13 15 15 36 39 37 31 35 48 38 8\n",
        "49\n27 12 48 48 9 10 29 50 48 48 48 48 11 14 18 27 48 48 48 48 1 48 33 48 27 48 48 48 12 16 48 48 22 48 48 36 31 32 31 48 50 43 20 48 48 48 48 48 16\n",
        "17\n12 12 5 1 3 12 4 2 12 12 12 12 6 12 7 12 0\n",
        "70\n50 0 50 0 0 0 0 0 0 50 50 50 50 0 50 50 0 50 50 0 0 0 50 50 0 0 50 0 50 0 50 0 0 50 0 0 0 0 50 50 50 50 0 0 0 0 0 0 0 0 50 0 50 50 0 50 0 0 0 0 50 0 50 0 0 50 0 50 0 0\n",
        "13\n0 0 0 0 0 0 0 0 0 0 0 0 50\n",
        "45\n50 0 0 0 0 0 0 0 0 50 0 0 50 0 0 50 50 0 0 0 0 0 50 0 0 0 0 0 50 50 0 0 0 0 50 0 50 0 50 0 0 0 0 0 50\n",
        "24\n50 0 50 50 50 0 50 50 0 50 50 50 50 50 0 50 50 0 50 50 50 50 50 50\n",
        "68\n50 50 50 50 50 50 50 50 0 0 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50 50 50 50 50 50 50 50 0 50 50 0 0 50 50 50 50 50 50 50 50 0 50 50 50 50 50 50\n",
        "75\n2597 1818 260 4655 4175 2874 2987 4569 2029 4314 444 2276 4937 1209 1797 4965 3526 275 3535 2198 4402 2144 1369 13 4453 1655 4456 711 3563 1650 3997 885 782 147 2426 974 2917 2100 4549 2465 3015 3485 3238 4086 171 3934 1903 133 2278 2573 688 551 872 459 2044 1401 2429 4933 3747 587 2781 4173 4651 4012 1407 2352 1461 566 2062 4599 1430 2269 3914 1820 4728\n",
        "29\n8 27 14 21 6 20 2 11 3 19 10 16 0 25 18 4 23 17 15 26 28 1 13 5 9 22 12 7 24\n",
        "87\n1120 1120 1120 872 1120 731 3583 2815 4019 1291 4568 973 1120 1705 1120 822 203 1120 1120 1120 1120 4196 3166 4589 3030 1120 1120 1120 711 1120 500 1120 1120 3551 1120 1120 1120 1700 1120 1120 2319 4554 1120 1312 1120 1120 4176 1120 1120 3661 1120 1120 1120 1120 142 63 4125 1120 4698 3469 1829 567 1120 1120 1083 486 1120 1120 1120 1120 3763 1120 247 4496 454 1120 1120 1532 1120 4142 352 1120 359 2880 1120 1120 4494\n",
        "27\n9 1144 1144 2 8 1144 12 0 1144 1144 7 3 1144 1144 11 10 1 1144 1144 5 1144 4 1144 1144 1144 1144 6\n",
        "27\n0 5000 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 5000 5000 0 0 0 5000\n",
        "59\n0 0 0 5000 0 0 0 5000 5000 0 5000 0 0 0 5000 0 0 0 0 0 0 0 0 0 5000 0 0 0 0 5000 0 5000 0 5000 0 0 5000 0 5000 0 0 0 0 0 0 5000 0 0 0 0 5000 0 0 0 5000 0 0 0 5000\n",
        "80\n0 0 0 0 5000 0 0 5000 5000 5000 0 5000 0 5000 5000 0 0 0 0 5000 5000 0 0 5000 0 5000 5000 5000 0 5000 0 5000 5000 5000 0 0 5000 0 0 5000 5000 0 0 5000 0 5000 5000 5000 0 0 5000 5000 5000 0 0 5000 0 0 5000 0 5000 5000 0 5000 0 5000 0 5000 0 5000 0 0 0 0 5000 5000 5000 0 0 0\n",
        "20\n0 5000 5000 5000 5000 5000 0 5000 5000 0 5000 5000 5000 0 5000 5000 5000 5000 0 5000\n",
        "78\n0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 0 5000 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 0 5000 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 5000 0 5000 5000 0 0 0 5000 5000 5000 5000 0 5000 5000 5000 5000 5000 5000 0 5000 5000 0 5000\n",
        "4\n13 14 15 16\n",
        "3\n1 5 6\n",
        "3\n15 13 2\n",
        "3\n1 8 9\n"
      ],
      "output": [
        "5\n",
        "6\n",
        "6\n",
        "11\n",
        "77835\n",
        "0\n",
        "0\n",
        "0\n",
        "87\n",
        "7835\n",
        "2366\n",
        "4286\n",
        "3484\n",
        "179\n",
        "3024\n",
        "108\n",
        "1296\n",
        "540\n",
        "864\n",
        "565559\n",
        "692\n",
        "438276\n",
        "43222\n",
        "62268\n",
        "233505\n",
        "591546\n",
        "77835\n",
        "249072\n",
        "76\n",
        "10\n",
        "42\n",
        "20\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3114,
    "description": "In the ACM kingdom, there are $N$ cities connected by $M$ two-way roads. These cities are connected, i.e., one can reach from any city $X$ to any other city $Y$ by going through some of these roads. One day, the government wishes to assign for each road a direction, such that one can still reach from any city to any other. You are asked to determine whether this task is possible.\n\n-----Input-----\nThe first line of each test case consists of two integers, $N$ ($1 \\leq N \\leq 50$), and $M$ ($1 \\leq M \\leq N(N - 1)/2$). Each of the next $M$ lines describes a road, and consists of two integers, $X$ and $Y$, ($1 \\leq X, Y \\leq N$; $X \\neq Y$), indicating that there is a road between city $X$ and $Y$. There is at most one road that directly connects each pair of cities.\n\n-----Output-----\nIf it is impossible, output a single line NO. Otherwise, output YES on the first line, followed by $M$ lines describing one possible direction assignment to these $M$ roads. Each of these $M$ lines should consist of two integers, $X$, $Y$, indicating that there is a one-way road from city $X$ to city $Y$. These $M$ lines can be output in any order.\n\n-----Examples-----\nSample Input 1:\n3 3\n1 2\n2 3\n1 3\nSample Output 1:\nYES\n1 3\n2 1\n3 2\n\nSample Input 2:\n4 3\n1 2\n1 3\n1 4\nSample Output 2:\nNO",
    "public_tests": {
      "input": [
        "3 3\n1 2\n2 3\n1 3\n",
        "4 3\n1 2\n1 3\n1 4\n"
      ],
      "output": [
        "YES\n1 3\n2 1\n3 2\n",
        "NO\n"
      ]
    },
    "private_tests": {
      "input": [
        "3 3\n1 2\n2 3\n1 3\n",
        "4 3\n1 2\n1 3\n1 4\n",
        "4 5\n1 2\n2 3\n4 3\n1 4\n2 4\n"
      ],
      "output": [
        "YES\n1 3\n2 1\n3 2\n",
        "NO\n",
        "YES\n1 4\n2 1\n2 4\n3 2\n4 3\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3285,
    "description": "A smallest different sequence (SDS) is a sequence of positive integers created as follows: $A_1=r \\geq 1$. For $n>1$, $A_ n=A_{n-1}+d$, where $d$ is the smallest positive integer not yet appearing as a value in the sequence or as a difference between two values already in the sequence. For example, if $A_1 =1$, then since $2$ is the smallest number not in our sequence so far, $A_2=A_1+2=3$. Likewise $A_3=7$, since $1, 2$ and $3$ are already accounted for, either as values in the sequence, or as a difference between two values. Continuing, we have $1, 2, 3, 4, 6$, and $7$ accounted for, leaving $5$ as our next smallest difference; thus $A_4=12$. The next few values in this SDS are $20, 30, 44, 59, 75, 96, \\ldots $ For a positive integer $m$, you are to determine where in the SDS $m$ first appears, either as a value in the SDS or as a difference between two values in the SDS. In the above SDS, $12, 5, 9$ and $11$ first appear in step $4$.\n\n-----Input-----\nInput consists of a single line containing two positive integers $A_1$$m$ ($1 \\leq r \\leq 100, 1 \\leq m \\leq 200000000$).\n\n-----Output-----\nDisplay the smallest value $n$ such that the sequence $A_1, \\ldots , A_ n$ either contains $m$ as a value in the sequence or as a difference between two values in the sequence. All answers will be $\\leq 10000$.\n\n-----Examples-----\nSample Input 1:\n1 5\nSample Output 1:\n4\n\nSample Input 2:\n1 12\nSample Output 2:\n4",
    "public_tests": {
      "input": [
        "1 5\n",
        "1 12\n"
      ],
      "output": [
        "4\n\n",
        "4\n\n"
      ]
    },
    "private_tests": {
      "input": [
        "1 5\n",
        "1 12\n",
        "5 1\n"
      ],
      "output": [
        "4\n\n",
        "4\n\n",
        "2\n\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3294,
    "description": "AcmeCorp is always looking to expand its drilling operations.\n\nTheir latest target is a largely uninhabited area in the North of the country, known as Crossland. Since the pocket of oil is quite deep already, and new drill bits are expensive, Crossland\u2019s oil company would like to minimise the distance drilled\u2014which may not be vertical\u2014to get to the valuable spot.\n\nThe elevation-contoured survey map we have obtained marks the oil pocket at $(0,0)$, $0$ metres above sea level.\n\n-----Input-----\n - One line containing one positive integer $N$, the number of polygon-shaped contour lines.\n - $N$ more lines each containing two integers, $H_0$ and $H_1$ ($0 \\le H_0, H_1 \\le 10^6$), the height of land in metres above sea level outside and inside the contour respectively, followed by a positive integer $M_ i$ representing the number of vertices of this contour.\n - The remaining $2 \\cdot M_ i$ integers on each line are distinct coordinate pairs ($x_ j, y_ j$) ($-10^6 \\le x,y \\le 10^6$) denoting the $j^{th}$ point on the contour. No two contour lines touch, nor does a contour line touch the point $(0,0)$.\n\nThe total number of points across all contours will not exceed $10^5$, and it is guaranteed that the outer height of a contour is always equal to the inner height of its containing contour, if one exists.\n\n-----Output-----\nThe first and only line of output should contain one real number indicating the closest slanted distance from the surface to the target. Your answer should be correct up to an absolute or relative precision of $10^{-6}$.\n\n-----Examples-----\nSample Input 1:\n2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\nSample Output 1:\n5.2696518641\n\nSample Input 2:\n1\n8 9 3 -14 -14 14 -14 0 20\nSample Output 2:\n9",
    "public_tests": {
      "input": [
        "2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\n",
        "1\n8 9 3 -14 -14 14 -14 0 20\n"
      ],
      "output": [
        "5.2696518641\n",
        "9\n"
      ]
    },
    "private_tests": {
      "input": [
        "2\n5 8 4 -2 0 0 -3 2 0 0 3\n8 10 4 -1 -1 1 -1 1 1 -1 1\n",
        "1\n8 9 3 -14 -14 14 -14 0 20\n",
        "1\n2 1 8 -4 -4 -1 -3 -2 2 2 2 1 -3 4 -4 3 4 -3 4\n"
      ],
      "output": [
        "5.2696518641\n",
        "9\n",
        "1.8605210188\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3867,
    "description": "The BFS algorithm is defined as follows.  Consider an undirected graph with vertices numbered from $1$ to $n$. Initialize $q$ as a new queue containing only vertex $1$, mark the vertex $1$ as used.  Extract a vertex $v$ from the head of the queue $q$.  Print the index of vertex $v$.  Iterate in arbitrary order through all such vertices $u$ that $u$ is a neighbor of $v$ and is not marked yet as used. Mark the vertex $u$ as used and insert it into the tail of the queue $q$.  If the queue is not empty, continue from step 2.  Otherwise finish. \n\nSince the order of choosing neighbors of each vertex can vary, it turns out that there may be multiple sequences which BFS can print.\n\nIn this problem you need to check whether a given sequence corresponds to some valid BFS traversal of the given tree starting from vertex $1$. The tree is an undirected graph, such that there is exactly one simple path between any two vertices.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 2 \\cdot 10^5$) which denotes the number of nodes in the tree. \n\nThe following $n - 1$ lines describe the edges of the tree. Each of them contains two integers $x$ and $y$ ($1 \\le x, y \\le n$)\u00a0\u2014 the endpoints of the corresponding edge of the tree. It is guaranteed that the given graph is a tree.\n\nThe last line contains $n$ distinct integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le n$)\u00a0\u2014 the sequence to check.\n\n\n-----Output-----\n\nPrint \"Yes\" (quotes for clarity) if the sequence corresponds to some valid BFS traversal of the given tree and \"No\" (quotes for clarity) otherwise.\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Examples-----\nInput\n4\n1 2\n1 3\n2 4\n1 2 3 4\n\nOutput\nYes\nInput\n4\n1 2\n1 3\n2 4\n1 2 4 3\n\nOutput\nNo\n\n\n-----Note-----\n\nBoth sample tests have the same tree in them.\n\nIn this tree, there are two valid BFS orderings:   $1, 2, 3, 4$,  $1, 3, 2, 4$. \n\nThe ordering $1, 2, 4, 3$ doesn't correspond to any valid BFS order.",
    "public_tests": {
      "input": [
        "4\n1 2\n1 3\n2 4\n1 2 3 4\n",
        "4\n1 2\n1 3\n2 4\n1 2 4 3\n"
      ],
      "output": [
        "Yes",
        "No"
      ]
    },
    "private_tests": {
      "input": [
        "4\n1 2\n1 3\n2 4\n1 2 3 4\n",
        "4\n1 2\n1 3\n2 4\n1 2 4 3\n",
        "6\n1 2\n1 5\n2 3\n2 4\n5 6\n1 2 5 3 4 6\n",
        "6\n1 2\n1 5\n2 3\n2 4\n5 6\n1 5 2 3 4 6\n",
        "6\n1 2\n1 5\n2 3\n2 4\n5 6\n1 2 5 3 6 4\n",
        "7\n1 2\n1 5\n2 3\n2 4\n5 6\n5 7\n1 2 5 6 7 3 4\n",
        "7\n1 2\n1 5\n2 3\n2 4\n5 6\n5 7\n1 5 2 6 7 3 4\n",
        "7\n1 2\n1 5\n2 3\n2 4\n5 6\n6 7\n1 2 5 6 3 4 7\n",
        "7\n1 2\n1 5\n2 3\n2 4\n5 6\n6 7\n1 2 5 3 4 7 6\n",
        "1\n1\n",
        "2\n1 2\n2 1\n",
        "2\n2 1\n1 2\n",
        "10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n1 2 3 4 5 6 7 8 9 10\n",
        "11\n1 2\n2 8\n3 7\n4 9\n5 10\n5 11\n6 4\n6 5\n7 1\n1 6\n1 6 7 2 5 4 3 8 11 10 9\n",
        "11\n1 2\n2 8\n3 7\n4 9\n5 10\n5 11\n6 4\n6 5\n1 7\n6 1\n1 6 7 2 5 4 3 8 9 10 11\n",
        "8\n1 2\n1 6\n1 7\n8 2\n5 6\n6 4\n3 7\n1 6 7 2 5 4 8 3\n",
        "8\n1 2\n1 6\n1 7\n8 2\n5 6\n6 4\n3 7\n1 6 7 2 5 4 3 8\n",
        "3\n1 2\n1 3\n2 1 3\n",
        "2\n2 1\n2 1\n",
        "4\n2 3\n3 1\n4 1\n2 3 1 4\n",
        "3\n1 2\n2 3\n3 2 1\n",
        "4\n1 2\n2 3\n3 4\n4 3 2 1\n",
        "3\n1 3\n1 2\n2 1 3\n",
        "4\n1 2\n2 3\n3 4\n2 1 3 4\n",
        "3\n1 2\n1 3\n3 1 2\n",
        "3\n2 3\n3 1\n2 3 1\n",
        "5\n1 2\n1 3\n3 4\n3 5\n2 1 3 4 5\n",
        "3\n1 2\n2 3\n2 3 1\n",
        "4\n1 2\n1 3\n2 4\n2 4 1 3\n",
        "4\n1 2\n1 3\n1 4\n2 1 3 4\n",
        "3\n1 2\n2 3\n2 1 3\n",
        "4\n1 4\n4 3\n4 2\n1 4 2 3\n",
        "4\n2 3\n3 4\n4 1\n2 3 4 1\n",
        "4\n1 2\n1 3\n2 4\n4 2 1 3\n"
      ],
      "output": [
        "Yes",
        "No",
        "Yes",
        "No",
        "No",
        "No",
        "Yes",
        "No",
        "No",
        "Yes",
        "No",
        "Yes",
        "Yes",
        "Yes",
        "No",
        "No",
        "Yes",
        "No",
        "No",
        "No",
        "No",
        "No",
        "No",
        "No",
        "No",
        "No",
        "No",
        "No",
        "No",
        "No",
        "No",
        "Yes",
        "No",
        "No"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3008,
    "description": "The online retailer Amagoogsoftbook currently offers $N$ different so-called \u201chome assistants\u201d, which it wants to recommend to its customers. For this recommendation, they wish to rank all the assistants. The quality of this ranking is not very important \u2013 multiple assistants may even be assigned the same rank \u2013 but they wish to maximize the number of distinct ranks assigned, to lessen the decision fatigue of their customers.\n\nTo ensure that the ranking is not completely arbitrary, they have collected for each assistant $i$ two measurements $a_ i$ and $b_ i$ \u2013 the quality of the jokes the assistant can tell and how nice are the compliments the assistant is able to give (clearly these are the two most important aspects). These measurements are of course somewhat subjective, so we wish to ignore small differences in them. However, if for two given assistants $i$ and $j$ we have that $a_ i + K < a_ j$ or $b_ i + K < b_ j$, the ranking of assistant $j$ must be the same or higher than the ranking of assistant $i$. This rule may force two products to be given the same ranking, for example if an assistant $i$ gives much better puns than assistant $j$, while assistant $j$ gives the superior self-esteem boosts.\n\nWhat is the maximum number of distinct ranks, taken over all possible rankings?\n\n-----Input-----\nThe first line contains the integers $1 \\le N \\le 100000$ and $0 \\le K \\le 10^9$ \u2013 the number of assistants and the measurement difference limit as described in the statement. The next line contains the $N$ integers $a_1, a_2, \\dots , a_ N$. The next line contains the $N$ integers $b_1, b_2, \\dots , b_ N$.\n\nAll measurements are between $0$ and $10^9$.\n\n-----Output-----\nOutput a single integer: the maximum number of distinct ranks.\n\n-----Examples-----\nSample Input 1:\n2 10\n1 12\n1 13\nSample Output 1:\n2\n\nSample Input 2:\n2 10\n1 5\n1 12\nSample Output 2:\n2\n\nSample Input 3:\n2 10\n1 5\n1 4\nSample Output 3:\n2\n\nSample Input 4:\n2 10\n1 5\n4 1\nSample Output 4:\n2",
    "public_tests": {
      "input": [
        "2 10\n1 12\n1 13\n",
        "2 10\n1 5\n1 12\n",
        "2 10\n1 5\n1 4\n",
        "2 10\n1 5\n4 1\n"
      ],
      "output": [
        "2\n",
        "2\n",
        "2\n",
        "2\n"
      ]
    },
    "private_tests": {
      "input": [
        "2 10\n1 12\n1 13\n",
        "2 10\n1 5\n1 12\n",
        "2 10\n1 5\n1 4\n",
        "2 10\n1 5\n4 1\n",
        "2 10\n1 12\n13 1\n"
      ],
      "output": [
        "2\n",
        "2\n",
        "2\n",
        "2\n",
        "1\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3874,
    "description": "Polycarp is a beginner programmer. He is studying how to use a command line.\n\nPolycarp faced the following problem. There are n files in a directory and he needs to delete some of them. Polycarp wants to run a single delete command with filename pattern as an argument. All the files to be deleted should match the pattern and all other files shouldn't match the pattern.\n\nPolycarp doesn't know about an asterisk '*', the only special character he knows is a question mark '?' which matches any single character. All other characters in the pattern match themselves only.\n\nFormally, a pattern matches a filename if and only if they have equal lengths and all characters in the corresponding positions are equal except when the character in the pattern is '?', in which case the corresponding filename character does not matter.\n\nFor example, the filename pattern \"a?ba?\":  matches filenames \"aabaa\", \"abba.\", \"a.ba9\" and \"a.ba.\";  does not match filenames \"aaba\", \"abaab\", \"aabaaa\" and \"aabaa.\". \n\nHelp Polycarp find a pattern which matches files to be deleted and only them or report if there is no such pattern.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and m (1 \u2264 m \u2264 n \u2264 100) \u2014 the total number of files and the number of files to be deleted.\n\nThe following n lines contain filenames, single filename per line. All filenames are non-empty strings containing only lowercase English letters, digits and dots ('.'). The length of each filename doesn't exceed 100. It is guaranteed that all filenames are distinct.\n\nThe last line of the input contains m distinct integer numbers in ascending order a_1, a_2, ..., a_{m} (1 \u2264 a_{i} \u2264 n) \u2014 indices of files to be deleted. All files are indexed from 1 to n in order of their appearance in the input.\n\n\n-----Output-----\n\nIf the required pattern exists, print \"Yes\" in the first line of the output. The second line should contain the required pattern. If there are multiple solutions, print any of them.\n\nIf the required pattern doesn't exist, print the only line containing \"No\".\n\n\n-----Examples-----\nInput\n3 2\nab\nac\ncd\n1 2\n\nOutput\nYes\na?\n\nInput\n5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n\nOutput\nYes\n?es?\n\nInput\n4 4\na\nb\nc\ndd\n1 2 3 4\n\nOutput\nNo\n\nInput\n6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n\nOutput\nYes\n.???",
    "public_tests": {
      "input": [
        "3 2\nab\nac\ncd\n1 2\n",
        "5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n",
        "4 4\na\nb\nc\ndd\n1 2 3 4\n",
        "6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n"
      ],
      "output": [
        "Yes\na?\n",
        "Yes\n?es?\n",
        "No\n",
        "Yes\n.???\n"
      ]
    },
    "private_tests": {
      "input": [
        "3 2\nab\nac\ncd\n1 2\n",
        "5 3\ntest\ntezt\ntest.\n.est\ntes.\n1 4 5\n",
        "4 4\na\nb\nc\ndd\n1 2 3 4\n",
        "6 3\n.svn\n.git\n....\n...\n..\n.\n1 2 3\n",
        "4 2\n.b\n.c\ndbt\ne.\n2 4\n",
        "27 27\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\n",
        "27 26\na\nb\nc\nd\nee\nf\ng\nh\ni\nj\nk\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n.\n1 2 3 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\n",
        "27 26\na\nb\nc\nd\ne\nf\ng\nh\ni\nj\nkq\nl\nm\nn\no\np\nq\nr\ns\nt\nu\nv\nw\nx\ny\nz\n.\n1 2 3 4 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\n",
        "1 1\nuevim.mrr\n1\n",
        "2 1\nkbfyvezmy\nsbfammwcy\n1\n",
        "5 3\nlmljeqklg\nlclydkkxj\nuylscbk.g\neplpqakme\nablibhkfg\n1 3 5\n",
        "5 4\nabacaba\naaaaaaa\naaaaaab\naaaaaac\naaaaaad\n2 3 4 5\n",
        "5 4\nabacaba\naaaaaaa\nbaaaaab\ncaaaaac\ndaaaaad\n2 3 4 5\n",
        "5 5\nabacaba\naaaaaaa\nbaaaaab\ncaaaaac\ndaaaaad\n1 2 3 4 5\n",
        "5 3\nabacaba\naaaaaaa\nbaaaaab\ncaaaaac\ndaaaaad\n2 3 4\n",
        "5 4\naaaaaaa\nbaaaaab\ncaaaaac\ndaaaaad\nabacaba\n1 2 3 4\n",
        "5 3\naaaaaaaaaa\nbbbbbbbbbb\ncccccccccc\ndddddddddd\neeeeeeeeee\n1 3 5\n",
        "5 4\naaaaaaaaaa\nbbbbbbbbbb\ncccccccccc\ndddddddddd\neeeeeeeeee\n1 3 4 5\n",
        "5 5\naaaaaaaaaa\nbbbbbbbbbb\ncccccccccc\ndddddddddd\neeeeeeeeee\n1 2 3 4 5\n",
        "5 4\naaaaaaaaaa\nbbbbbbbbbb\ncccccccccc\ndddddddddd\neeeeeeeee\n1 2 3 4\n",
        "5 4\naaaaaaaaaa\nbbbbbbbbbb\ncccccccccc\neeeeeeeee\ndddddddddd\n1 2 3 5\n",
        "5 4\naaaaaaaaaa\nbbbbbbbbbb\neeeeeeeee\ncccccccccc\ndddddddddd\n1 2 4 5\n",
        "5 4\naaaaaaaaaa\neeeeeeeee\nbbbbbbbbbb\ncccccccccc\ndddddddddd\n1 3 4 5\n",
        "5 4\neeeeeeeee\naaaaaaaaaa\nbbbbbbbbbb\ncccccccccc\ndddddddddd\n2 3 4 5\n",
        "2 1\na\nb\n1\n",
        "2 1\na\nb\n2\n",
        "2 2\na\nb\n1 2\n",
        "2 1\naa\nb\n1\n",
        "2 1\naa\nb\n2\n",
        "2 2\naa\nb\n1 2\n",
        "2 1\nb\naa\n1\n",
        "2 1\nb\naa\n2\n",
        "2 2\nb\naa\n1 2\n",
        "2 1\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaac\n1\n"
      ],
      "output": [
        "Yes\na?\n",
        "Yes\n?es?\n",
        "No\n",
        "Yes\n.???\n",
        "No\n",
        "Yes\n?\n",
        "Yes\n?\n",
        "No\n",
        "Yes\nuevim.mrr\n",
        "Yes\nkbfyvezmy\n",
        "Yes\n??l???k?g\n",
        "Yes\naaaaaa?\n",
        "Yes\n?aaaaa?\n",
        "Yes\n??a?a??\n",
        "No\n",
        "Yes\n?aaaaa?\n",
        "No\n",
        "No\n",
        "Yes\n??????????\n",
        "Yes\n??????????\n",
        "Yes\n??????????\n",
        "Yes\n??????????\n",
        "Yes\n??????????\n",
        "Yes\n??????????\n",
        "Yes\na\n",
        "Yes\nb\n",
        "Yes\n?\n",
        "Yes\naa\n",
        "Yes\nb\n",
        "No\n",
        "Yes\nb\n",
        "Yes\naa\n",
        "No\n",
        "Yes\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3693,
    "description": "You are given two squares, one with sides parallel to the coordinate axes, and another one with sides at 45 degrees to the coordinate axes. Find whether the two squares intersect.\n\nThe interior of the square is considered to be part of the square, i.e. if one square is completely inside another, they intersect. If the two squares only share one common point, they are also considered to intersect.\n\n\n-----Input-----\n\nThe input data consists of two lines, one for each square, both containing 4 pairs of integers. Each pair represents coordinates of one vertex of the square. Coordinates within each line are either in clockwise or counterclockwise order.\n\nThe first line contains the coordinates of the square with sides parallel to the coordinate axes, the second line contains the coordinates of the square at 45 degrees.\n\nAll the values are integer and between $-100$ and $100$.\n\n\n-----Output-----\n\nPrint \"Yes\" if squares intersect, otherwise print \"No\".\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Examples-----\nInput\n0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n\nOutput\nYES\n\nInput\n0 0 6 0 6 6 0 6\n7 3 9 5 11 3 9 1\n\nOutput\nNO\n\nInput\n6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first example the second square lies entirely within the first square, so they do intersect.\n\nIn the second sample squares do not have any points in common.\n\nHere are images corresponding to the samples: [Image]  [Image]  [Image]",
    "public_tests": {
      "input": [
        "0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n",
        "0 0 6 0 6 6 0 6\n7 3 9 5 11 3 9 1\n",
        "6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n"
      ],
      "output": [
        "YES\n",
        "NO\n",
        "YES\n"
      ]
    },
    "private_tests": {
      "input": [
        "0 0 6 0 6 6 0 6\n1 3 3 5 5 3 3 1\n",
        "0 0 6 0 6 6 0 6\n7 3 9 5 11 3 9 1\n",
        "6 0 6 6 0 6 0 0\n7 4 4 7 7 10 10 7\n",
        "0 0 6 0 6 6 0 6\n8 4 4 8 8 12 12 8\n",
        "2 2 4 2 4 4 2 4\n0 3 3 6 6 3 3 0\n",
        "-5 -5 5 -5 5 5 -5 5\n-5 7 0 2 5 7 0 12\n",
        "-5 -5 5 -5 5 5 -5 5\n-5 12 0 7 5 12 0 17\n",
        "-5 -5 5 -5 5 5 -5 5\n6 0 0 6 -6 0 0 -6\n",
        "-100 -100 100 -100 100 100 -100 100\n-100 0 0 -100 100 0 0 100\n",
        "92 1 92 98 -5 98 -5 1\n44 60 56 48 44 36 32 48\n",
        "-12 -54 -12 33 -99 33 -99 -54\n-77 -40 -86 -31 -77 -22 -68 -31\n",
        "3 45 19 45 19 61 3 61\n-29 45 -13 29 3 45 -13 61\n",
        "79 -19 79 15 45 15 45 -19\n-1 24 -29 52 -1 80 27 52\n",
        "75 -57 75 -21 39 -21 39 -57\n10 -42 -32 0 10 42 52 0\n",
        "-11 53 9 53 9 73 -11 73\n-10 9 -43 42 -10 75 23 42\n",
        "-10 -36 -10 27 -73 27 -73 -36\n44 -28 71 -55 44 -82 17 -55\n",
        "-63 -15 6 -15 6 54 -63 54\n15 -13 -8 10 15 33 38 10\n",
        "47 15 51 15 51 19 47 19\n19 0 -27 46 19 92 65 46\n",
        "87 -5 87 79 3 79 3 -5\n36 36 78 -6 36 -48 -6 -6\n",
        "-4 56 10 56 10 70 -4 70\n-11 47 -35 71 -11 95 13 71\n",
        "-41 6 -41 8 -43 8 -43 6\n-7 27 43 -23 -7 -73 -57 -23\n",
        "44 -58 44 7 -21 7 -21 -58\n22 19 47 -6 22 -31 -3 -6\n",
        "-37 -63 49 -63 49 23 -37 23\n-52 68 -21 37 -52 6 -83 37\n",
        "93 20 93 55 58 55 58 20\n61 -17 39 5 61 27 83 5\n",
        "-7 4 -7 58 -61 58 -61 4\n-28 45 -17 34 -28 23 -39 34\n",
        "24 -79 87 -79 87 -16 24 -16\n-59 21 -85 47 -59 73 -33 47\n",
        "-68 -15 6 -15 6 59 -68 59\n48 -18 57 -27 48 -36 39 -27\n",
        "25 1 25 91 -65 91 -65 1\n24 3 15 12 24 21 33 12\n",
        "55 24 73 24 73 42 55 42\n49 17 10 56 49 95 88 56\n",
        "69 -65 69 -28 32 -28 32 -65\n-1 50 43 6 -1 -38 -45 6\n",
        "86 -26 86 18 42 18 42 -26\n3 -22 -40 21 3 64 46 21\n",
        "52 -47 52 -30 35 -30 35 -47\n49 -22 64 -37 49 -52 34 -37\n",
        "27 -59 27 9 -41 9 -41 -59\n-10 -17 2 -29 -10 -41 -22 -29\n",
        "-90 2 0 2 0 92 -90 92\n-66 31 -86 51 -66 71 -46 51\n",
        "-93 -86 -85 -86 -85 -78 -93 -78\n-13 61 0 48 -13 35 -26 48\n",
        "-3 -45 85 -45 85 43 -3 43\n-22 0 -66 44 -22 88 22 44\n",
        "-27 -73 72 -73 72 26 -27 26\n58 11 100 -31 58 -73 16 -31\n",
        "-40 -31 8 -31 8 17 -40 17\n0 18 -35 53 0 88 35 53\n",
        "-15 -63 -15 7 -85 7 -85 -63\n-35 -40 -33 -42 -35 -44 -37 -42\n",
        "-100 -100 -100 100 100 100 100 -100\n-100 0 0 100 100 0 0 -100\n",
        "67 33 67 67 33 67 33 33\n43 11 9 45 43 79 77 45\n",
        "14 8 9 8 9 3 14 3\n-2 -13 14 3 30 -13 14 -29\n",
        "4 3 7 3 7 6 4 6\n7 29 20 16 7 3 -6 16\n",
        "14 30 3 30 3 19 14 19\n19 -13 11 -5 19 3 27 -5\n",
        "-54 3 -50 3 -50 -1 -54 -1\n3 -50 -6 -41 -15 -50 -6 -59\n",
        "3 8 3 -10 21 -10 21 8\n-9 2 -21 -10 -9 -22 3 -10\n",
        "-35 3 -21 3 -21 -11 -35 -11\n-8 -10 3 -21 -8 -32 -19 -21\n",
        "-5 -23 -5 -31 3 -31 3 -23\n-7 -23 -2 -28 3 -23 -2 -18\n",
        "3 20 10 20 10 13 3 13\n3 20 21 38 39 20 21 2\n",
        "25 3 16 3 16 12 25 12\n21 -2 16 -7 11 -2 16 3\n",
        "-1 18 -1 3 14 3 14 18\n14 3 19 8 14 13 9 8\n",
        "-44 -17 -64 -17 -64 3 -44 3\n-56 15 -44 27 -32 15 -44 3\n",
        "17 3 2 3 2 18 17 18\n22 23 2 3 -18 23 2 43\n",
        "3 -22 3 -36 -11 -36 -11 -22\n11 -44 19 -36 11 -28 3 -36\n",
        "3 45 3 48 0 48 0 45\n13 38 4 47 13 56 22 47\n",
        "3 -10 2 -10 2 -9 3 -9\n38 -10 20 -28 2 -10 20 8\n",
        "-66 3 -47 3 -47 22 -66 22\n-52 -2 -45 5 -52 12 -59 5\n",
        "3 37 -1 37 -1 41 3 41\n6 31 9 34 6 37 3 34\n",
        "13 1 15 1 15 3 13 3\n13 19 21 11 13 3 5 11\n",
        "20 8 3 8 3 -9 20 -9\n2 -11 3 -10 2 -9 1 -10\n",
        "3 41 3 21 -17 21 -17 41\n26 12 10 28 26 44 42 28\n",
        "11 11 11 3 3 3 3 11\n-12 26 -27 11 -12 -4 3 11\n",
        "-29 3 -29 12 -38 12 -38 3\n-35 9 -29 15 -23 9 -29 3\n",
        "3 -32 1 -32 1 -30 3 -30\n4 -32 -16 -52 -36 -32 -16 -12\n",
        "-16 -10 -16 9 3 9 3 -10\n-8 -1 2 9 12 -1 2 -11\n",
        "3 -42 -5 -42 -5 -34 3 -34\n-8 -54 -19 -43 -8 -32 3 -43\n",
        "-47 3 -37 3 -37 -7 -47 -7\n-37 3 -33 -1 -37 -5 -41 -1\n",
        "10 3 12 3 12 5 10 5\n12 4 20 12 12 20 4 12\n",
        "3 -41 -9 -41 -9 -53 3 -53\n18 -16 38 -36 18 -56 -2 -36\n",
        "3 40 2 40 2 41 3 41\n22 39 13 48 4 39 13 30\n",
        "21 26 21 44 3 44 3 26\n-20 38 -32 26 -20 14 -8 26\n",
        "0 7 3 7 3 10 0 10\n3 9 -17 29 -37 9 -17 -11\n",
        "3 21 3 18 6 18 6 21\n-27 18 -11 2 5 18 -11 34\n",
        "-29 13 -39 13 -39 3 -29 3\n-36 -4 -50 -18 -36 -32 -22 -18\n",
        "3 -26 -2 -26 -2 -21 3 -21\n-5 -37 -16 -26 -5 -15 6 -26\n",
        "3 9 -1 9 -1 13 3 13\n-9 17 -1 9 -9 1 -17 9\n",
        "48 8 43 8 43 3 48 3\n31 -4 43 8 55 -4 43 -16\n",
        "-3 1 3 1 3 -5 -3 -5\n20 -22 3 -5 20 12 37 -5\n",
        "14 3 14 -16 -5 -16 -5 3\n14 2 15 1 14 0 13 1\n",
        "-10 12 -10 -1 3 -1 3 12\n1 10 -2 7 -5 10 -2 13\n",
        "39 21 21 21 21 3 39 3\n27 3 47 -17 27 -37 7 -17\n",
        "3 1 3 17 -13 17 -13 1\n17 20 10 27 3 20 10 13\n",
        "15 -18 3 -18 3 -6 15 -6\n29 -1 16 -14 3 -1 16 12\n",
        "41 -6 41 3 32 3 32 -6\n33 3 35 5 33 7 31 5\n",
        "7 35 3 35 3 39 7 39\n23 15 3 35 23 55 43 35\n",
        "19 19 35 19 35 3 19 3\n25 -9 16 -18 7 -9 16 0\n",
        "-20 3 -20 9 -26 9 -26 3\n-19 4 -21 2 -19 0 -17 2\n",
        "13 3 22 3 22 -6 13 -6\n26 3 22 -1 18 3 22 7\n",
        "-4 -8 -4 -15 3 -15 3 -8\n-10 5 -27 -12 -10 -29 7 -12\n",
        "3 15 7 15 7 19 3 19\n-12 30 -23 19 -12 8 -1 19\n",
        "-12 3 5 3 5 -14 -12 -14\n-14 22 5 3 24 22 5 41\n",
        "-37 3 -17 3 -17 -17 -37 -17\n-9 -41 9 -23 -9 -5 -27 -23\n",
        "3 57 3 45 -9 45 -9 57\n8 50 21 37 8 24 -5 37\n",
        "42 3 42 -6 33 -6 33 3\n42 4 41 3 40 4 41 5\n",
        "3 59 3 45 -11 45 -11 59\n-2 50 -8 44 -2 38 4 44\n",
        "-51 3 -39 3 -39 15 -51 15\n-39 14 -53 0 -39 -14 -25 0\n",
        "-7 -15 -7 3 11 3 11 -15\n15 -1 22 -8 15 -15 8 -8\n",
        "3 -39 14 -39 14 -50 3 -50\n17 -39 5 -27 -7 -39 5 -51\n",
        "91 -27 91 29 35 29 35 -27\n59 39 95 3 59 -33 23 3\n",
        "-81 -60 -31 -60 -31 -10 -81 -10\n-58 -68 -95 -31 -58 6 -21 -31\n",
        "78 -59 78 -2 21 -2 21 -59\n48 1 86 -37 48 -75 10 -37\n",
        "-38 -26 32 -26 32 44 -38 44\n2 -27 -44 19 2 65 48 19\n",
        "73 -54 73 -4 23 -4 23 -54\n47 1 77 -29 47 -59 17 -29\n",
        "-6 -25 46 -25 46 27 -6 27\n21 -43 -21 -1 21 41 63 -1\n",
        "-17 -91 -17 -27 -81 -27 -81 -91\n-48 -21 -12 -57 -48 -93 -84 -57\n",
        "-7 16 43 16 43 66 -7 66\n18 -7 -27 38 18 83 63 38\n",
        "-46 11 16 11 16 73 -46 73\n-18 -8 -67 41 -18 90 31 41\n",
        "-33 -64 25 -64 25 -6 -33 -6\n-5 -74 -51 -28 -5 18 41 -28\n",
        "99 -100 100 -100 100 -99 99 -99\n99 -99 100 -98 99 -97 98 -98\n",
        "-100 -100 -100 -99 -99 -99 -99 -100\n-10 -10 -9 -9 -10 -8 -11 -9\n",
        "-4 3 -3 3 -3 4 -4 4\n0 -4 4 0 0 4 -4 0\n",
        "0 0 10 0 10 10 0 10\n11 9 13 7 15 9 13 11\n",
        "1 1 1 6 6 6 6 1\n5 8 8 11 11 8 8 5\n",
        "99 99 99 100 100 100 100 99\n-100 0 0 100 100 0 0 -100\n",
        "0 0 0 2 2 2 2 0\n5 1 9 5 5 9 1 5\n",
        "3 2 3 3 4 3 4 2\n0 4 4 0 0 -4 -4 0\n",
        "0 0 2 0 2 2 0 2\n4 1 7 4 4 7 1 4\n",
        "3 6 3 8 5 8 5 6\n2 9 4 11 6 9 4 7\n",
        "0 0 10 0 10 10 0 10\n-1 5 5 -1 11 5 5 11\n",
        "0 0 1 0 1 1 0 1\n3 0 6 3 3 6 0 3\n",
        "3 7 4 7 4 6 3 6\n0 0 10 10 20 0 10 -10\n",
        "0 0 0 1 1 1 1 0\n0 3 3 6 6 3 3 0\n",
        "0 0 0 4 4 4 4 0\n3 6 7 10 11 6 7 2\n",
        "0 0 0 1 1 1 1 0\n0 10 10 0 20 10 10 20\n"
      ],
      "output": [
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3214,
    "description": "Better Documents Inc.\u00a0is contemplating the next generation of word processors. Now, nearly every word processor includes a Spell Checker. BDI, however, is looking forward to replacing that with a true Typo Checker. We\u2019ve all been caught, after relying on a spell checker, by typing mistakes (\u201ctypos\u201d) that just happen to wind up as a correctly spelled word, just not the word we intended. BDI hopes to use AI to determine when a word\u2019s context suggests that it is out of place and probably should have been a different, but similarly spelled, word.\n\nAs a first step in this process, they want to see how common such similar words really are in ordinary text. Write a program to read in paragraphs of text and to produce a list of similarly spelled words occurring in that text.\n\nFor the purpose of this program, a word is any maximal string of non-whitespace characters containing at least one alphabetic character. Whitespace can be either blanks or line terminators (\u201c\\r\u201d or \u201c\\n\u201d). The core of a word is what you have left after removing any non-alphabetic characters and replacing any upper-case alphabetic characters to their lower-case equivalents.\n\nTwo words are considered to be similarly spelled if the core of one word can be converted to the core of the other word by a single application of any one of the following transformations:\n - Delete a single character.\n - Insert a single alphabetic character.\n - Replace a single character by a different alphabetic character.\n - Transpose (exchange) any two adjacent characters.\n\n-----Input-----\nInput consists of $1$ to $100$ lines of text, followed by an end of input marker in the form of a line containing only the string \u201c***\u201d.\n\nEach line of text will contain $0$ to $80$ ASCII characters (not counting line terminators).\n\n-----Output-----\nFor each word core in the text that has one or more similarly spelled words, print a line consisting of\n - That word core\n - A colon (\u201c:\u201d) followed by a blank\n - A list of all similarly spelled word cores (with no duplicates and not containing the core to the left of the colons), in alphabetic order, separated by single spaces.\n\nThe lines printed should be in alphabetic order of the word cores to the left of the colon.\n\nIf there are no similarly spelled words in the input, print a single line containing the string \u201c***\u201d.\n\n-----Examples-----\nSample Input 1:\nLost is Close to Lose\n\n\"Better Documents Inc. wants to add Typo Checking in to the\nnext generation of word processors,\" he said.\n***\nSample Output 1:\nclose: lose\nhe: the\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\n\nSample Input 2:\nThe fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n***\nSample Output 2:\nclock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till",
    "public_tests": {
      "input": [
        "Lost is Close to Lose\n",
        "The fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n***\n"
      ],
      "output": [
        "close: lose\nhe: the\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\n",
        "clock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n"
      ]
    },
    "private_tests": {
      "input": [
        "Lost is Close to Lose\n\n\"Better Documents Inc. wants to add Typo Checking in to the\nnext generation of word processors,\" he said.\n***\n",
        "The fox said, \"When?\"\n\"Not till 12 o'clock\", replied the hen.\n\"That clock is stopped, it will never strike.\", he said.\n***\n",
        "There are no similar words\nin this input set.\n***\n"
      ],
      "output": [
        "close: lose\nhe: the\nin: inc is\ninc: in\nis: in\nlose: close lost\nlost: lose\nthe: he\n",
        "clock: oclock\nhe: hen the\nhen: he when\nis: it\nit: is\noclock: clock\nthe: he\ntill: will\nwhen: hen\nwill: till\n",
        "***\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3034,
    "description": "The Bluewater Geocloud Organization (BGO) has recently developed brand new software able to predict with pinpoint precision at which second any particular cloud will start and stop raining, and with what intensity. There is, however, some uncertainty about how a cloud will move around; for each zip code, each cloud will be over that zip code with some probability.\n\nYou have scraped some information about your zip code from the BGO website, and want to use it to plan your walk to the bus stop. You wish to minimize the expected amount of rain that would fall on you. To reach the bus you must get to the bus stop within $t$ seconds from now. You have timed your walking speed to be exactly $1 \\frac{m}{s}$.\n\nTo complicate matters, some parts of the walk to the bus are covered by roofs where it might be beneficial to make shorts breaks whilst waiting for the worst rain to pass. Your front door (at $d$ meters from the bus stop) is always under a roof \u2013 but the bus stop need not be.\n\n-----Input-----\nThe first line of input is four space-separated integers: $d$ ($1 \\leq d \\leq 1000$), the distance to the bus stop in meters, $t$ ($d \\leq t \\leq 10000$) the time until the bus leaves, $c$ ($0 \\leq c \\leq 1000000$), the number of clouds tracked by BGO, and finally $r$ ($0 \\leq r \\leq d$), the number of roofs. The next $c$ lines describe the clouds; the $i$\u2019th such line contains four numbers $s_ i$, $e_ i$, $p_ i$ and $a_ i$ describing the $i$\u2019th cloud:\n - $s_ i$ ($0 \\leq s_ i < t$) is an integer giving the number of seconds until the cloud starts its raining period,\n - $e_ i$ ($s_ i < e_ i \\leq t$) is an integer giving the number of seconds until the cloud ends its raining period,\n - $p_ i$ ($0 \\leq p_ i \\leq 1$) is a real number (with at most $6$ digits after the decimal point) giving the probability that the cloud is in your zip code during its raining period, and\n - $a_ i$ ($0 \\leq a_ i \\leq 100$) is an integer indicating the amount of rain the cloud will release during its raining period, given as nm per second.\n\nFinally $r$ roof segments follow, each on its own line; the $j$\u2019th such line contains two integers $x_ j$ and $y_ j$ ($0 \\leq x_ j < y_ j \\leq d+1$), indicating that there is a roof segment starting at distance $x_ j$ away from home, ending at distance $y_ j$ away from home along the route to the bus stop. Both your home, the bus stop an the entire route between them are in the same zip code. No two roofs overlap, however one roof may start at the same exact location as another ends.\n\n-----Output-----\nThe output consists of single a real value, the minimum amount of rain in nm you can expect on your route if you reach the bus stop in time. Answers with absolute or relative precision $10^{-5}$ of the actual value will be accepted.\n\n-----Examples-----\nSample Input 1:\n20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\nSample Output 1:\n466.662\n\nSample Input 2:\n3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\nSample Output 2:\n10.00005\n\nSample Input 3:\n3 4 1 0\n0 2 0.25 8\nSample Output 3:\n2.0",
    "public_tests": {
      "input": [
        "20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n",
        "3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n",
        "3 4 1 0\n0 2 0.25 8\n"
      ],
      "output": [
        "466.662\n",
        "10.00005\n",
        "2.0\n"
      ]
    },
    "private_tests": {
      "input": [
        "20 60 2 1\n5 15 0.33333 30\n22 60 0.66666 70\n0 10\n",
        "3 4 2 1\n1 3 0.25 8\n2 4 0.66667 15\n1 2\n",
        "3 4 1 0\n0 2 0.25 8\n",
        "3 5 2 1\n0 3 0.125 32\n2 5 0.5 32\n3 4\n"
      ],
      "output": [
        "466.662\n",
        "10.00005\n",
        "2.0\n",
        "28.0\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3270,
    "description": "A Word Ladder is a puzzle in which you transform one word into another, by changing one letter at a time. But, there\u2019s a catch: every word that you form in each step must be in the dictionary! Here\u2019s an example of how to transform CAT into GAS:CAT $\\rightarrow $ CAR $\\rightarrow $ WAR $\\rightarrow $ WAS $\\rightarrow $ GAS\n\nOf course, you want to use the fewest number of transitions possible. These puzzles can be tough, and often you\u2019ll think to yourself: \u201cDarn it! If only [some word] was in the dictionary!\u201d\n\nWell, now is your chance! Given a dictionary, and a starting and ending word, what ONE single word could you add to the dictionary to minimize the number of steps to get from the starting word to the ending word, changing only one letter at a time, and making sure that every word at every step is in the dictionary?\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. Each test case will start with a line with a single integer $n$ ($2 \\le n \\le 1000$) which indicates the number of words in the dictionary. The dictionary will follow on the next $n$ lines, with one word per line. All words will consist of between $1$ and $8$ capital letters only, and all of the words in a test case will be of the same length. The first word in the list will be the starting word of the word ladder, and the second will be the ending word of the word ladder.\n\n-----Output-----\nOutput exactly two lines. The first line holds the one single word that you would add to the dictionary, and the second holds an integer indicating the minimum number of steps to get from the starting word to the ending word, adding your word.\n\nIt is possible that there\u2019s more than one word you can add that will make your path as short as possible. In this case, output the solution word that comes first alphabetically.\n\nIt is possible that there\u2019s no word you can add that will that will make your path any shorter. In this case, output 0 (zero) as the word.\n\nIt is possible that there\u2019s no word you can add that makes the solution possible. In this case, output 0 (zero) as the word, and -1 as the number of steps.\n\n-----Examples-----\nSample Input 1:\n3\nCAT\nDOG\nCOT\nSample Output 1:\nCOG\n3\n\nSample Input 2:\n2\nCAT\nDOG\nSample Output 2:\n0\n-1",
    "public_tests": {
      "input": [
        "3\nCAT\nDOG\nCOT\n",
        "2\nCAT\nDOG\n"
      ],
      "output": [
        "COG\n3\n",
        "0\n-1\n"
      ]
    },
    "private_tests": {
      "input": [
        "3\nCAT\nDOG\nCOT\n",
        "2\nCAT\nDOG\n",
        "4\nCAT\nDOG\nCOT\nCOG\n"
      ],
      "output": [
        "COG\n3\n",
        "0\n-1\n",
        "0\n3\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3195,
    "description": "Sarah is cycling to work. On her way there, she encounters the same traffic light every day. Before she reaches the lights, she alternates between using social media on her mobile device and glancing at the traffic lights, observing if they are green, yellow or red at that time. From experience, she knows that the lights have a fixed green-yellow-red cycle, and how long each stage lasts. So if the light goes from red to green at time $T$, she knows it will stay green until (but not including) $T+T_ g$, then go yellow until (but not including) $T+T_ g+T_ y$ and finally stay red until (but not including) $T+T_ g+T_ y+T_ r$, at which point it will turn green again. However, she does not know $T$, the time at which the traffic light cycle starts. Based on her observations, she can deduce what values of $T$ are (im)possible. Assuming that all possible values of $T$ that are consistent with her observations are equally likely, can you compute the probability that the lights will be green at a certain time?\n\n-----Input-----\n - The first line contains three positive integers $T_ g$ $T_ y$ $T_ r$, corresponding to the duration (in seconds) for which the lights stay green, yellow, and red ($0 < T_ g,T_ y,T_ r \\leq 10^8$).\n - The second line contains a single positive integer $n$, the number of times Sarah looked at the lights ($3 \\leq n < 1000$).\n - Each of the next $n$ lines contains one integer $0\\leq t \\leq 10^9$ followed by a color $c$: the time (in seconds) of the observation and color of the lights at that moment. The times of the observations are given in strictly increasing order. Sarah did see the lights being each color (green, yellow, and red) at least once.\n - The last line contains an integer $ 0 \\leq t_ q \\leq 10^9$ and a color $c_ q$. These specify the question asked: What is the probability of the lights being color $c_ q$ at time $t_ q$?\n\n-----Output-----\n - $0 \\leq p \\leq 1$, the probability of the lights being color $c_ q$ at time $t_ q$. Your answer is considered correct if it has absolute or relative error of at most $10^{-3}$.\n\n-----Examples-----\nSample Input 1:\n4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\nSample Output 1:\n0.25\n\nSample Input 2:\n4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\nSample Output 2:\n0",
    "public_tests": {
      "input": [
        "4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n",
        "4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n"
      ],
      "output": [
        "0.25\n",
        "0\n"
      ]
    },
    "private_tests": {
      "input": [
        "4 4 4\n3\n2 green\n18 yellow\n34 red\n5 green\n",
        "4 4 4\n4\n2 green\n6 yellow\n10 red\n14 green\n4 red\n",
        "6 6 6\n6\n5 green\n6 green\n9 yellow\n12 yellow\n15 red\n19 red\n7 green\n"
      ],
      "output": [
        "0.25\n",
        "0\n",
        "1\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3839,
    "description": "Ivan places knights on infinite chessboard. Initially there are $n$ knights. If there is free cell which is under attack of at least $4$ knights then he places new knight in this cell. Ivan repeats this until there are no such free cells. One can prove that this process is finite. One can also prove that position in the end does not depend on the order in which new knights are placed.\n\nIvan asked you to find initial placement of exactly $n$ knights such that in the end there will be at least $\\lfloor \\frac{n^{2}}{10} \\rfloor$ knights.\n\n\n-----Input-----\n\nThe only line of input contains one integer $n$ ($1 \\le n \\le 10^{3}$)\u00a0\u2014 number of knights in the initial placement.\n\n\n-----Output-----\n\nPrint $n$ lines. Each line should contain $2$ numbers $x_{i}$ and $y_{i}$ ($-10^{9} \\le x_{i}, \\,\\, y_{i} \\le 10^{9}$)\u00a0\u2014 coordinates of $i$-th knight. For all $i \\ne j$, $(x_{i}, \\,\\, y_{i}) \\ne (x_{j}, \\,\\, y_{j})$ should hold. In other words, all knights should be in different cells.\n\nIt is guaranteed that the solution exists.\n\n\n-----Examples-----\nInput\n4\n\nOutput\n1 1\n3 1\n1 5\n4 4\n\nInput\n7\n\nOutput\n2 1\n1 2\n4 1\n5 2\n2 6\n5 7\n6 6\n\n\n\n-----Note-----\n\nLet's look at second example:\n\n$\\left. \\begin{array}{|l|l|l|l|l|l|l|l|l|} \\hline 7 & {} & {} & {} & {} & {0} & {} & {} \\\\ \\hline 6 & {} & {0} & {} & {} & {} & {0} & {} \\\\ \\hline 5 & {} & {} & {} & {2} & {} & {} & {} \\\\ \\hline 4 & {} & {} & {} & {} & {} & {} & {} \\\\ \\hline 3 & {} & {} & {1} & {} & {} & {} & {} \\\\ \\hline 2 & {0} & {} & {} & {} & {0} & {} & {} \\\\ \\hline 1 & {} & {0} & {} & {0} & {} & {} & {} \\\\ \\hline & {1} & {2} & {3} & {4} & {5} & {6} & {7} \\\\ \\hline \\end{array} \\right.$\n\nGreen zeroes are initial knights. Cell $(3, \\,\\, 3)$ is under attack of $4$ knights in cells $(1, \\,\\, 2)$, $(2, \\,\\, 1)$, $(4, \\,\\, 1)$ and $(5, \\,\\, 2)$, therefore Ivan will place a knight in this cell. Cell $(4, \\,\\, 5)$ is initially attacked by only $3$ knights in cells $(2, \\,\\, 6)$, $(5, \\,\\, 7)$ and $(6, \\,\\, 6)$. But new knight in cell $(3, \\,\\, 3)$ also attacks cell $(4, \\,\\, 5)$, now it is attacked by $4$ knights and Ivan will place another knight in this cell. There are no more free cells which are attacked by $4$ or more knights, so the process stops. There are $9$ knights in the end, which is not less than $\\lfloor \\frac{7^{2}}{10} \\rfloor = 4$.",
    "public_tests": {
      "input": [
        "4\n",
        "7\n"
      ],
      "output": [
        "1 1\n3 1\n1 5\n4 4\n",
        "2 1\n1 2\n4 1\n5 2\n2 6\n5 7\n6 6\n"
      ]
    },
    "private_tests": {
      "input": [
        "4\n",
        "7\n",
        "11\n",
        "12\n",
        "20\n",
        "22\n",
        "25\n",
        "27\n",
        "13\n",
        "14\n",
        "15\n",
        "16\n",
        "17\n",
        "18\n",
        "19\n",
        "8\n",
        "10\n",
        "21\n",
        "1\n",
        "30\n",
        "40\n",
        "79\n",
        "66\n",
        "34\n",
        "37\n",
        "28\n",
        "33\n",
        "39\n",
        "45\n",
        "41\n",
        "26\n",
        "24\n",
        "23\n",
        "29\n",
        "31\n",
        "32\n",
        "35\n",
        "36\n",
        "38\n",
        "42\n"
      ],
      "output": [
        "0 0\n1 0\n1 3\n2 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n",
        "0 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n20 0\n21 0\n21 3\n22 0\n23 0\n23 3\n24 0\n25 0\n25 3\n26 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n20 0\n21 0\n21 3\n22 0\n23 0\n23 3\n24 0\n25 0\n25 3\n26 0\n27 0\n27 3\n28 0\n29 0\n29 3\n30 0\n31 0\n31 3\n32 0\n33 0\n33 3\n34 0\n35 0\n35 3\n36 0\n37 0\n37 3\n38 0\n39 0\n39 3\n40 0\n41 0\n41 3\n42 0\n43 0\n43 3\n44 0\n45 0\n45 3\n46 0\n47 0\n47 3\n48 0\n49 0\n49 3\n50 0\n51 0\n51 3\n52 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n20 0\n21 0\n21 3\n22 0\n23 0\n23 3\n24 0\n25 0\n25 3\n26 0\n27 0\n27 3\n28 0\n29 0\n29 3\n30 0\n31 0\n31 3\n32 0\n33 0\n33 3\n34 0\n35 0\n35 3\n36 0\n37 0\n37 3\n38 0\n39 0\n39 3\n40 0\n41 0\n41 3\n42 0\n43 0\n43 3\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n20 0\n21 0\n21 3\n22 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n20 0\n21 0\n21 3\n22 0\n23 0\n23 3\n24 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n20 0\n21 0\n21 3\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n20 0\n21 0\n21 3\n22 0\n23 0\n23 3\n24 0\n25 0\n25 3\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n20 0\n21 0\n21 3\n22 0\n23 0\n23 3\n24 0\n25 0\n25 3\n26 0\n27 0\n27 3\n28 0\n29 0\n29 3\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n20 0\n21 0\n21 3\n22 0\n23 0\n23 3\n24 0\n25 0\n25 3\n26 0\n27 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n20 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n20 0\n21 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n20 0\n21 0\n21 3\n22 0\n23 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n20 0\n21 0\n21 3\n22 0\n23 0\n23 3\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n20 0\n21 0\n21 3\n22 0\n23 0\n23 3\n24 0\n25 0\n",
        "0 0\n1 0\n1 3\n2 0\n3 0\n3 3\n4 0\n5 0\n5 3\n6 0\n7 0\n7 3\n8 0\n9 0\n9 3\n10 0\n11 0\n11 3\n12 0\n13 0\n13 3\n14 0\n15 0\n15 3\n16 0\n17 0\n17 3\n18 0\n19 0\n19 3\n20 0\n21 0\n21 3\n22 0\n23 0\n23 3\n24 0\n25 0\n25 3\n26 0\n27 0\n27 3\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3741,
    "description": "You are given $n$ integer numbers $a_1, a_2, \\dots, a_n$. Consider graph on $n$ nodes, in which nodes $i$, $j$ ($i\\neq j$) are connected if and only if, $a_i$ AND $a_j\\neq 0$, where AND denotes the bitwise AND operation.\n\nFind the length of the shortest cycle in this graph or determine that it doesn't have cycles at all.\n\n\n-----Input-----\n\nThe first line contains one integer $n$ $(1 \\le n \\le 10^5)$\u00a0\u2014 number of numbers.\n\nThe second line contains $n$ integer numbers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^{18}$).\n\n\n-----Output-----\n\nIf the graph doesn't have any cycles, output $-1$. Else output the length of the shortest cycle.\n\n\n-----Examples-----\nInput\n4\n3 6 28 9\n\nOutput\n4\nInput\n5\n5 12 9 16 48\n\nOutput\n3\nInput\n4\n1 2 4 8\n\nOutput\n-1\n\n\n-----Note-----\n\nIn the first example, the shortest cycle is $(9, 3, 6, 28)$.\n\nIn the second example, the shortest cycle is $(5, 12, 9)$.\n\nThe graph has no cycles in the third example.",
    "public_tests": {
      "input": [
        "4\n3 6 28 9\n",
        "5\n5 12 9 16 48\n",
        "4\n1 2 4 8\n"
      ],
      "output": [
        "4",
        "3",
        "-1"
      ]
    },
    "private_tests": {
      "input": [
        "4\n3 6 28 9\n",
        "5\n5 12 9 16 48\n",
        "4\n1 2 4 8\n",
        "1\n1000000000000000000\n",
        "4\n70369817919488 281474976710657 70368744177665 281476050452480\n",
        "5\n292733975779082240 18014398509482240 306244774661193728 4504699138998272 1099511628032\n",
        "30\n550292684800 2149580800 4194320 576531121047601152 1125899906842628 577023702256844800 36028799166447616 584115552256 144115256795332608 1103806595072 70368811286528 278528 8830452760576 1125968626319360 2251800887427072 2097168 562958543355904 98304 9007200328482816 8590000128 2253998836940800 8800387989504 18691697672192 36028797018996736 4194308 17592186306560 537395200 9007199255265280 67125248 144117387099111424\n",
        "35\n1099511627784 36028797019488256 576460752303423490 17592186044672 18014398510006272 274877923328 2252899325313024 16777248 4297064448 4210688 17592454479872 4505798650626048 4503599627371520 612489549322387456 2251808403619840 1074790400 562958543355904 549756862464 562949953421440 8320 9007199523176448 8796093022464 8796093030400 2199040032768 70368744181760 4295098368 288230376151842816 18084767253659648 2097184 5120 9007474132647936 1077936128 514 288230925907525632 520\n",
        "4\n269019726702209410 974764215496813080 547920080673102148 403277729561219906\n",
        "10\n76578820211343624 0 293297008968192 0 0 0 189152283861189120 324294649604739072 20266198324215808 0\n",
        "10\n565299879350784 4508014854799360 0 0 0 4503635094929409 18014810826352646 306526525186934784 0 0\n",
        "10\n193953851215184128 21533387621925025 0 0 90143735963329536 2272071319648 0 0 3378250047292544 0\n",
        "10\n32832 0 154618822656 0 4311744512 12884901888 25769803776 16809984 137438953536 0\n",
        "100\n0 0 0 0 0 16896 0 0 0 393216 537919488 0 0 0 147456 1310720 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2251799813685312 0 0 0 0 105553116266496 0 0 576 3377699720527872 0 0 0 0 0 0 0 0 17867063951360 0 0 1196268651020288 0 0 0 0 146028888064 0 9126805504 0 0 0 0 0 0 0 0 412316860416 0 0 0 52776558133248 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
        "10\n145135569469440 4415327043584 17247502464 72075186223972364 145241087982700608 144115188076380352 52776826568712 72198331527331844 46161896180549632 45071180914229248\n",
        "20\n144115188142973184 18015498289545217 9077576588853760 4573976961482880 144150509954007040 4295098374 290482175998952448 290486848889815040 393228 8796118192128 4672941199360 36029898946510848 18014467230007297 4503599627379072 33817608 36028803461414914 9007199389483520 149533589782528 140737623113728 35390531567616\n",
        "20\n0 0 554050781184 11258999068426240 141836999983104 1107296256 2251834173423616 9007199255789568 18014467228958720 4503633987108864 18155135997837312 4504149383184384 0 144123984168878080 34603008 1100585369600 8800387989504 0 144115256795332608 0\n",
        "35\n0 288230376151711748 276824064 288230444871188480 563499709235200 550024249344 36864 68719476992 160 0 0 0 0 0 0 0 0 2199023321088 33024 0 0 0 0 0 2814749767106560 0 34359738372 576460752370532352 0 69632 2199023271936 0 2251834173423616 75497472 576460752303439872\n",
        "20\n17592722915328 137438953728 0 549755822096 2251800350556160 70368744185856 0 2251804108652544 0 1099511628288 17592186045440 8864812498944 79164837199872 0 68719477760 1236950581248 549755814400 0 17179869456 21474836480\n",
        "20\n8589950976 0 8858370048 1342177280 65536 2199023255808 0 1075838976 0 35184372285440 0 0 0 9009398277996544 2228224 16640 0 9042383626829824 0 0\n",
        "50\n65600 17825792 0 288230376285929472 16392 0 0 16896 0 0 10486272 140737488355330 65537 171798691840 571746046443520 0 0 33024 0 2052 36028797155278848 36028805608898560 0 0 562967133290496 0 0 0 146028888064 281474976710660 0 288230376151711746 8388864 0 17180393472 0 0 0 68719476737 34376515584 0 299067162755072 68719478784 0 9007199255789568 140737488879616 9007199254773760 8796093022272 4294967304 17596481011712\n",
        "35\n274877906976 65544 8796361457664 288230376151712256 549755817984 36028797019095040 33556482 167772160 1099511635968 72057594037936128 524289 288230376151711776 18014398509482000 34363932672 1099511627840 18049582881570816 34359738384 108086391056891904 68719738880 2286984185774080 1073745920 68719476746 9007203549708288 2251799813816320 402653184 16842752 2112 786432 9007474132647936 4831838208 2097153 549755814400 1090519040 8796097216512 538968064\n",
        "2\n267367244641009858 102306300054748095\n",
        "3\n268193483524125986 538535259923264236 584613336374288890\n",
        "5\n269845965585325538 410993175365329220 287854792412106894 411389931291882088 384766635564718672\n",
        "6\n270672213058376258 847222126643910769 251161541005887447 196130104757703053 970176324544067925 590438340902981666\n",
        "7\n271498451941492386 506823119072235421 991096248449924897 204242310783332531 778958050378192987 384042493592684635 942496553147499871\n",
        "8\n272324690824608514 943052078940751562 954402997043705450 212354512513994712 364367743652509536 401018687432130708 606631724317463342 824875323687041818\n",
        "9\n273150934002691938 379281034514300406 694337708782710196 220466718539624190 949777432631858790 417994876976609485 494138923752268029 239707031030225806 400378607279200010\n",
        "10\n996517375802030517 559198117598196517 624045669640274070 717274415983359970 778062383071550120 624694462096204861 661230177799843966 796915526446173606 891967553796619137 158012341402690753\n",
        "20\n738505179452405439 393776795586588703 916949583509061480 942864257552472139 431031017016115809 547400344148658853 843639266066743033 751410499628305149 926196799677780683 288523782519361359 236550712208050515 88576472401554300 610164240954478789 948544811346543677 828908414387546137 615705220832279892 728861610641889898 318107398080960259 253426267717802880 526751456588066498\n",
        "6\n288793326105133056 160 9077567998918656 9007199254741024 562949953421440 288300744895889408\n",
        "7\n69206016 134250496 2149580800 2147516416 144115188142964736 146366987889541120 2251799947902976\n",
        "8\n90071992547409920 4503599627370500 18014398510006272 72057594037928192 260 525312 4503599627632640 263168\n",
        "9\n1161084278931456 1125899906843648 1140850688 274877972480 70643622084608 633318697598976 1073807360 35184439197696 562949953422336\n",
        "10\n289356276058554368 4503599627378688 72057594038059008 1126037345796096 288230376152760320 4503599627370498 139264 72057594038976512 70506183131136 70368744177666\n",
        "12\n2176 562967133290496 1073807360 17179871232 9011597301252096 4398046511168 9007267974217728 562949953421376 68719607808 35185445830656 196608 35184372088960\n",
        "14\n72058143793741824 144115325514809344 36028797018966016 144115188080050176 135168 1125899911036928 36028797019095040 412316860416 8796093024256 1126449662656512 8864812498944 72057662757404672 274877906952 4104\n",
        "18\n277025390592 9007199254773760 140737488371712 72057594037944320 288230378299195392 140737555464192 2199024304128 576460752303427584 201326592 1048608 137439477760 2199023779840 4128 648518346341351424 141733920768 297237575406452736 275012124672 4295000064\n",
        "25\n4398046511360 562949957615616 17179885568 70403103916032 4398048608256 262152 5242880 281474976710657 268435968 72057594037928064 8796093022209 1048704 633318697598976 72057611217797120 171798691840 35184372089088 40960 8796093153280 163840 137438953480 281474976711168 270336 2251799815782400 2251800082120704 35184372105216\n",
        "20\n0 0 2148564992 20301391285223424 0 2260595906773568 0 637721039077904 0 72058143793742848 0 0 0 288230376151711776 0 0 4299169792 0 9147936743096322 36046457941262624\n",
        "40\n0 0 0 0 33554432 0 0 34359738376 0 0 0 0 0 0 0 0 16392 598169893278720 0 0 288230651029686272 0 0 0 0 0 299084343836800 0 2287052905529600 0 0 0 0 0 0 0 28217866417348608 4311744576 0 558630961281\n",
        "100\n0 0 0 0 0 0 0 0 0 70368744472576 0 0 0 0 0 0 0 0 0 0 0 144678138029342720 0 0 0 0 0 281474977767489 0 16783360 0 0 0 0 0 288793463544086528 0 0 0 0 0 0 0 0 0 18144089473024 20 0 0 0 0 0 0 0 0 0 0 0 0 144115222435725440 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 18014419984875520 0 0 0 0 0 0 0 0 0 274878432256 0 0 0 38280596899758080 0 0 0 0 0 0 0 18014398509813764 72057594046316576 0\n",
        "100\n0 0 0 72057598886543392 0 0 0 0 0 0 34635777 0 0 0 0 0 0 0 0 0 0 145276272354791568 0 0 0 0 0 0 0 268435456 0 0 0 299068236759040 0 0 2251800082128928 1236950844416 0 0 0 0 0 0 0 0 290482175998951428 0 0 0 2621440 0 0 0 0 0 0 0 0 0 0 0 4259840 0 0 0 0 0 4398046511108 0 0 0 0 0 0 288230376151712258 0 144258124587466816 0 0 0 0 0 0 0 0 0 0 0 0 1266637395206144 0 281818574094336 0 0 0 0 0 0 0\n",
        "150\n0 0 0 0 0 0 0 2537672836907008 0 0 0 0 0 0 16384 0 0 0 0 34360787232 0 0 70871155232 0 0 0 0 0 0 0 0 0 0 0 2256197860262016 0 0 0 0 0 0 0 0 0 0 536872961 0 0 0 0 0 0 0 0 0 0 33619968 0 0 0 0 0 0 0 0 0 0 0 0 37189881297899520 0 18031990695526400 0 0 1099511627776 0 0 0 0 0 0 0 0 2097152 0 0 0 134217984 0 0 0 0 0 0 32768 0 0 0 0 0 0 0 0 72057594037928066 0 0 0 0 297307996227110981 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 288240271756361736 0 2097154 0 9007199254740992 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
        "10\n70377334112256 2304 134219776 0 8724152320 70368744177920 0 0 0 0\n",
        "15\n4296097792 1125934333693952 288230376152777216 68719509522 1126484559265792 140737756799040 18155136283049984 36028797052551170 288300753485824512 4299227392 70377334120512 18023194619281412 36028797056712960 8796160135172 619012161552\n",
        "20\n67109888 0 0 67108896 562949953422336 0 68719480832 134217760 562949954469888 0 36028797153181696 0 36028865738440704 0 0 0 4098 1048578 0 0\n",
        "50\n72057594038452224 0 12884901888 288230376151713792 65664 0 0 0 0 17314086912 150994944 0 18031990695526400 580964351930793984 72066390130950144 17179871232 17592186060800 0 35184372088848 4297064448 0 24 0 0 576460753377165312 8589934593 0 0 0 549755879424 562949953437696 175921860444160 553648128 4504149383184384 0 0 274877906952 0 0 0 0 0 562949953454080 1125899906842752 140738562097152 537395200 288230376153808896 1134695999864832 32769 18014673387388928\n",
        "35\n18049582881570816 2112 0 2251799813816320 108086391056891904 0 2 0 0 0 402653184 2286984185774080 0 0 0 0 0 0 68719738880 0 72057594037936128 33556482 34359738384 0 0 1099511627840 0 167772160 18014398509482000 34363932672 8796361457664 36028797019095040 1099511635968 0 8796097216512\n",
        "20\n137438953728 288230384741646336 17592186045440 1125908496777232 1236950581248 17592722915328 8864812498944 1099511628288 79164837199872 144115188075855876 17179869440 2251804108652544 2251800350556160 68719477760 21474836480 288230376151711748 145241087982698496 70368744185856 549755822096 549755814400\n",
        "20\n281474976710658 1075838976 281477124194304 2147487744 35184372285440 8196 2228224 4112 9042383626829824 275012190208 1342177280 8858370048 8589950976 1125899906850816 274877906960 6 2199023255808 1125900041060352 9009398277996544 16640\n",
        "3\n1 1 3\n",
        "7\n5 42 80 192 160 9 22\n",
        "7\n129 259 6 12 24 304 224\n",
        "3\n5 5 5\n",
        "5\n25 3 44 6 48\n",
        "5\n49 3 6 44 24\n",
        "6\n97 3 6 28 40 80\n",
        "5\n25 48 3 6 44\n",
        "7\n641 1283 2054 4108 8216 16688 32992\n",
        "7\n259 6 12 24 304 224 129\n",
        "179\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "27\n4295000064 274877906976 48389226512 33554434 68720525312 4194320 67108865 96 2056 413264846980 541065216 17179901952 8589935104 129 2147487744 68719607808 139586437120 17315009610 1280 2097408 25165824 1107296256 268435968 278528 34376515584 16388 10240\n"
      ],
      "output": [
        "4",
        "3",
        "-1",
        "-1",
        "4",
        "5",
        "30",
        "35",
        "3",
        "3",
        "3",
        "3",
        "7",
        "15",
        "10",
        "20",
        "15",
        "17",
        "6",
        "10",
        "11",
        "17",
        "-1",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "3",
        "6",
        "7",
        "8",
        "9",
        "10",
        "12",
        "14",
        "18",
        "25",
        "-1",
        "4",
        "3",
        "3",
        "-1",
        "5",
        "15",
        "10",
        "30",
        "17",
        "5",
        "10",
        "3",
        "4",
        "4",
        "3",
        "3",
        "3",
        "4",
        "3",
        "4",
        "4",
        "3",
        "3"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3861,
    "description": "Given an array a_1, a_2, ..., a_{n} of n integers, find the largest number in the array that is not a perfect square.\n\nA number x is said to be a perfect square if there exists an integer y such that x = y^2.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 1000)\u00a0\u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} ( - 10^6 \u2264 a_{i} \u2264 10^6)\u00a0\u2014 the elements of the array.\n\nIt is guaranteed that at least one element of the array is not a perfect square.\n\n\n-----Output-----\n\nPrint the largest number in the array which is not a perfect square. It is guaranteed that an answer always exists.\n\n\n-----Examples-----\nInput\n2\n4 2\n\nOutput\n2\n\nInput\n8\n1 2 4 8 16 32 64 576\n\nOutput\n32\n\n\n\n-----Note-----\n\nIn the first sample case, 4 is a perfect square, so the largest number in the array that is not a perfect square is 2.",
    "public_tests": {
      "input": [
        "2\n4 2\n",
        "8\n1 2 4 8 16 32 64 576\n"
      ],
      "output": [
        "2\n",
        "32\n"
      ]
    },
    "private_tests": {
      "input": [
        "2\n4 2\n",
        "8\n1 2 4 8 16 32 64 576\n",
        "3\n-1 -4 -9\n",
        "5\n918375 169764 598796 76602 538757\n",
        "5\n804610 765625 2916 381050 93025\n",
        "5\n984065 842724 127449 525625 573049\n",
        "2\n226505 477482\n",
        "2\n370881 659345\n",
        "2\n4 5\n",
        "2\n3 4\n",
        "2\n999999 1000000\n",
        "3\n-1 -2 -3\n",
        "2\n-1000000 1000000\n",
        "2\n-1 0\n",
        "1\n2\n",
        "1\n-1\n",
        "35\n-871271 -169147 -590893 -400197 -476793 0 -15745 -890852 -124052 -631140 -238569 -597194 -147909 -928925 -587628 -569656 -581425 -963116 -665954 -506797 -196044 -309770 -701921 -926257 -152426 -991371 -624235 -557143 -689886 -59804 -549134 -107407 -182016 -24153 -607462\n",
        "16\n-882343 -791322 0 -986738 -415891 -823354 -840236 -552554 -760908 -331993 -549078 -863759 -913261 -937429 -257875 -602322\n",
        "71\n908209 289 44521 240100 680625 274576 212521 91809 506944 499849 3844 15376 592900 58081 240100 984064 732736 257049 600625 180625 130321 580644 261121 75625 46225 853776 485809 700569 817216 268324 293764 528529 25921 399424 175561 99856 295936 20736 611524 13924 470596 574564 5329 15376 676 431649 145161 697225 41616 550564 514089 9409 227529 1681 839056 3721 552049 465124 38809 197136 659344 214369 998001 44944 3844 186624 362404 -766506 739600 10816 299209\n",
        "30\n192721 -950059 -734656 625 247009 -423468 318096 622521 678976 777924 1444 748303 27556 62001 795664 89401 221841 -483208 467856 477109 196 -461813 831744 772641 574564 -519370 861184 67600 -717966 -259259\n",
        "35\n628849 962361 436921 944784 444889 29241 -514806 171396 685584 -823202 -929730 6982 198025 783225 552049 -957165 782287 -659167 -414846 695556 -336330 41616 963781 71289 119639 952576 -346713 178929 232324 121802 393266 841 649636 179555 998001\n",
        "53\n280988 756430 -515570 -248578 170649 -21608 642677 216770 827291 589500 940901 216097 -118956 -919104 -319264 -761585 289479 499613 588276 883036 480518 -323196 -274570 -406556 -381484 -956025 702135 -445274 -783543 136593 153664 897473 352651 737974 -21123 -284944 501734 898033 604429 624138 40804 248782 -786059 -304592 -209210 -312904 419820 -328648 -47331 -919227 -280955 104827 877304\n",
        "15\n256 -227055 427717 827239 462070 66049 987533 -175306 -552810 -867915 -408251 -693957 -972981 -245827 896904\n",
        "3\n-1 1 0\n",
        "2\n0 -5\n",
        "3\n-1 -2 0\n",
        "2\n-5 0\n",
        "1\n-439\n",
        "1\n-1000000\n",
        "1\n-917455\n",
        "3\n1 1 -1\n",
        "2\n131073 1\n",
        "2\n99999 3\n",
        "2\n-524272 -1000000\n",
        "2\n15 131073\n"
      ],
      "output": [
        "2\n",
        "32\n",
        "-1\n",
        "918375\n",
        "804610\n",
        "984065\n",
        "477482\n",
        "659345\n",
        "5\n",
        "3\n",
        "999999\n",
        "-1\n",
        "-1000000\n",
        "-1\n",
        "2\n",
        "-1\n",
        "-15745\n",
        "-257875\n",
        "-766506\n",
        "748303\n",
        "963781\n",
        "940901\n",
        "987533\n",
        "-1\n",
        "-5\n",
        "-1\n",
        "-5\n",
        "-439\n",
        "-1000000\n",
        "-917455\n",
        "-1\n",
        "131073\n",
        "99999\n",
        "-524272\n",
        "131073\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3173,
    "description": "In the second round of the Hunter Exam, the candidates are faced with an even more challenging problem, requiring both agility and mathematical skills.\n\nAfter entering the Examination Hall for the second round, candidates are faced with a huge vertical grid containing empty spaces, obstacles and conveyor belts. The grid is composed of $K$ identical parts, each of size $(R+1) \\times C$, stacking vertically on top of each other. In order to pass the exam, each candidate must drop exactly one ball into this grid and get the maximum possible score.\n\nBelow is a sample grid with $R = 2$, $C = 5$ and $K = 2$:\n\nEach cell in the grid can be one of the following:\n - Empty space (colored white in the above image). The ball falls through it.\n - Obstacle blocking the ball from moving (colored black in the above image). If the ball lands on top of an obstacle, it cannot go anywhere and the exam ends.\n - Conveyor belt (colored yellow in the above image). All conveyor belts are horizontal and have either left or right direction. Some belts\u2019 direction have been fixed, and you have to set the direction for the others. Based on its direction, a belt sends the ball one unit to the left or to the right. If the ball is sent outside of the grid or to an obstacle, your exam ends immediately.\n - In the above grid, \u2018R\u2019 and \u2018L\u2019 represent a conveyor bell which was already set to right and left, respectively, and \u2018?\u2019 represents a conveyor bell which is not yet set.\n - Note that two belts in two different parts are considered different. You can set different directions for them, even though they are in the same position in respect to their parts.\n - Cell with points (colored blue in the above image). A cell belongs to this kind if and only if it is on the last row of some part. This cell contains an integer\u00a0\u2014 the score you gain when the ball lands on this cell. Note that the ball will fall through this square and begins a new part, or if that\u2019s the last part, the exam ends.\n\nAs the time for the exam is limited, the exam will also end when the ball goes through $10^{20}$ cells.\n\nYour final score in this exam is the sum of score you get when the exam ends. You don\u2019t have to make the ball fall to the bottom. To pass the exam, you must find a way to set the conveyor belts and set the initial position of the ball to maximize the final score. Can you do it?\n\n-----Input-----\nThe first line of the input contains $3$ integers $R$, $C$ and $K$. $(1 \\le R, C \\le 50, 1 \\le K \\le 10^9)$.\n\nIn the next $R$ line, the $i$-th line contains exactly $C$ characters. Each character can be one of the following:\n - \u2018.\u2019, representing an empty space.\n - \u2018X\u2019, representing an obstacle.\n - \u2018R\u2019, representing a conveyor belt, which is already set to right.\n - \u2018L\u2019, representing a conveyor belt, which is already set to left.\n - \u2018?\u2019, representing a conveyor belt, which is not yet set.\n\nThe last line of the input contains exactly $C$ integers. The $i$-th number, $a_ i$, represents the score in the $i$-th column in the last row. $(1 \\le a_ i \\le 10^9)$.\n\n-----Output-----\nOutput contains a single integer \u2014 the maximum final score.\n\n-----Explanation for the first example-----\nWe can set the conveyor belt in the first row to \u2018R\u2019 and the conveyor belt in the $4$th row to \u2018L\u2019, then drop the ball from the $4$-th column.\n\n-----Examples-----\nSample Input 1:\n2 5 2\nR..?.\n.X...\n100 100 7 100 8\nSample Output 1:\n16\n\nSample Input 2:\n2 3 1\nX..\n.?.\n10 1000 1\nSample Output 2:\n10",
    "public_tests": {
      "input": [
        "2 5 2\nR..?.\n.X...\n100 100 7 100 8\n",
        "2 3 1\nX..\n.?.\n10 1000 1\n"
      ],
      "output": [
        "16\n",
        "10\n"
      ]
    },
    "private_tests": {
      "input": [
        "2 5 2\nR..?.\n.X...\n100 100 7 100 8\n",
        "2 3 1\nX..\n.?.\n10 1000 1\n",
        "2 3 100\nX..\n.?.\n10 1000 1\n"
      ],
      "output": [
        "16\n",
        "10\n",
        "100\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3101,
    "description": "Once upon a time, high up on Mount Olympus, it came to pass that the gods held a competition to see who among them was the best at sorting lists of integers. Eris, the goddess of discord, finds this terribly boring and plans to add some mischief to the mix to make things more fun. She will sabotage the answers of Zeus so that his list of numbers is no longer sorted, which will no doubt be so embarrassing that he becomes furious and starts a minor war. \n\nEris must be careful not to be discovered while performing her sabotage, so she decides to only change a single digit in one of the numbers in Zeus\u2019 answer. The resulting number may not have any leading zeros (unless it becomes equal to zero in which case a single zero digit is allowed). Eris can only replace a digit with another digit \u2013 adding or removing digits is not allowed.\n\n-----Input-----\nThe first line of input contains $n$ ($2 \\leq n \\leq 100$), the length of Zeus\u2019 answer. The second line contains $n$ integers $a_1, a_2, \\ldots , a_ n$ ($0 \\leq a_1 \\le a_2 \\le \\ldots \\le a_ n \\leq 10^{15}$), Zeus\u2019 answer.\n\n-----Output-----\nIf Eris can make the list not be sorted by changing a single digit of one of the numbers, then output $n$ integers $b_1, \\ldots , b_ n$, the resulting list of numbers after making the change. Otherwise, output \u201cimpossible\u201d. If there are many valid solutions, any one will be accepted.\n\n-----Examples-----\nSample Input 1:\n3\n2020 2020 2020\nSample Output 1:\n2021 2020 2020\n\nSample Input 2:\n2\n1 9999999\nSample Output 2:\nimpossible",
    "public_tests": {
      "input": [
        "3\n2020 2020 2020\n",
        "2\n1 9999999\n"
      ],
      "output": [
        "2021 2020 2020\n",
        "impossible\n"
      ]
    },
    "private_tests": {
      "input": [
        "3\n2020 2020 2020\n",
        "2\n1 9999999\n",
        "4\n1 42 4711 9876\n"
      ],
      "output": [
        "2021 2020 2020\n",
        "impossible\n",
        "1 42 4711 3876\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3756,
    "description": "Efim just received his grade for the last test. He studies in a special school and his grade can be equal to any positive decimal fraction. First he got disappointed, as he expected a way more pleasant result. Then, he developed a tricky plan. Each second, he can ask his teacher to round the grade at any place after the decimal point (also, he can ask to round to the nearest integer). \n\nThere are t seconds left till the end of the break, so Efim has to act fast. Help him find what is the maximum grade he can get in no more than t seconds. Note, that he can choose to not use all t seconds. Moreover, he can even choose to not round the grade at all.\n\nIn this problem, classic rounding rules are used: while rounding number to the n-th digit one has to take a look at the digit n + 1. If it is less than 5 than the n-th digit remain unchanged while all subsequent digits are replaced with 0. Otherwise, if the n + 1 digit is greater or equal to 5, the digit at the position n is increased by 1 (this might also change some other digits, if this one was equal to 9) and all subsequent digits are replaced with 0. At the end, all trailing zeroes are thrown away.\n\nFor example, if the number 1.14 is rounded to the first decimal place, the result is 1.1, while if we round 1.5 to the nearest integer, the result is 2. Rounding number 1.299996121 in the fifth decimal place will result in number 1.3.\n\n\n-----Input-----\n\nThe first line of the input contains two integers n and t (1 \u2264 n \u2264 200 000, 1 \u2264 t \u2264 10^9)\u00a0\u2014 the length of Efim's grade and the number of seconds till the end of the break respectively.\n\nThe second line contains the grade itself. It's guaranteed that the grade is a positive number, containing at least one digit after the decimal points, and it's representation doesn't finish with 0.\n\n\n-----Output-----\n\nPrint the maximum grade that Efim can get in t seconds. Do not print trailing zeroes.\n\n\n-----Examples-----\nInput\n6 1\n10.245\n\nOutput\n10.25\n\nInput\n6 2\n10.245\n\nOutput\n10.3\n\nInput\n3 100\n9.2\n\nOutput\n9.2\n\n\n\n-----Note-----\n\nIn the first two samples Efim initially has grade 10.245. \n\nDuring the first second Efim can obtain grade 10.25, and then 10.3 during the next second. Note, that the answer 10.30 will be considered incorrect.\n\nIn the third sample the optimal strategy is to not perform any rounding at all.",
    "public_tests": {
      "input": [
        "6 1\n10.245\n",
        "6 2\n10.245\n",
        "3 100\n9.2\n"
      ],
      "output": [
        "10.25\n",
        "10.3\n",
        "9.2\n"
      ]
    },
    "private_tests": {
      "input": [
        "6 1\n10.245\n",
        "6 2\n10.245\n",
        "3 100\n9.2\n",
        "12 5\n872.04488525\n",
        "35 8\n984227318.2031144444444444494637612\n",
        "320 142\n2704701300865535.432223312233434114130011113220102420131323010344144201124303144444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444447444444444444444444444444444444615444444482101673308979557675074444444444444446867245414595534444693160202254444449544495367\n",
        "5 10\n1.555\n",
        "6 1\n0.9454\n",
        "7 1000000000\n239.923\n",
        "7 235562\n999.999\n",
        "9 2\n23999.448\n",
        "9 3\n23999.448\n",
        "13 1\n761.044449428\n",
        "3 1\n0.1\n",
        "3 1\n9.9\n",
        "3 1\n0.9\n",
        "31 15\n2707786.24030444444444444724166\n",
        "4 100\n99.9\n",
        "3 10\n9.9\n",
        "22 100\n11111111111111111111.5\n",
        "3 1\n9.5\n",
        "8 100\n9.444445\n",
        "6 2\n999.45\n",
        "3 100\n9.9\n",
        "18 100\n9.4444444444454444\n",
        "16 999\n9595959.95959595\n",
        "4 100\n99.5\n",
        "5 1\n999.9\n",
        "4 1\n5.59\n",
        "4 1\n99.5\n",
        "4 1\n99.9\n",
        "18 6\n102345678999.44449\n",
        "3 3\n9.9\n",
        "5 1\n99.99\n",
        "7 1\n99999.9\n",
        "3 121\n9.9\n",
        "8 6\n9.444445\n",
        "3 100\n8.9\n",
        "10 1\n999.999999\n",
        "5 100\n6.666\n",
        "4 100\n9.99\n",
        "6 1\n9.9999\n",
        "4 10\n99.9\n",
        "5 1\n9.999\n",
        "3 1231\n9.9\n",
        "5 2\n999.9\n",
        "5 100\n144.5\n",
        "5 100\n99.45\n",
        "10 1\n0.50444445\n",
        "7 1\n1.51111\n",
        "5 1\n199.9\n",
        "3 100\n9.5\n",
        "7 1000\n409.659\n",
        "4 10\n99.5\n",
        "4 10\n10.9\n",
        "4 1\n19.5\n"
      ],
      "output": [
        "10.25\n",
        "10.3\n",
        "9.2\n",
        "872.1\n",
        "984227318.2031144445\n",
        "2704701300865535.4322233122334341141300111132201024201313230103441442011243032\n",
        "2\n",
        "1\n",
        "240\n",
        "1000\n",
        "23999.5\n",
        "24000\n",
        "761.04445\n",
        "0.1\n",
        "10\n",
        "1\n",
        "2707786.24031\n",
        "100\n",
        "10\n",
        "11111111111111111112\n",
        "10\n",
        "10\n",
        "1000\n",
        "10\n",
        "10\n",
        "9595960\n",
        "100\n",
        "1000\n",
        "6\n",
        "100\n",
        "100\n",
        "102345679000\n",
        "10\n",
        "100\n",
        "100000\n",
        "10\n",
        "10\n",
        "9\n",
        "1000\n",
        "7\n",
        "10\n",
        "10\n",
        "100\n",
        "10\n",
        "10\n",
        "1000\n",
        "145\n",
        "100\n",
        "1\n",
        "2\n",
        "200\n",
        "10\n",
        "410\n",
        "100\n",
        "11\n",
        "20\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3256,
    "description": "Barr the Bear is playing the game Bits with Swanky Shen!\n\nBits is a very simple game. At the start, a circle of $N$ non-negative integers $A_1$, $A_2$, $A_3$, $\\ldots $, $A_ N$ is shown to both players. That is, to the left of the integer $A_ i$ is the integer $A_{i-1}$ if $i > 1$; and the integer $A_ N$ otherwise. To the right of the integer $A_ i$ is the integer $A_{i+1}$ if $i < N$; and the integer $A_1$ otherwise. Also an integer $K$ is given to both players.\n\nTo win this game, one must divide the circle of integers into exactly $K$ contiguous non-empty sections, such that the bitwise AND of the powers of all sections is maximized. The power of a contiguous section of integers is the bitwise OR of all integers in that section.\n\nBarr the Bear is lazy and knows that you are wise with bits. Hence, he has hired you to help him to win the game!\n\nNote: The binary bitwise operators OR and AND operate on the base-$2$ representation of the integers and correspond to the operators | and & respectively in C++ or Java.\n\n-----Input-----\nThe first line contains integers $N$ and $K$ ($1 \\leq K \\leq N \\leq 5\\cdot 10^5$), namely the number of integers and the number of contiguous non-empty sections required.\n\nThe next line contains $N$ integers, the $i^\\textrm {th}$ of which is the integer $A_ i$ ($0 \\leq A_ i \\leq 10^9$).\n\n-----Output-----\nOutput a single integer in one line: The maximum bitwise AND of the powers of the sections in an optimal division of the circle of integers.\n\n-----Explanation-----\nIn the first sample, the circle is $(2, 3, 4, 1)$. A possible division is $(3, 4)$ and $(1, 2)$. $(3, 4)$ has power $7$ and $(1, 2)$ has power $3$. The bitwise AND of $7$ and $3$ is $3$. Note that a section can possibly wrap around the circle.\n\nIn the second sample, a possible division is $(2, 2, 4)$, $(4)$, $(4, 2)$. The sections\u2019 powers are $6$, $4$ and $6$ respectively, which have bitwise AND of $4$. Note that we require the sections to be contiguous integers, so the division $(2, 4)$, $(2, 4)$, $(2, 4)$ is not permissible.\n\nIn the third sample, we can only have one section. This section will have all the integers, and thus have power $3$.\n\n-----Examples-----\nSample Input 1:\n4 2\n2 3 4 1\nSample Output 1:\n3\n\nSample Input 2:\n6 3\n2 2 2 4 4 4\nSample Output 2:\n4",
    "public_tests": {
      "input": [
        "4 2\n2 3 4 1\n",
        "6 3\n2 2 2 4 4 4\n"
      ],
      "output": [
        "3\n",
        "4\n"
      ]
    },
    "private_tests": {
      "input": [
        "4 2\n2 3 4 1\n",
        "6 3\n2 2 2 4 4 4\n",
        "4 1\n0 1 2 3\n"
      ],
      "output": [
        "3\n",
        "4\n",
        "3\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3018,
    "description": "Two players are playing a game with a set of $K$ six-sided dice. One player calls out a number in the range $K\\ldots 6K$ and the other tries to roll that number. After the first roll, the player is allowed to pick up any number ($0\\ldots K$) of dice and re-roll them.\n\nGiven the number of dice, the target number the player wants to roll, and the set of numbers the player obtained on the first roll, what number of dice should the player pick up to maximize their chances of getting the target number on the second roll?\n\n-----Input-----\nInput begins with a line containing $2$ integers, $K$, the number of dice, and $T$, the target number. The bounds are $2 \\leq K \\leq 24$ and $K \\leq T \\leq 6K$.\n\nThe next line contains $K$ integers, indicating the numbers that were rolled on each of the dice on the first roll. All will be integers in the range $1\\ldots 6$.\n\n-----Output-----\nPrint a single line containing an integer denoting the number of dice that the roller should pick up and re-roll in order to maximize the chances of getting an overall sum of $T$. (The roller will be able to choose which dice to pick up, but you are only asked to print the number of dice, not which ones.)\n\nIf there are more than one numbers of dice that can be picked up to achieve the same probability of getting to $T$, print the smallest such value.\n\n-----Examples-----\nSample Input 1:\n3 9\n5 4 1\nSample Output 1:\n1\n\nSample Input 2:\n4 13\n2 2 2 2\nSample Output 2:\n3\n\nSample Input 3:\n18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\nSample Output 3:\n12",
    "public_tests": {
      "input": [
        "3 9\n5 4 1\n",
        "4 13\n2 2 2 2\n",
        "18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n"
      ],
      "output": [
        "1\n",
        "3\n",
        "12\n"
      ]
    },
    "private_tests": {
      "input": [
        "3 9\n5 4 1\n",
        "4 13\n2 2 2 2\n",
        "18 90\n1 2 3 4 5 6 1 2 3 4 5 6 1 2 3 4 5 6\n",
        "6 21\n1 2 3 4 5 6\n"
      ],
      "output": [
        "1\n",
        "3\n",
        "12\n",
        "0\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3142,
    "description": "Bo\u017eo is a strange little boy. Every day he tires his friends with strange questions. Today\u2019s question is: how many integers in the interval $[A, B]$ are there such that the sum of their digits is $S$, and which is the smallest such number?\n\nWrite a program that answers Bo\u017eo\u2019s question so that he can get some sleep.\n\n-----Input-----\nThe input contains three integers $A$, $B$ and $S$ ($1 \\le A \\le B < 10^{15}$, $1 \\le S \\le 135$).\n\n-----Output-----\nThe first line should contain the number of integers in the interval with the digit sum equal to $S$.\n\nThe second line should contain the smallest such integer.\n\nThe input data will guarantee that the first number is at least $1$.\n\n-----Examples-----\nSample Input 1:\n1 9 5\nSample Output 1:\n1\n5\n\nSample Input 2:\n1 100 10\nSample Output 2:\n9\n19",
    "public_tests": {
      "input": [
        "1 9 5\n",
        "1 100 10\n"
      ],
      "output": [
        "1\n5\n",
        "9\n19\n"
      ]
    },
    "private_tests": {
      "input": [
        "1 9 5\n",
        "1 100 10\n",
        "11111 99999 24\n"
      ],
      "output": [
        "1\n5\n",
        "9\n19\n",
        "5445\n11499\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3259,
    "description": "Aladin was walking down the path one day when he found the strangest thing: $N$ empty boxes right next to a weird alien machine. After a bit of fumbling around he got the machine to do something. The machine now accepts 4 integers $L$, $R$, $A$ and $B$. After that hitting the big red glowing button labeled \u201cNE DIRAJ\u201d1 causes the machine to go crazy and follow the next routine:\n - Set the number of stones in the box labeled $L$ to $A$ modulo $B$.\n - It procedes to fly to the box labeled $L+1$, and set the number of stones there to $(2\\cdot A) \\mod B$.\n - It procedes to fly to the box labeled $L+2$, and set the number of stones there to $(3\\cdot A) \\mod B$.\n - Generaly, it visits each box labeled between $L$ and $R$, and set the number of stones there to $( (X - L + 1)\\cdot A) \\mod B$, where $X$ is the box label.\n - After it visits the box labeled $R$. It settles down for further instructions.\n\nDuring the game Aladin wonders what is the total number of stones in some range of boxes.\n\nWrite a program that simulates the device and answers Aladin\u2019s questions.\n\n-----Input-----\nThe first line contains two integers $N$ and $Q$ ($1 \\leq N \\leq 1000000000$) ($1 \\leq Q \\leq 50000$), number of boxes and number of queries.\n\nThe next $Q$ lines contain information about the simulation.\n\nIf the line starts with 1, than it follows the format \u201c1 $L$ $R$ $A$ $B$\u201d ($1 \\leq L \\leq R \\leq N$) ($1 \\leq A, B \\leq 1000000$), meaning that Aladin keyed in numbers $L$, $R$, $A$ and $B$ in the device and allowed the device to do its job.\n\nIf the line starts with 2, then it follows the format \u201c2 L R\u201d ($1 \\leq L \\leq R \\leq N$), meaning that Aladin wonders how many stones in total are ther stones are in boxes labeled $L$ to $R$ (inclusive).\n\n-----Output-----\nFor each query beginning with 2 output the answer to that particular query. Queries should be processed in the order they are given in the input.First sample description\n\nThe boxes start containing $\\{ 0, 0, 0, 0, 0, 0\\} $, 0 stones in total. After that the device sets the stones to $\\{ 1 \\mod 2, 2 \\mod 2, 3 \\mod 2, 4 \\mod 2, 5 \\mod 2, 0\\} $ = $\\{ 1,0,1,0,1,0\\} $, or 3 stones in total.\n\n-----Examples-----\nSample Input 1:\n6 3\n2 1 6\n1 1 5 1 2\n2 1 6\nSample Output 1:\n0\n3\n\nSample Input 2:\n4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\nSample Output 2:\n3\n2\n1\n0",
    "public_tests": {
      "input": [
        "6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n",
        "4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n"
      ],
      "output": [
        "0\n3\n",
        "3\n2\n1\n0\n"
      ]
    },
    "private_tests": {
      "input": [
        "6 3\n2 1 6\n1 1 5 1 2\n2 1 6\n",
        "4 5\n1 1 4 3 4\n2 1 1\n2 2 2\n2 3 3\n2 4 4\n",
        "4 4\n1 1 4 7 9\n2 1 4\n1 1 4 1 1\n2 1 4\n"
      ],
      "output": [
        "0\n3\n",
        "3\n2\n1\n0\n",
        "16\n0\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3211,
    "description": "In the country of Elecuador, a very strange voting system is used. When it is time for the election, each one of the $n$ citizens will arrive in some order to the voting station. There are only two parties to vote for, conveniently named $1$ and $2$. When arriving to the voting station, a person will vote for one of the parties, unless they are a teller. The tellers do not vote, instead they count how many votes each of the two parties has at the time the teller arrives, and if one of the parties has more votes than the other then that party receives one point (if the two parties have the same number of votes, neither of them receives a point). The party with the most points at the end wins. If both parties end up with the same number of points, chaos ensues.\n\nAs the president of Elecuador representing party $1$, you are worried that the coming election will be the end of your reign. Fortunately, you have a plan to stop this from happening. Being the president, you know who everyone in the country will vote for, who the tellers are, and in what order everyone will arrive to the voting station. By making the right phone calls, you can also affect when the tellers arrive. In one move, it is possible to swap a teller with an adjacent person in the list of arrivals to the voting station. Note that it is not possible to swap two adjacent non-tellers. What is the minimum number of swaps necessary to ensure that party $1$ wins?\n\n-----Input-----\nThe input starts with a line containing an integer $n$ $n$ ($1 \\le n \\le 5000$), the number of citizens in Elecuador. Then follows a line containing a string $s$ of length $n$, consisting of the characters $0$, $1$, and $2$. This string represents the citizens in the order they arrive to the voting station. If the $i$\u2019th character $s_ i$ is $1$ or $2$, it means that the $i$\u2019th citizen will vote for party $1$ or $2$, respectively. If $s_ i$ is $0$, it means that the $i$\u2019th citizen is a teller.\n\n-----Output-----\nIf it is possible to ensure victory, output one integer, the minimum number of swaps necessary. Otherwise, output \u201cimpossible\u201d.\n\n-----Examples-----\nSample Input 1:\n8\n12210020\nSample Output 1:\n4\n\nSample Input 2:\n4\n1111\nSample Output 2:\nimpossible",
    "public_tests": {
      "input": [
        "8\n12210020\n",
        "4\n1111\n"
      ],
      "output": [
        "4\n",
        "impossible\n"
      ]
    },
    "private_tests": {
      "input": [
        "8\n12210020\n",
        "4\n1111\n",
        "11\n00211222220\n"
      ],
      "output": [
        "4\n",
        "impossible\n",
        "5\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3148,
    "description": "Lifeguards have a very important job. They prevent people from drowning and allow millions of people every year to experience the joys of water. You are one of these lifeguards, and you take your job very seriously. If regulations were up to you, everyone would have to wear life vests when in the water, which is why you are part of the Buoyancy Activists Promoting Change. As a result of your persistent lobbying, the pool at which you are a lifeguard has decided to hire a second lifeguard. You are very happy with the increased security at your local swimming pool.\n\nYou get along quite well with the new lifeguard, but you discover you have not prepared his arrival properly; on the first day of working together you have some trouble figuring out who is supposed to watch which swimmers. This is completely unacceptable and could lead to casualties! You immediately start working on this problem: following the mantra \u201cshared responsibility is no responsibility\u201d, you try to divide the people in the swimming pool into two groups as follows: any swimmer is the responsibility of the lifeguard closest to this swimmer. Thus, knowing the exact positions of all swimmers, you and your coworker both find a position such that both of you are responsible for the exact same number of swimmers. Furthermore, you want at most one swimmer for whom the distance to you and your coworker is equal. This swimmer counts for both lifeguards.\n\nAs you and your coworker are amazing sprinters, you do not care for the actual distance between you and the swimmers, only that the swimmers are divided nicely into two equally sized groups.\n\n-----Input-----\n - The first line contains an integer $2\\leq n \\leq 10^5$, the number of swimmers.\n - Each of the next $n$ lines contains two integers $-10^9\\leq x\\leq 10^9$ and $-10^9\\leq y\\leq 10^9$, the position of the swimmer.\n\n-----Output-----\nPrint two lines, both containing integers $x$ and $y$ with $-10^{18}\\leq x,y\\leq 10^{18}$, the locations of you and your coworker.\n\nIf there are multiple valid solutions, you may output any one of them.\n\n-----Examples-----\nSample Input 1:\n5\n0 0\n0 1\n1 0\n0 -1\n-1 0\nSample Output 1:\n-3 -1\n3 1\n\nSample Input 2:\n4\n2 4\n6 -1\n3 5\n-1 -1\nSample Output 2:\n3 4\n3 -1",
    "public_tests": {
      "input": [
        "5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n",
        "4\n2 4\n6 -1\n3 5\n-1 -1\n"
      ],
      "output": [
        "-3 -1\n3 1\n",
        "3 4\n3 -1\n"
      ]
    },
    "private_tests": {
      "input": [
        "5\n0 0\n0 1\n1 0\n0 -1\n-1 0\n",
        "4\n2 4\n6 -1\n3 5\n-1 -1\n",
        "4\n5 5\n5 -5\n-5 5\n-5 -5\n"
      ],
      "output": [
        "-3 -1\n3 1\n",
        "3 4\n3 -1\n",
        "1 2\n-1 2\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3924,
    "description": "Enough is enough. Too many times it happened that Vasya forgot to dispose of garbage and his apartment stank afterwards. Now he wants to create a garbage disposal plan and stick to it.\n\nFor each of next $n$ days Vasya knows $a_i$ \u2014 number of units of garbage he will produce on the $i$-th day. Each unit of garbage must be disposed of either on the day it was produced or on the next day. Vasya disposes of garbage by putting it inside a bag and dropping the bag into a garbage container. Each bag can contain up to $k$ units of garbage. It is allowed to compose and drop multiple bags into a garbage container in a single day.\n\nBeing economical, Vasya wants to use as few bags as possible. You are to compute the minimum number of bags Vasya needs to dispose of all of his garbage for the given $n$ days. No garbage should be left after the $n$-th day.\n\n\n-----Input-----\n\nThe first line of the input contains two integers $n$ and $k$ ($1 \\le n \\le 2\\cdot10^5, 1 \\le k \\le 10^9$) \u2014 number of days to consider and bag's capacity. The second line contains $n$ space separated integers $a_i$ ($0 \\le a_i \\le 10^9$) \u2014 the number of units of garbage produced on the $i$-th day.\n\n\n-----Output-----\n\nOutput a single integer \u2014 the minimum number of bags Vasya needs to dispose of all garbage. Each unit of garbage should be disposed on the day it was produced or on the next day. No garbage can be left after the $n$-th day. In a day it is allowed to compose and drop multiple bags.\n\n\n-----Examples-----\nInput\n3 2\n3 2 1\n\nOutput\n3\n\nInput\n5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n\nOutput\n5000000000\n\nInput\n3 2\n1 0 1\n\nOutput\n2\n\nInput\n4 4\n2 8 4 1\n\nOutput\n4",
    "public_tests": {
      "input": [
        "3 2\n3 2 1\n",
        "5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n",
        "3 2\n1 0 1\n",
        "4 4\n2 8 4 1\n"
      ],
      "output": [
        "3\n",
        "5000000000\n",
        "2\n",
        "4\n"
      ]
    },
    "private_tests": {
      "input": [
        "3 2\n3 2 1\n",
        "5 1\n1000000000 1000000000 1000000000 1000000000 1000000000\n",
        "3 2\n1 0 1\n",
        "4 4\n2 8 4 1\n",
        "1 1\n0\n",
        "1 1\n1\n",
        "4 5\n5 5 5 5\n",
        "5 2\n3 1 0 3 1\n",
        "3 2\n1 0 0\n",
        "3 2\n0 0 1\n",
        "161 5\n17 0 3 8 4 8 8 14 15 7 5 17 2 5 7 1 3 16 5 13 6 15 12 15 18 1 0 13 19 18 4 11 13 7 7 1 3 15 15 10 4 14 3 3 10 10 12 1 2 14 4 1 8 19 0 11 2 11 16 7 4 4 17 16 9 17 6 10 5 16 4 6 7 0 1 9 10 15 12 19 17 5 4 4 16 19 7 9 17 11 1 0 0 13 14 4 15 10 4 7 15 13 6 3 8 14 15 13 19 17 7 19 10 5 10 17 16 2 5 9 16 16 9 3 6 8 19 0 1 18 6 17 3 17 6 12 6 16 6 6 3 14 5 16 15 9 0 12 10 5 4 8 16 15 11 14 6 13 6 3 1\n",
        "136 2\n11 13 12 17 7 16 15 2 19 12 17 10 4 17 1 6 14 3 9 6 6 13 14 1 15 15 2 14 9 2 18 9 0 3 8 4 3 11 10 8 9 6 2 17 18 2 5 1 6 15 7 12 11 9 8 10 5 18 13 5 19 7 18 19 14 10 17 17 13 6 9 10 12 6 0 3 14 15 3 7 18 5 7 14 3 2 9 14 11 4 15 3 18 9 15 6 16 13 5 5 0 19 1 5 14 19 11 16 12 4 15 19 1 14 5 16 18 4 17 10 5 5 17 6 1 5 11 12 4 8 14 3 17 18 18 10\n",
        "110 2\n6 14 13 14 2 17 2 11 4 16 17 4 14 9 2 10 5 10 13 8 14 11 7 14 12 10 11 15 0 19 19 19 15 19 1 18 4 16 4 13 2 18 0 11 17 14 9 1 11 16 9 14 1 8 16 9 8 17 10 16 6 18 8 3 18 14 15 15 1 15 14 14 6 11 11 8 9 7 13 14 19 14 17 3 10 13 19 0 13 6 17 6 4 6 16 15 10 3 18 10 18 4 4 8 8 4 19 19 17 11\n",
        "185 2\n0 14 2 11 5 17 9 11 8 12 8 17 17 0 4 15 4 17 8 1 2 10 8 0 8 16 1 7 10 4 0 18 2 15 2 1 4 1 10 11 6 10 19 5 5 18 2 1 15 17 0 4 12 19 12 8 11 4 7 15 13 0 9 6 2 6 5 2 17 4 7 9 11 17 1 13 4 6 4 10 1 14 0 13 17 16 10 5 7 19 19 9 2 2 17 17 11 6 11 15 4 17 18 18 14 9 15 10 10 10 14 18 2 5 8 4 3 2 12 3 14 4 12 19 18 13 14 12 9 5 15 17 9 12 1 5 15 13 13 5 19 5 3 2 2 13 9 8 0 8 12 16 10 4 7 19 0 5 6 17 13 15 14 6 3 2 18 11 15 9 6 0 3 3 17 5 10 15 6 15 13 2 16 19 10\n",
        "159 2\n14 7 11 8 0 5 16 0 4 17 8 10 7 12 6 0 15 4 12 15 10 8 9 13 5 11 2 8 1 1 1 8 17 10 15 15 4 6 4 9 11 11 18 11 5 10 14 8 19 18 2 14 14 18 1 7 14 12 4 6 9 3 19 10 6 19 16 1 5 14 12 13 17 3 12 6 8 18 14 17 2 14 2 3 4 7 0 11 0 13 12 13 0 18 18 6 4 8 12 13 2 3 1 1 8 1 3 14 3 17 1 18 12 14 4 3 5 17 4 3 3 14 7 1 13 10 6 4 12 3 4 11 3 13 4 3 18 10 15 12 0 19 19 6 18 17 7 1 11 18 12 13 13 3 1 11 18 11 15\n",
        "2 3\n2 7\n",
        "3 6\n2 3 3\n",
        "4 4\n3 6 2 3\n",
        "7 16\n44 3 9 12 3 1 24\n",
        "1 1\n10\n",
        "1 10\n1\n",
        "1 10\n2\n",
        "1 10\n0\n",
        "3 10\n0 5 5\n",
        "3 10\n5 5 0\n",
        "3 10\n5 0 5\n"
      ],
      "output": [
        "3\n",
        "5000000000\n",
        "2\n",
        "4\n",
        "0\n",
        "1\n",
        "4\n",
        "4\n",
        "1\n",
        "1\n",
        "301\n",
        "671\n",
        "596\n",
        "846\n",
        "722\n",
        "3\n",
        "2\n",
        "4\n",
        "7\n",
        "10\n",
        "1\n",
        "1\n",
        "0\n",
        "1\n",
        "1\n",
        "2\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3223,
    "description": "Anton, a young mathematician, comes from the cold region that is northern Sweden. He likes it there, since there are a lot of trees. Lately, however, this has made him a bit sad, since he can\u2019t see the forest because of all the trees. Therefore, he has asked you to construct a forest.\n\nSince Anton is a mathematician, he doesn\u2019t want just any forest \u2013 he wants a graph theoretical forest. A forest is a (possibly disconnected) graph without cycles \u2013 i.e., a union of disjoint trees.\n\nAnton has already decided how many vertices he wants in his forest, as well as the degree of each vertex. Now, it is your task to construct a forest according to his wishes, or determine that no such forest exists.\n\n-----Input-----\nThe first line of the input is a single integer $0 \\le V \\le 100$, the number of vertices in his forest.\n\nThe next line contains $V$ integers $d_1, d_2, \\ldots , d_ V$ ($0 \\le d_ i \\le 100$ for all $i$). These are the degrees which Anton wants the vertices to have.\n\n-----Output-----\nThe first line of output should be IMPOSSIBLE if it is impossible to construct such a forest.\n\nOtherwise, the first line should be POSSIBLE. The next lines should then contain two integers $1 \\le a, b \\le V$ each, denoting an edge between vertices $a$ and $b$. Note that the vertex with number $a$ must have exactly degree $d_ a$, i.e. the ordering of the vertices is important.\n\n-----Examples-----\nSample Input 1:\n3\n1 1 2\nSample Output 1:\nPOSSIBLE\n1 3\n2 3\n\nSample Input 2:\n2\n1 2\nSample Output 2:\nIMPOSSIBLE",
    "public_tests": {
      "input": [
        "3\n1 1 2\n",
        "2\n1 2\n"
      ],
      "output": [
        "POSSIBLE\n1 3\n2 3\n",
        "IMPOSSIBLE\n"
      ]
    },
    "private_tests": {
      "input": [
        "3\n1 1 2\n",
        "2\n1 2\n",
        "3\n2 2 2\n"
      ],
      "output": [
        "POSSIBLE\n1 3\n2 3\n",
        "IMPOSSIBLE\n",
        "IMPOSSIBLE\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3143,
    "description": "It is the first day of school at Liking University, or \u201cLku\u201d for short. Lku administration is very strict with attendance, especially on the first day. In order to verify everyone\u2019s attendance, the Lku\u2019s principal has made an attendance list. He then asked to all students to stand in line to his office in order to mark everyone\u2019s attendance.\n\nThe principal would go through the list, top-down and inspect if the person in front of him was the one currently on top the list. This inspection takes exactly one second. If it was, then the principal would strike the name from the list. Regardless of whether the student\u2019s name would match or not with the one on top the list, the student in front of the queue would be asked to go somewhere somewhere else in the line. This implies going to an arbitrary position in the line, e.g. going to the back, somewhere in the middle or the front (continue standing on the same spot). The student can decide which position he or she wants to go to.\n\nThe list itself was written hastily and had several flaws \u2013 some students could be left out from it and some students\u2019 names could appear on the list more than once. Knowing the contents of the list and the position of each student within the initial line, what is the minimal time that it can take for every name to be stricken from the attendance list if the students choose their new positions in the queue optimally?\n\n-----Input-----\nThe first line of input contains two integers $N$ and $M$ $(1 \\leq N, M \\leq 3 \\cdot 10^5)$ \u2013 the total number of students in the line and the number of names on the list respectively.\n\nThe second line contains $M$ integers $a_1, a_2, \\dots , a_ M$ $(1 \\leq a_ i \\leq N)$ \u2013 the names of students as they appear in the list (top-down).\n\nThe third line contains $N$ integers $b_1, b_2, \\dots , b_ N$ $(1 \\leq b_ i \\leq N)$ \u2013 the initial order of the students as they appear in line, where $b_ i$ is the name of $i$:th student in the line ($b_1$ is the name of the first student in the line).\n\nThe students are numbered between $1$ and $N$.\n\n-----Output-----\nThe output consists of two lines:\n - The first line of output is $K$ \u2013 the minimal number of inspections that the principal needs to do.\n - The second line of the output consists of $K$ integers. For every inspection, output a number for which position in the line the student has to go back to after the inspection.\n\nIf there are multiple solutions which result in minimal number of inspections, then output any of them.\n\n-----Examples-----\nSample Input 1:\n1 1\n1\n1\nSample Output 1:\n1\n1 \n\nSample Input 2:\n4 5\n4 1 2 4 4\n4 3 2 1\nSample Output 2:\n7\n4 4 2 4 4 1 4",
    "public_tests": {
      "input": [
        "1 1\n1\n1\n",
        "4 5\n4 1 2 4 4\n4 3 2 1\n"
      ],
      "output": [
        "1\n1 \n",
        "7\n4 4 2 4 4 1 4 \n"
      ]
    },
    "private_tests": {
      "input": [
        "1 1\n1\n1\n",
        "4 5\n4 1 2 4 4\n4 3 2 1\n",
        "2 2\n1 2\n2 1\n"
      ],
      "output": [
        "1\n1 \n",
        "7\n4 4 2 4 4 1 4 \n",
        "3\n2 2 2 \n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3827,
    "description": "A has a string consisting of some number of lowercase English letters 'a'. He gives it to his friend B who appends some number of letters 'b' to the end of this string. Since both A and B like the characters 'a' and 'b', they have made sure that at this point, at least one 'a' and one 'b' exist in the string.\n\nB now gives this string to C and he appends some number of letters 'c' to the end of the string. However, since C is a good friend of A and B, the number of letters 'c' he appends is equal to the number of 'a' or to the number of 'b' in the string. It is also possible that the number of letters 'c' equals both to the number of letters 'a' and to the number of letters 'b' at the same time.\n\nYou have a string in your hands, and you want to check if it is possible to obtain the string in this way or not. If it is possible to obtain the string, print \"YES\", otherwise print \"NO\" (without the quotes).\n\n\n-----Input-----\n\nThe first and only line consists of a string $S$ ($ 1 \\le |S| \\le 5\\,000 $). It is guaranteed that the string will only consist of the lowercase English letters 'a', 'b', 'c'.\n\n\n-----Output-----\n\nPrint \"YES\" or \"NO\", according to the condition.\n\n\n-----Examples-----\nInput\naaabccc\n\nOutput\nYES\n\nInput\nbbacc\n\nOutput\nNO\n\nInput\naabc\n\nOutput\nYES\n\n\n\n-----Note-----\n\nConsider first example: the number of 'c' is equal to the number of 'a'. \n\nConsider second example: although the number of 'c' is equal to the number of the 'b', the order is not correct.\n\nConsider third example: the number of 'c' is equal to the number of 'b'.",
    "public_tests": {
      "input": [
        "aaabccc\n",
        "bbacc\n",
        "aabc\n"
      ],
      "output": [
        "YES\n",
        "NO\n",
        "YES\n"
      ]
    },
    "private_tests": {
      "input": [
        "aaabccc\n",
        "bbacc\n",
        "aabc\n",
        "aabbcc\n",
        "aaacccbb\n",
        "abc\n",
        "acba\n",
        "bbabbc\n",
        "bbbabacca\n",
        "aabcbcaca\n",
        "aaaaabbbbbb\n",
        "c\n",
        "cc\n",
        "bbb\n",
        "bc\n",
        "ccbcc\n",
        "aaa\n",
        "aaccaa\n",
        "a\n",
        "b\n",
        "abca\n",
        "aabbcccc\n",
        "abac\n",
        "abcc\n",
        "abcb\n",
        "aacc\n",
        "aabbaacccc\n",
        "aabb\n",
        "ac\n",
        "abbacc\n",
        "abacc\n",
        "ababc\n",
        "aa\n",
        "aabaccc\n",
        "bbcc\n",
        "aaabcbc\n",
        "acbbc\n",
        "babc\n",
        "bbbcc\n",
        "bbc\n",
        "abababccc\n",
        "ccbbaa\n"
      ],
      "output": [
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3947,
    "description": "Artem has an array of n positive integers. Artem decided to play with it. The game consists of n moves. Each move goes like this. Artem chooses some element of the array and removes it. For that, he gets min(a, b) points, where a and b are numbers that were adjacent with the removed number. If the number doesn't have an adjacent number to the left or right, Artem doesn't get any points. \n\nAfter the element is removed, the two parts of the array glue together resulting in the new array that Artem continues playing with. Borya wondered what maximum total number of points Artem can get as he plays this game.\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 5\u00b710^5) \u2014 the number of elements in the array. The next line contains n integers a_{i} (1 \u2264 a_{i} \u2264 10^6) \u2014 the values of the array elements.\n\n\n-----Output-----\n\nIn a single line print a single integer \u2014 the maximum number of points Artem can get.\n\n\n-----Examples-----\nInput\n5\n3 1 5 2 6\n\nOutput\n11\n\nInput\n5\n1 2 3 4 5\n\nOutput\n6\n\nInput\n5\n1 100 101 100 1\n\nOutput\n102",
    "public_tests": {
      "input": [
        "5\n3 1 5 2 6\n",
        "5\n1 2 3 4 5\n",
        "5\n1 100 101 100 1\n"
      ],
      "output": [
        "11\n",
        "6\n",
        "102\n"
      ]
    },
    "private_tests": {
      "input": [
        "5\n3 1 5 2 6\n",
        "5\n1 2 3 4 5\n",
        "5\n1 100 101 100 1\n",
        "10\n96 66 8 18 30 48 34 11 37 42\n",
        "1\n87\n",
        "2\n93 51\n",
        "3\n31 19 5\n",
        "4\n86 21 58 60\n",
        "5\n21 6 54 69 32\n",
        "6\n46 30 38 9 65 23\n",
        "7\n82 60 92 4 2 13 15\n",
        "8\n77 84 26 34 17 56 76 3\n",
        "9\n72 49 39 50 68 35 75 94 56\n",
        "10\n4 2 2 4 1 2 2 4 2 1\n",
        "1\n4\n",
        "2\n3 1\n",
        "3\n1 2 1\n",
        "4\n2 3 1 2\n",
        "5\n2 6 2 1 2\n",
        "6\n1 7 3 1 6 2\n",
        "7\n2 1 2 2 2 2 2\n",
        "8\n3 4 3 1 1 3 4 1\n",
        "9\n4 5 2 2 3 1 3 3 5\n"
      ],
      "output": [
        "11\n",
        "6\n",
        "102\n",
        "299\n",
        "0\n",
        "0\n",
        "5\n",
        "118\n",
        "74\n",
        "145\n",
        "129\n",
        "279\n",
        "435\n",
        "21\n",
        "0\n",
        "0\n",
        "1\n",
        "4\n",
        "6\n",
        "12\n",
        "10\n",
        "15\n",
        "23\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3208,
    "description": "Rookie Pirate Captain Jack Albatross has secretly laid anchor in a hidden bay not far from Port Wine, the local meeting point for grizzled pirates and denizens of the sea. Disguising as a messenger, you have infiltrated the service of the dreaded legendary Captain Stevie, and you are entrusted with carrying small encrypted messages between Captain Stevie and his staff of shipmates. Your task is to break the encryption of the messages in aid of young Captain Albatross, giving him a much needed edge in his quest for peg-legged fame. Fortunately, you (in contrast to Captain Albatross) have been around for a while and you\u2019ve come to know what words to expect in written pirate messages. The following is a table of words having common occurrences:\n\n\u201cbe\u201d\n\n\u201cour\u201d\n\n\u201crum\u201d\n\n\u201cwill\u201d\n\n\u201cdead\u201d\n\n\u201chook\u201d\n\n\u201cship\u201d\n\n\u201cblood\u201d\n\n\u201csable\u201d\n\n\u201cavenge\u201d\n\n\u201cparrot\u201d\n\n\u201ccaptain\u201d\n\nIn a (mixed alphabet) substitution cipher, each letter of the plain text is replaced with another, in this case arbitrary but unique, letter from the alphabet. Given a text encrypted with a substitution cipher and the given set of the twelve known words above, your task is to decode the encrypted text and provide us and Captain Albatross with the plain text. This can be accomplished if and only if there is a unique substitution mapping from the encrypted letters to plain text letters such that\n - a subset $S$ of the twelve words show up in the plain text, and\n - the number of different letters in the words in $S$ is equal to the number of different letters in the encrypted text.\n\nNote that not all the known words may be present in the plain text and that replacements are not mutual (\u2019a\u2019 being encrypted by \u2019h\u2019 does not necessarily mean that \u2019h\u2019 is encrypted by \u2019a\u2019).\n\n-----Input-----\nThe input contains the encrypted text on one line. The text contains at most 200 characters from the set \u2019a\u2019, \u2026, \u2019z\u2019, \u2019 \u2019. Only the letters \u2019a\u2019, \u2026, \u2019z\u2019 of the plain text are encrypted, the spaces are kept unencrypted.\n\n-----Output-----\nThe decrypted plain text if possible, or the string \u201cImpossible\u201d if the text cannot be uniquely decrypted using the set of known words.\n\n-----Examples-----\nSample Input 1:\nex eoii jpxbmx cvz uxju sjzzcn jzz\n\nSample Output 1:\nwe will avenge our dead parrot arr\n\nSample Input 2:\nwl jkd\n\nSample Output 2:\nImpossible",
    "public_tests": {
      "input": [
        "ex eoii jpxbmx cvz uxju sjzzcn jzz\n\n\n",
        "wl jkd\n\n\n"
      ],
      "output": [
        "we will avenge our dead parrot arr\n",
        "Impossible\n"
      ]
    },
    "private_tests": {
      "input": [
        "ex eoii jpxbmx cvz uxju sjzzcn jzz\n\n\n",
        "wl jkd\n\n",
        "dyd jkl cs\n\n"
      ],
      "output": [
        "we will avenge our dead parrot arr\n",
        "Impossible\n",
        "Impossible\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3316,
    "description": "You and your friends are in New York and are planning to go see a broadway musical. Unfortunately, New York being New York, the tickets are just a tiny bit expensive. But one of the shows has a ticket lottery each night where impecunious people such as yourself have a chance to win the right to buy slightly less expensive tickets to good seats. \n\nThe lottery operates as follows. First, everyone interested enters the lottery. Then, $n$ lucky winners are drawn, and each of these is offered to buy up to $t$ tickets.\n\nGiven the number of people $p$ in your group (all of which entered the lottery) and the total number of people $m$ that entered the lottery, what is the probability that you will be able to get tickets for your entire group? Assume that the $n$ lucky winners are chosen uniformly at random from the $m$ people that entered the lottery, and that each person can win at most once.\n\n-----Input-----\nThe input consists of a single line containing four integers:\n - $1 \\le m \\le 1000$: the total number of people who entered the lottery.\n - $1 \\le n \\le m$: the total number of winners drawn.\n - $1 \\le t \\le 100$: the number of tickets each winner is allowed to buy.\n - $1 \\le p \\le m$: the number of people in your group.\n\n-----Output-----\nOutput a single line containing the probability that your entire group can get tickets to the show. This probability should be given with an absolute error of at most $10^{-9}$.\n\n-----Examples-----\nSample Input 1:\n100 10 2 1\nSample Output 1:\n0.1\n\nSample Input 2:\n100 10 2 2\nSample Output 2:\n0.1909090909",
    "public_tests": {
      "input": [
        "100 10 2 1\n",
        "100 10 2 2\n"
      ],
      "output": [
        "0.1\n",
        "0.1909090909\n"
      ]
    },
    "private_tests": {
      "input": [
        "100 10 2 1\n",
        "100 10 2 2\n",
        "10 10 5 1\n"
      ],
      "output": [
        "0.1\n",
        "0.1909090909\n",
        "1.0000000000\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3731,
    "description": "Sometimes Mister B has free evenings when he doesn't know what to do. Fortunately, Mister B found a new game, where the player can play against aliens.\n\nAll characters in this game are lowercase English letters. There are two players: Mister B and his competitor.\n\nInitially the players have a string s consisting of the first a English letters in alphabetical order (for example, if a = 5, then s equals to \"abcde\").\n\nThe players take turns appending letters to string s. Mister B moves first.\n\nMister B must append exactly b letters on each his move. He can arbitrary choose these letters. His opponent adds exactly a letters on each move.\n\nMister B quickly understood that his opponent was just a computer that used a simple algorithm. The computer on each turn considers the suffix of string s of length a and generates a string t of length a such that all letters in the string t are distinct and don't appear in the considered suffix. From multiple variants of t lexicographically minimal is chosen (if a = 4 and the suffix is \"bfdd\", the computer chooses string t equal to \"aceg\"). After that the chosen string t is appended to the end of s.\n\nMister B soon found the game boring and came up with the following question: what can be the minimum possible number of different letters in string s on the segment between positions l and r, inclusive. Letters of string s are numerated starting from 1.\n\n\n-----Input-----\n\nFirst and only line contains four space-separated integers: a, b, l and r (1 \u2264 a, b \u2264 12, 1 \u2264 l \u2264 r \u2264 10^9) \u2014 the numbers of letters each player appends and the bounds of the segment.\n\n\n-----Output-----\n\nPrint one integer \u2014 the minimum possible number of different letters in the segment from position l to position r, inclusive, in string s.\n\n\n-----Examples-----\nInput\n1 1 1 8\n\nOutput\n2\nInput\n4 2 2 6\n\nOutput\n3\nInput\n3 7 4 6\n\nOutput\n1\n\n\n-----Note-----\n\nIn the first sample test one of optimal strategies generate string s = \"abababab...\", that's why answer is 2.\n\nIn the second sample test string s = \"abcdbcaefg...\" can be obtained, chosen segment will look like \"bcdbc\", that's why answer is 3.\n\nIn the third sample test string s = \"abczzzacad...\" can be obtained, chosen, segment will look like \"zzz\", that's why answer is 1.",
    "public_tests": {
      "input": [
        "1 1 1 8\n",
        "4 2 2 6\n",
        "3 7 4 6\n"
      ],
      "output": [
        "2",
        "3",
        "1"
      ]
    },
    "private_tests": {
      "input": [
        "1 1 1 8\n",
        "4 2 2 6\n",
        "3 7 4 6\n",
        "4 5 1 1\n",
        "12 12 1 1000\n",
        "12 1 1000 1000\n",
        "3 4 701 703\n",
        "12 12 13 1000000000\n",
        "3 4 999999999 1000000000\n",
        "5 6 1000000000 1000000000\n",
        "1 1 1 1\n",
        "12 1 100000011 100000024\n",
        "10 12 220000011 220000032\n",
        "1 1 1 1000000000\n",
        "1 1 999999999 1000000000\n",
        "1 1 1000000000 1000000000\n",
        "12 12 1 24\n",
        "12 12 876543210 1000000000\n",
        "5 11 654321106 654321117\n",
        "5 11 654321117 654321140\n",
        "9 12 654321114 654321128\n",
        "5 12 654321101 654321140\n",
        "2 12 654321104 654321122\n",
        "6 1 654321100 654321115\n",
        "2 1 654321122 654321129\n",
        "6 2 654321100 654321140\n",
        "6 2 654321113 654321123\n",
        "1 7 654321103 654321105\n",
        "5 3 654321111 654321117\n",
        "1 3 654321122 654321140\n",
        "5 8 654321118 654321137\n",
        "5 8 654321103 654321106\n",
        "9 8 654321109 654321126\n",
        "2 2 987654333 987654335\n",
        "4 8 987654341 987654343\n",
        "3 12 987654345 987654347\n",
        "8 1 987654349 987654354\n",
        "6 8 987654322 987654327\n",
        "6 10 987654330 987654337\n",
        "11 4 987654330 987654343\n",
        "10 7 987654339 987654340\n",
        "12 12 987654321 987654328\n",
        "3 10 498103029 647879228\n",
        "11 3 378541409 796916287\n",
        "3 3 240953737 404170887\n",
        "3 8 280057261 834734290\n",
        "7 8 305686738 573739036\n",
        "3 8 36348920 167519590\n",
        "10 2 1 1000000000\n",
        "4 1 1 100000\n",
        "2 1 288 300\n",
        "5 1 1 100\n",
        "3 3 3 8\n",
        "5 1 1 100000\n",
        "5 1 1 1000\n",
        "6 1 1 10000\n",
        "12 1 1 100\n",
        "2 1 1 1000000\n",
        "10 1 100 1000000000\n",
        "2 2 7 12\n",
        "12 1 1 1000\n",
        "4 1 1 9\n",
        "5 2 5 1000\n",
        "3 1 4 10\n",
        "12 1 1 1000000\n",
        "10 5 1 1000000000\n",
        "10 10 1999 3998\n",
        "3 1 1 1000\n",
        "10 1 1 21\n",
        "5 3 15 18\n",
        "4 4 2 10\n"
      ],
      "output": [
        "2",
        "3",
        "1",
        "1",
        "13",
        "1",
        "3",
        "13",
        "1",
        "1",
        "1",
        "13",
        "11",
        "2",
        "1",
        "1",
        "12",
        "13",
        "4",
        "6",
        "4",
        "6",
        "3",
        "11",
        "3",
        "10",
        "7",
        "2",
        "6",
        "2",
        "6",
        "1",
        "10",
        "2",
        "1",
        "3",
        "6",
        "3",
        "2",
        "12",
        "2",
        "4",
        "4",
        "19",
        "4",
        "4",
        "8",
        "4",
        "18",
        "7",
        "3",
        "9",
        "3",
        "9",
        "9",
        "11",
        "23",
        "3",
        "19",
        "3",
        "23",
        "7",
        "8",
        "4",
        "23",
        "15",
        "11",
        "5",
        "19",
        "3",
        "4"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3136,
    "description": "Greg Brandon Sr. is working at a shipping company in Redmond that specializes in shipping Chromium. Redmond contains $n$ intersections and $m$ two-way roads that directly connect two intersections (Redmond can be modelled as a graph with $n$ vertices and $m$ edges). It is always possible to travel from any intersection to any other intersection via the roads.\n\nThe shipping company has two warehouses and $s$ employees. The warehouses and employees are currently located at some of the intersections in Redmond. Greg needs to make $t$ deliveries to his clients who are also located at some of the intersections in Redmond. For each delivery, one of his employees will travel to either warehouse to pick up the item to deliver, then travel to the corresponding client. Each warehouse always contains an infinite amount of each item. Greg would like to minimize the total distance travelled by his employees (he does not care about the return trip). Each employee may make at most one delivery.\n\n-----Input-----\nThe first line of input contains four space-separated integers $n$, $m$, $s$, and $t$ ($2\\le n\\le 10^5$, $n-1\\le m\\le 2\\cdot 10^5$, and $1\\le t\\le s\\le 10^5$), denoting the number of intersections, the number of roads, the number of employees, and the number of deliveries respectively.\n\nThe second line of input contains two space-separated integers $a$ and $b$ ($1\\le a, b\\le n$), denoting the locations of the two warehouses. The warehouses could be at the same intersection.\n\nThe third line of input contains $s$ space-separated integers $x_ i$ ($1\\le x_ i\\le n$), denoting the locations of the $s$ employees. The $x_ i$\u2019s are not necessarily distinct.\n\nThe fourth line of input contains $t$ space-separated integers $y_ i$ ($1\\le y_ i\\le n$), denoting the locations of the clients for the $t$ deliveries. The $y_ i$\u2019s are not necessarily distinct.\n\nEach of the next $m$ lines of input contains three space-separated integers $u$, $v$, and $d$ ($1\\le u, v\\le n$, $u\\neq v$, and $1\\le d\\le 10^8$), denoting a road of distance $d$ connecting intersections $u$ and $v$. It is always possible to travel from one intersection to all other intersections.\n\n-----Output-----\nThe only line of output should contain a single integer denoting the minimum total distance.\n\n-----Examples-----\nSample Input 1:\n7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\nSample Output 1:\n9\n\nSample Input 2:\n2 1 1 1\n2 2\n1\n1\n1 2 1\nSample Output 2:\n2",
    "public_tests": {
      "input": [
        "7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n",
        "2 1 1 1\n2 2\n1\n1\n1 2 1\n"
      ],
      "output": [
        "9\n",
        "2\n"
      ]
    },
    "private_tests": {
      "input": [
        "7 8 3 2\n1 2\n7 3 4\n5 6\n1 3 2\n1 4 1\n1 5 1\n1 6 6\n2 3 9\n2 4 2\n2 6 4\n7 6 5\n",
        "2 1 1 1\n2 2\n1\n1\n1 2 1\n",
        "2 1 5 5\n2 1\n1 1 2 2 1\n2 1 1 2 1\n2 1 100000000\n"
      ],
      "output": [
        "9\n",
        "2\n",
        "0\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3917,
    "description": "Iahub and Sorin are the best competitive programmers in their town. However, they can't both qualify to an important contest. The selection will be made with the help of a single problem. Blatnatalag, a friend of Iahub, managed to get hold of the problem before the contest. Because he wants to make sure Iahub will be the one qualified, he tells Iahub the following task.\n\nYou're given an (1-based) array a with n elements. Let's define function f(i, j) (1 \u2264 i, j \u2264 n) as (i - j)^2 + g(i, j)^2. Function g is calculated by the following pseudo-code:\n\n\n\nint g(int i, int j) {\n\n    int sum = 0;\n\n    for (int k = min(i, j) + 1; k <= max(i, j); k = k + 1)\n\n        sum = sum + a[k];\n\n    return sum;\n\n}\n\n\n\nFind a value min_{i} \u2260 j\u00a0\u00a0f(i, j).\n\nProbably by now Iahub already figured out the solution to this problem. Can you?\n\n\n-----Input-----\n\nThe first line of input contains a single integer n (2 \u2264 n \u2264 100000). Next line contains n integers a[1], a[2], ..., a[n] ( - 10^4 \u2264 a[i] \u2264 10^4). \n\n\n-----Output-----\n\nOutput a single integer \u2014 the value of min_{i} \u2260 j\u00a0\u00a0f(i, j).\n\n\n-----Examples-----\nInput\n4\n1 0 0 -1\n\nOutput\n1\n\nInput\n2\n1 -1\n\nOutput\n2",
    "public_tests": {
      "input": [
        "4\n1 0 0 -1\n",
        "2\n1 -1\n"
      ],
      "output": [
        "1\n",
        "2\n"
      ]
    },
    "private_tests": {
      "input": [
        "4\n1 0 0 -1\n",
        "2\n1 -1\n",
        "100\n-57 -64 83 76 80 27 60 76 -80 -56 52 72 -17 92 -96 87 41 -88 94 89 12 42 36 34 -100 -43 -42 62 3 87 -69 -6 -27 -59 -7 5 -90 -23 63 -87 -60 -92 -40 54 -16 -47 67 -64 10 33 -19 53 -7 -62 16 -74 -36 4 -75 -55 92 3 -22 43 -30 48 -27 88 -58 41 36 8 -40 -30 -18 16 22 -66 -91 -46 48 -60 -45 -89 37 -76 52 81 81 15 1 -43 -45 -19 9 -75 -75 -63 41 29\n",
        "100\n-1 -3 -3 0 -1 -1 -1 1 2 1 0 -1 -2 0 -2 -2 3 -2 -1 -2 2 -2 -2 3 0 2 3 -1 2 -1 -2 2 -3 2 1 0 -1 1 3 -1 0 2 -3 -2 2 2 3 -2 2 3 0 -3 -2 1 -1 0 3 0 2 0 1 1 0 -3 1 -3 3 0 -1 -3 3 3 1 -2 2 -2 -3 -1 -2 2 -1 0 2 1 2 -1 2 3 -2 -1 0 -3 0 -1 3 2 -2 2 3 0\n",
        "4\n200 100 -200 100\n",
        "2\n3 -9\n",
        "3\n0 -10 10\n",
        "2\n10000 10000\n",
        "2\n5 5\n",
        "3\n10 10 -10\n",
        "6\n10000 10000 10000 10000 10000 6904\n",
        "3\n0 10000 -10000\n",
        "3\n0 2 3\n",
        "2\n0 1\n",
        "5\n5865 6072 -4563 5913 -7926\n",
        "2\n1 10000\n",
        "5\n10 11 12 13 -40\n",
        "21\n10 10 10 10 10 10 10 10 10 10 -95 10 10 10 10 10 10 10 10 10 10\n",
        "5\n0 4 10 -5 -5\n",
        "2\n0 10000\n",
        "4\n0 100 100 -200\n",
        "4\n0 10 -5 -5\n",
        "4\n10 10 -10 -10\n",
        "3\n1 10 10\n",
        "3\n1000 1000 -800\n",
        "3\n0 10 -10\n",
        "2\n0 100\n"
      ],
      "output": [
        "1\n",
        "2\n",
        "2\n",
        "1\n",
        "9\n",
        "82\n",
        "4\n",
        "100000001\n",
        "26\n",
        "4\n",
        "47665217\n",
        "4\n",
        "5\n",
        "2\n",
        "254032\n",
        "100000001\n",
        "32\n",
        "101\n",
        "9\n",
        "100000001\n",
        "9\n",
        "9\n",
        "4\n",
        "101\n",
        "40004\n",
        "4\n",
        "10001\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3180,
    "description": "Mirko has just installed a brand new drawing program. The program supports $K$ different colours, denoted by integers from 1 to $K$. All drawing is performed on a canvas with dimensions $N\\times N$. In the beginning, all cells are white (denoted by 1).\n\nThe upper left cell of the canvas has coordinates $(0, 0)$. The first coordinate, $x$, increases iterating over rows, and the second, $y$, increases iterating over columns.\n\nMirko\u2019s favourite pastime is drawing rectangular checkerboard patterns using the command PAINT c x1 y1 x2 y2, where $c$ denotes the chosen colour, and $(x1, y1)$ and $(x2, y2)$ are coordinates of the upper left and lower right cells, respectively, of the rectangle being painted.\n\nThe upper left cell of the rectangle will be painted in the chosen colour, while the rest are determined by the checkerboard pattern. Cells that are not painted over by the chosen colour will retain their previous colour. For example, a white canvas painted over by a red checkerboard pattern will look like this:\n\nMirko has recently discovered two additional commands. He can save his painting at any time using the creatively named command SAVE, and load it again later using the command LOAD x, where $x$ is a positive integer representing the ordinal number of the save.\n\nUnfortunately, the program has crashed and Mirko\u2019s painting is lost forever. Luckily, Mirko has saved a log of all used commands. Can you help Mirko by reconstructing the lost painting?\n\n-----Input-----\nThe first line of input contains three positive integers, $N$ ($1 \\leq N \\leq 1000$), $K$ ($2 \\leq K \\leq 100000$), and $M$ ($1 \\leq M \\leq 100000$, $M$ is the number of commands).\n\nEach of the following $M$ lines contains one of the three described commands. The input will not contain any illegal commands.\n\n-----Output-----\nOutput $N$ lines, each containing N integers representing the colours of cells in the corresponding row of the painting.\n\n-----Examples-----\nSample Input 1:\n4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\nSample Output 1:\n2 1 2 3\n1 2 1 2\n2 1 2 3\n1 2 1 2\n\nSample Input 2:\n3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\nSample Output 2:\n3 1 1\n1 3 1\n1 1 1",
    "public_tests": {
      "input": [
        "4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n",
        "3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n"
      ],
      "output": [
        "2 1 2 3\n1 2 1 2\n2 1 2 3\n1 2 1 2\n",
        "3 1 1\n1 3 1\n1 1 1\n"
      ]
    },
    "private_tests": {
      "input": [
        "4 3 2\nPAINT 2 0 0 3 3\nPAINT 3 0 3 3 3\n",
        "3 3 4\nPAINT 3 0 0 1 1\nSAVE\nPAINT 2 1 1 2 2\nLOAD 1\n",
        "3 4 7\nPAINT 2 0 0 1 1\nSAVE\nPAINT 3 1 1 2 2\nSAVE\nPAINT 4 0 2 0 2\nLOAD 2\nPAINT 4 2 0 2 0\n"
      ],
      "output": [
        "2 1 2 3\n1 2 1 2\n2 1 2 3\n1 2 1 2\n",
        "3 1 1\n1 3 1\n1 1 1\n",
        "2 1 1\n1 3 1\n4 1 3\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3105,
    "description": "You are the boss of Wi Know, an upstanding company in information theory, especially in message encryption.\n\nThe counter-counter-intelligence branch of your upstanding company managed to intercept a message sent by the counter-intelligence agency of the local Helsinkian government. This message is, of course, of utmost importance, and its content can probably be used for the \u201cgreater good\u201d later. The message is a sequence $S$ of $N$ positive integers not greater than $N$, indexed from $1$ to $N$. Let $S_ i$ be the $i^\\textrm {th}$ integer of $S$.\n\nAs the first step to mine useful information from this message, you first have to find patterns in it. At the moment, the pattern we\u2019re interested in is whether there exists two different integers $A$ and $B$ such that the pattern $A, B, A, B$ appears as a (not necessarily contiguous) subsequence of the original message. That is, whether there exists four indices $1 \\le c < d < e < f \\le N$ such that $S_ c = S_ e$, $S_ d = S_ f$, and $S_ c \\not= S_ d$.\n\nYour task is to find such a pattern, if any, and print both $A$ and $B$. If there are multiple such pairs $(A, B)$, find the lexicographically smallest one. That is, if there are multiple such pairs $(A, B)$, print the one whose $A$ is minimized. If there are still multiple such patterns, print the one whose $B$ is minimized.\n\n-----Input-----\nThe first line contains a non-negative integer $4 \\leq N \\leq 400000$, giving the number of integers in $S$. Thereafter follow\u00a0$N$ lines, the $i^\\textrm {th}$ line contains a single integer $1 \\le S_ i \\le N$.\n\n-----Output-----\nIf $A \\not= B$ exists and the pattern $A, B, A, B$ appears as a subsequence of $S$, you should print two integers $A$ and $B$ on a single line separated by a single space, denoting the lexicographically smallest pair of $(A, B)$ as described in the problem statement. Otherwise, if there is no such pair, you should print a single integer $-1$.\n\n-----Examples-----\nSample Input 1:\n8\n1\n3\n2\n4\n1\n5\n2\n4\nSample Output 1:\n1 2\n\nSample Input 2:\n8\n1\n2\n3\n4\n5\n6\n7\n1\nSample Output 2:\n-1",
    "public_tests": {
      "input": [
        "8\n1\n3\n2\n4\n1\n5\n2\n4\n",
        "8\n1\n2\n3\n4\n5\n6\n7\n1\n"
      ],
      "output": [
        "1 2\n",
        "-1\n"
      ]
    },
    "private_tests": {
      "input": [
        "8\n1\n3\n2\n4\n1\n5\n2\n4\n",
        "8\n1\n2\n3\n4\n5\n6\n7\n1\n",
        "4\n2\n1\n2\n1\n"
      ],
      "output": [
        "1 2\n",
        "-1\n\n",
        "2 1\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3866,
    "description": "Bike is interested in permutations. A permutation of length n is an integer sequence such that each integer from 0 to (n - 1) appears exactly once in it. For example, [0, 2, 1] is a permutation of length 3 while both [0, 2, 2] and [1, 2, 3] is not.\n\nA permutation triple of permutations of length n (a, b, c) is called a Lucky Permutation Triple if and only if $\\forall i(1 \\leq i \\leq n), a_{i} + b_{i} \\equiv c_{i} \\operatorname{mod} n$. The sign a_{i} denotes the i-th element of permutation a. The modular equality described above denotes that the remainders after dividing a_{i} + b_{i} by n and dividing c_{i} by n are equal.\n\nNow, he has an integer n and wants to find a Lucky Permutation Triple. Could you please help him?\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 10^5).\n\n\n-----Output-----\n\nIf no Lucky Permutation Triple of length n exists print -1.\n\nOtherwise, you need to print three lines. Each line contains n space-seperated integers. The first line must contain permutation a, the second line \u2014 permutation b, the third \u2014 permutation c.\n\nIf there are multiple solutions, print any of them.\n\n\n-----Examples-----\nInput\n5\n\nOutput\n1 4 3 2 0\n1 0 2 4 3\n2 4 0 1 3\n\nInput\n2\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn Sample 1, the permutation triple ([1, 4, 3, 2, 0], [1, 0, 2, 4, 3], [2, 4, 0, 1, 3]) is Lucky Permutation Triple, as following holds:  $1 + 1 \\equiv 2 \\equiv 2 \\operatorname{mod} 5$;  $4 + 0 \\equiv 4 \\equiv 4 \\operatorname{mod} 5$;  $3 + 2 \\equiv 0 \\equiv 0 \\operatorname{mod} 5$;  $2 + 4 \\equiv 6 \\equiv 1 \\operatorname{mod} 5$;  $0 + 3 \\equiv 3 \\equiv 3 \\operatorname{mod} 5$. \n\nIn Sample 2, you can easily notice that no lucky permutation triple exists.",
    "public_tests": {
      "input": [
        "5\n",
        "2\n"
      ],
      "output": [
        "1 4 3 2 0\n1 0 2 4 3\n2 4 0 1 3\n",
        "-1\n"
      ]
    },
    "private_tests": {
      "input": [
        "5\n",
        "2\n",
        "8\n",
        "9\n",
        "2\n",
        "6\n",
        "72\n",
        "1\n",
        "23\n",
        "52\n",
        "32\n",
        "25\n",
        "54\n",
        "20\n",
        "34\n",
        "23\n",
        "41904\n",
        "46684\n",
        "72598\n",
        "74320\n",
        "16586\n",
        "5014\n",
        "73268\n",
        "99182\n",
        "5684\n",
        "31598\n",
        "16968\n",
        "73650\n",
        "99564\n",
        "25478\n",
        "31980\n",
        "1\n",
        "100000\n",
        "99998\n"
      ],
      "output": [
        "1 4 3 2 0\n1 0 2 4 3\n2 4 0 1 3\n",
        "-1\n",
        "-1\n",
        "0 1 2 3 4 5 6 7 8 \n0 1 2 3 4 5 6 7 8 \n0 2 4 6 8 1 3 5 7 \n",
        "-1\n",
        "-1\n",
        "-1\n",
        "0 \n0 \n0 \n",
        "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \n0 2 4 6 8 10 12 14 16 18 20 22 1 3 5 7 9 11 13 15 17 19 21 \n",
        "-1\n",
        "-1\n",
        "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 \n0 2 4 6 8 10 12 14 16 18 20 22 24 1 3 5 7 9 11 13 15 17 19 21 23 \n",
        "-1\n",
        "-1\n",
        "-1\n",
        "0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \n0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 \n0 2 4 6 8 10 12 14 16 18 20 22 1 3 5 7 9 11 13 15 17 19 21 \n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "0 \n0 \n0 \n",
        "-1\n",
        "-1\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3150,
    "description": "Near a military base there is a system of trenches, modeled as line segments on a plane. During nighttime, when most soldiers are fast asleep, three guards stand watch of the trenches. Two guards can see each other if there is a trench (or a row of trenches) along the entire straight line segment between them and there is no third guard on that line segment.\n\nFor security reasons, the guards must be placed so that each guard sees the other two. How many ways can they be placed?\n\n-----Input-----\nThe first line contains the integer $N$ $(1 \\leq N \\leq 20)$, the number of trenches. Each of the next $N$ lines contains the description of one trench: four non-negative integers $X_1, Y_1, X_2, Y_2$ (all less than or equal to $1000$), where $X_1$ and $Y_1$ are coordinates of one end, while $X_2$ and $Y_2$ are coordinates of the other end of the trench.\n\nTrenches in the input may overlap and share endpoints.\n\n-----Output-----\nOutput the number of ways the guards can be placed on a single line.\n\n-----Examples-----\nSample Input 1:\n6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\nSample Output 1:\n8\n\nSample Input 2:\n4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\nSample Output 2:\n1",
    "public_tests": {
      "input": [
        "6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n",
        "4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n"
      ],
      "output": [
        "8\n",
        "1\n"
      ]
    },
    "private_tests": {
      "input": [
        "6\n0 0 1 0\n0 0 0 1\n1 0 1 1\n0 1 1 1\n0 0 1 1\n1 0 0 1\n",
        "4\n5 1 7 1\n1 1 5 1\n4 0 4 4\n7 0 3 4\n",
        "3\n2 2 3 2\n3 2 3 3\n3 3 2 3\n"
      ],
      "output": [
        "8\n",
        "1\n",
        "0\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3203,
    "description": "Everyone knows of the secret agent double-oh-seven, the popular Bond (James Bond). A lesser known fact is that he actually did not perform most of his missions by himself; they were instead done by his cousins, Jimmy Bonds. Bond (James Bond) has grown weary of having to distribute assign missions to Jimmy Bonds every time he gets new missions so he has asked you to help him out.\n\nEvery month Bond (James Bond) receives a list of missions. Using his detailed intelligence from past missions, for every mission and for every Jimmy Bond he calculates the probability of that particular mission being successfully completed by that particular Jimmy Bond. Your program should process that data and find the arrangement that will result in the greatest probability that all missions are completed successfully. Note that the number of missions is equal to the number of Bonds, so that every Jimmy Bond needs to be assigned a single mission each.\n\nNote: the probability of all missions being completed successfully is equal to the product of the probabilities of the single missions being completed successfully.\n\n-----Input-----\nThe first line will contain an integer $N$, the number of Jimmy Bonds and missions ($1 \\le N \\le 20$).\n\nThe following $N$ lines will contain $N$ integers between $0$ and $100$, inclusive. The $j$:th integer on the $i$:th line is the probability that Jimmy Bond $i$ would successfully complete mission $j$, given as a percentage.\n\n-----Output-----\nOutput the maximum probability of Jimmy Bonds successfully completing all the missions, as a percentage.\n\nYour answer should have an absolute error of at most $10^{-6}$.\n\n-----Explanation of third sample-----\nIf Jimmy bond $1$ is assigned the $3$:rd mission, Jimmy Bond $2$ the $1$:st mission and Jimmy Bond $3$ the $2$:nd mission the probability is: $1.0 \\cdot 0.13 \\cdot 0.7 = 0.091 = 9.1\\% $. All other arrangements give a smaller probability of success.\n\n-----Examples-----\nSample Input 1:\n2\n100 100\n50 50\nSample Output 1:\n50\n\nSample Input 2:\n2\n0 50\n50 0\nSample Output 2:\n25",
    "public_tests": {
      "input": [
        "2\n100 100\n50 50\n",
        "2\n0 50\n50 0\n"
      ],
      "output": [
        "50\n",
        "25\n"
      ]
    },
    "private_tests": {
      "input": [
        "2\n100 100\n50 50\n",
        "2\n0 50\n50 0\n",
        "3\n25 60 100\n13 0 50\n12 70 90\n"
      ],
      "output": [
        "50\n",
        "25\n",
        "9.1\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3801,
    "description": "The only difference between easy and hard versions is constraints.\n\nNauuo is a girl who loves random picture websites.\n\nOne day she made a random picture website by herself which includes $n$ pictures.\n\nWhen Nauuo visits the website, she sees exactly one picture. The website does not display each picture with equal probability. The $i$-th picture has a non-negative weight $w_i$, and the probability of the $i$-th picture being displayed is $\\frac{w_i}{\\sum_{j=1}^nw_j}$. That is to say, the probability of a picture to be displayed is proportional to its weight.\n\nHowever, Nauuo discovered that some pictures she does not like were displayed too often. \n\nTo solve this problem, she came up with a great idea: when she saw a picture she likes, she would add $1$ to its weight; otherwise, she would subtract $1$ from its weight.\n\nNauuo will visit the website $m$ times. She wants to know the expected weight of each picture after all the $m$ visits modulo $998244353$. Can you help her?\n\nThe expected weight of the $i$-th picture can be denoted by $\\frac {q_i} {p_i}$ where $\\gcd(p_i,q_i)=1$, you need to print an integer $r_i$ satisfying $0\\le r_i<998244353$ and $r_i\\cdot p_i\\equiv q_i\\pmod{998244353}$. It can be proved that such $r_i$ exists and is unique.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1\\le n\\le 50$, $1\\le m\\le 50$) \u2014 the number of pictures and the number of visits to the website.\n\nThe second line contains $n$ integers $a_1,a_2,\\ldots,a_n$ ($a_i$ is either $0$ or $1$) \u2014 if $a_i=0$ , Nauuo does not like the $i$-th picture; otherwise Nauuo likes the $i$-th picture. It is guaranteed that there is at least one picture which Nauuo likes.\n\nThe third line contains $n$ integers $w_1,w_2,\\ldots,w_n$ ($1\\le w_i\\le50$) \u2014 the initial weights of the pictures.\n\n\n-----Output-----\n\nThe output contains $n$ integers $r_1,r_2,\\ldots,r_n$ \u2014 the expected weights modulo $998244353$.\n\n\n-----Examples-----\nInput\n2 1\n0 1\n2 1\n\nOutput\n332748119\n332748119\n\nInput\n1 2\n1\n1\n\nOutput\n3\n\nInput\n3 3\n0 1 1\n4 3 5\n\nOutput\n160955686\n185138929\n974061117\n\n\n\n-----Note-----\n\nIn the first example, if the only visit shows the first picture with a probability of $\\frac 2 3$, the final weights are $(1,1)$; if the only visit shows the second picture with a probability of $\\frac1 3$, the final weights are $(2,2)$.\n\nSo, both expected weights are $\\frac2 3\\cdot 1+\\frac 1 3\\cdot 2=\\frac4 3$ .\n\nBecause $332748119\\cdot 3\\equiv 4\\pmod{998244353}$, you need to print $332748119$ instead of $\\frac4 3$ or $1.3333333333$.\n\nIn the second example, there is only one picture which Nauuo likes, so every time Nauuo visits the website, $w_1$ will be increased by $1$.\n\nSo, the expected weight is $1+2=3$.\n\nNauuo is very naughty so she didn't give you any hint of the third example.",
    "public_tests": {
      "input": [
        "2 1\n0 1\n2 1\n",
        "1 2\n1\n1\n",
        "3 3\n0 1 1\n4 3 5\n"
      ],
      "output": [
        "332748119\n332748119\n",
        "3\n",
        "160955686\n185138929\n974061117\n"
      ]
    },
    "private_tests": {
      "input": [
        "2 1\n0 1\n2 1\n",
        "1 2\n1\n1\n",
        "3 3\n0 1 1\n4 3 5\n",
        "5 5\n0 1 0 0 1\n9 8 3 8 8\n",
        "10 10\n0 1 0 0 1 1 1 1 1 1\n12 18 6 18 7 2 9 18 1 9\n",
        "20 20\n1 1 1 1 0 1 1 1 0 1 0 1 0 0 1 0 1 1 0 1\n1 13 7 11 17 15 19 18 14 11 15 1 12 4 5 16 14 11 18 9\n",
        "30 50\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0\n1 2 1 1 2 1 1 1 1 1 1 2 1 1 2 1 1 1 2 1 1 2 1 2 2 1 1 2 2 2\n",
        "40 40\n1 1 1 1 0 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n28 13 22 35 22 13 23 35 14 36 30 10 10 15 3 9 35 35 9 29 14 28 8 29 22 30 4 31 39 24 4 19 37 4 20 7 11 17 3 25\n",
        "10 10\n1 1 1 1 1 1 1 1 1 1\n1 2 2 1 2 2 2 1 1 1\n",
        "10 10\n1 1 1 1 1 1 1 0 1 1\n2 1 2 2 1 1 1 1 1 1\n",
        "10 10\n0 0 0 1 0 0 0 0 0 0\n2 2 2 2 2 2 2 1 2 2\n",
        "10 10\n0 0 1 0 0 0 1 0 0 0\n2 1 2 1 1 2 1 1 1 1\n",
        "10 10\n1 0 0 0 1 1 1 0 1 0\n1 2 1 2 1 1 2 2 2 1\n",
        "10 10\n1 1 1 1 1 1 1 1 1 1\n17 10 8 34 5 4 3 44 20 14\n",
        "10 10\n1 1 1 1 1 1 1 1 0 1\n40 36 29 4 36 35 9 38 40 18\n",
        "10 10\n0 0 0 0 0 0 0 1 0 0\n8 33 37 18 30 48 45 34 25 48\n",
        "10 10\n0 0 1 0 0 0 0 0 1 0\n47 34 36 9 3 16 17 46 47 1\n",
        "10 10\n1 0 0 1 1 0 1 0 0 1\n24 7 10 9 6 13 27 17 6 39\n",
        "10 10\n0 0 0 0 0 1 0 0 0 0\n34 34 34 34 34 34 34 34 34 34\n",
        "10 10\n1 1 1 1 1 1 1 1 1 1\n43 43 43 43 43 43 43 43 43 43\n",
        "30 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 2 2 2 1 1 2 1 1 1 2 1 1 2 1 2 1 2 1 2 1 2 2 2 1 2 2 2 2 1\n",
        "30 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 1 1 1 1 1\n2 1 1 1 2 1 1 2 1 1 1 2 1 1 1 1 2 2 2 2 1 2 1 2 1 1 1 1 2 1\n",
        "30 30\n0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n2 1 1 2 1 2 2 2 2 2 1 1 2 2 2 1 2 2 2 1 2 1 1 1 1 1 2 1 1 1\n",
        "30 30\n0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0\n1 1 1 1 2 1 2 2 1 2 1 2 1 1 2 2 1 2 1 2 1 2 2 2 1 1 2 1 2 2\n",
        "30 30\n1 1 1 0 1 0 0 1 1 1 0 0 0 0 0 1 1 0 1 0 1 0 0 1 1 0 1 0 1 0\n1 1 1 2 2 1 2 1 2 1 1 2 2 2 1 2 1 1 1 1 1 2 1 2 1 2 1 2 1 1\n",
        "30 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n23 45 44 49 17 36 32 26 40 8 36 11 5 19 41 16 7 38 23 40 13 16 24 44 22 13 1 2 32 31\n",
        "30 30\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n41 39 15 34 45 27 18 7 48 33 46 11 24 16 35 43 7 31 26 17 30 15 5 9 29 20 21 37 3 7\n",
        "30 30\n0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n29 38 18 19 46 28 12 5 46 17 31 20 24 33 9 6 47 2 2 41 34 2 50 5 47 10 40 21 49 28\n",
        "30 30\n0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0\n1 12 9 1 5 32 38 25 34 31 27 43 13 38 48 40 5 42 20 45 1 4 35 38 1 44 31 42 8 37\n",
        "30 30\n0 1 1 0 0 1 1 1 1 0 0 1 0 0 1 0 0 0 1 0 1 1 0 0 0 1 1 1 1 0\n5 20 47 27 17 5 18 30 43 23 44 6 47 8 23 41 2 46 49 33 45 27 33 16 36 2 42 36 8 23\n",
        "30 30\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\n39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39 39\n",
        "30 30\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22 22\n",
        "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8\n",
        "5 50\n1 1 1 1 1\n1 1 4 2 3\n",
        "10 50\n0 0 0 0 0 0 0 0 1 0\n3 1 3 3 1 3 1 2 2 1\n",
        "20 50\n1 1 1 1 1 1 1 0 1 0 1 1 1 0 1 0 1 1 1 1\n1 2 2 1 2 2 2 2 2 2 1 1 2 2 2 1 1 1 2 2\n",
        "20 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 2 2 2 2 2 2 1 2 1 2 1 2 1 1 2 1 2 2 1\n",
        "40 50\n0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0\n33 26 4 19 42 43 19 32 13 23 19 1 18 43 43 43 19 31 4 25 28 23 33 37 36 23 5 12 18 32 34 1 21 22 34 35 37 16 41 39\n",
        "41 50\n0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1 2 4 2 3 2 4 3 1 1 3 1 3 2 5 3 3 5 4 4 1 1 2 3 2 1 5 5 5 4 2 2 2 1 2 4 4 5 2 1 4\n",
        "42 50\n0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0\n2 4 6 8 1 3 6 1 4 1 3 4 3 7 6 6 8 7 4 1 7 4 6 9 3 1 9 7 1 2 9 3 1 6 1 5 1 8 2 6 8 8\n",
        "43 50\n1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n13 7 13 15 8 9 11 1 15 9 3 7 3 15 4 7 7 16 9 13 12 16 16 1 5 5 14 5 17 2 1 13 4 13 10 17 17 6 11 15 14 3 6\n",
        "44 50\n0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\n2 6 6 11 2 4 11 10 5 15 15 20 20 7 9 8 17 4 16 19 12 16 12 13 2 11 20 2 6 10 2 18 7 5 18 10 15 6 11 9 7 5 17 11\n",
        "45 50\n0 1 0 1 0 1 0 1 1 0 0 1 0 0 1 1 0 1 1 0 1 1 0 0 0 0 0 0 1 1 0 0 1 0 0 0 0 1 0 0 1 1 1 1 0\n4 4 23 23 13 23 9 16 4 18 20 15 21 24 22 20 22 1 15 7 10 17 20 6 15 7 4 10 16 7 14 9 13 17 10 14 22 23 3 5 20 11 4 24 24\n",
        "46 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n29 22 30 33 13 31 19 11 12 21 5 4 24 21 20 6 28 16 27 18 21 11 3 24 21 8 8 33 24 7 34 12 13 32 26 33 33 22 18 2 3 7 24 17 9 30\n",
        "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "50 50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n"
      ],
      "output": [
        "332748119\n332748119\n",
        "3\n",
        "160955686\n185138929\n974061117\n",
        "45170585\n105647559\n680553097\n483815788\n105647559\n",
        "199115375\n823101465\n598679864\n797795239\n486469073\n424203836\n910672909\n823101465\n212101918\n910672909\n",
        "688505688\n964619120\n826562404\n585852097\n851622699\n345141790\n104431483\n414170148\n349014804\n585852097\n516550769\n688505688\n13942874\n670143860\n447795381\n684086734\n654880455\n585852097\n20914311\n207085074\n",
        "346646202\n693292404\n346646202\n346646202\n693292404\n346646202\n346646202\n346646202\n346646202\n346646202\n346646202\n693292404\n346646202\n346646202\n693292404\n346646202\n346646202\n346646202\n693292404\n346646202\n346646202\n693292404\n346646202\n542025302\n693292404\n346646202\n346646202\n693292404\n693292404\n693292404\n",
        "368107101\n848286965\n360530176\n210572788\n199380339\n848286965\n195418938\n210572788\n683175727\n45461550\n37884625\n544374860\n345376326\n518064489\n502910639\n510487564\n210572788\n210572788\n510487564\n202995863\n683175727\n526005255\n675598802\n202995863\n360530176\n37884625\n337799401\n871017740\n548372189\n30307700\n337799401\n855863890\n878594665\n337799401\n690752652\n840710040\n180265088\n187842013\n502910639\n863440815\n",
        "665496237\n332748121\n332748121\n665496237\n332748121\n332748121\n332748121\n665496237\n665496237\n665496237\n",
        "771370640\n385685320\n771370640\n771370640\n385685320\n385685320\n385685320\n635246407\n385685320\n385685320\n",
        "973938381\n973938381\n973938381\n791643586\n973938381\n973938381\n973938381\n986091367\n973938381\n973938381\n",
        "44896189\n521570271\n482402083\n521570271\n521570271\n44896189\n740323218\n521570271\n521570271\n521570271\n",
        "910950063\n595918255\n797081304\n595918255\n910950063\n910950063\n823655773\n595918255\n823655773\n797081304\n",
        "709444118\n6278277\n803618104\n420643883\n502261315\n401809052\n301356789\n426922160\n12556554\n408087329\n",
        "59109317\n951618303\n17898146\n105735367\n951618303\n675623373\n487465664\n505363810\n736385984\n974931328\n",
        "211347083\n497465085\n104016450\n725092025\n542990473\n269838145\n315363533\n227335634\n286118002\n269838145\n",
        "167709201\n57603825\n597597985\n690531016\n562925123\n673030499\n527924089\n312815611\n253346183\n853137943\n",
        "976715988\n573793375\n391885813\n865390672\n244178997\n209978251\n599683310\n965679188\n634429229\n89796951\n",
        "971203339\n971203339\n971203339\n971203339\n971203339\n754874965\n971203339\n971203339\n971203339\n971203339\n",
        "44\n44\n44\n44\n44\n44\n44\n44\n44\n44\n",
        "260411572\n520823144\n520823144\n520823144\n260411572\n260411572\n520823144\n260411572\n260411572\n260411572\n520823144\n260411572\n260411572\n520823144\n260411572\n520823144\n260411572\n520823144\n260411572\n520823144\n260411572\n520823144\n520823144\n520823144\n260411572\n520823144\n520823144\n520823144\n520823144\n260411572\n",
        "720162001\n859203177\n859203177\n859203177\n720162001\n859203177\n859203177\n720162001\n859203177\n859203177\n859203177\n720162001\n859203177\n859203177\n859203177\n859203177\n720162001\n720162001\n720162001\n720162001\n859203177\n720162001\n859203177\n720162001\n427819009\n859203177\n859203177\n859203177\n720162001\n859203177\n",
        "188114875\n593179614\n593179614\n550614566\n593179614\n188114875\n188114875\n188114875\n188114875\n188114875\n593179614\n593179614\n188114875\n188114875\n188114875\n593179614\n188114875\n188114875\n188114875\n593179614\n188114875\n593179614\n593179614\n593179614\n593179614\n593179614\n188114875\n593179614\n593179614\n593179614\n",
        "593179614\n593179614\n593179614\n593179614\n188114875\n593179614\n188114875\n188114875\n593179614\n188114875\n593179614\n188114875\n593179614\n275307283\n188114875\n188114875\n593179614\n188114875\n275307283\n188114875\n593179614\n188114875\n188114875\n188114875\n593179614\n593179614\n188114875\n593179614\n188114875\n188114875\n",
        "297674502\n297674502\n297674502\n101192689\n595349004\n549718521\n101192689\n297674502\n595349004\n297674502\n549718521\n101192689\n101192689\n101192689\n549718521\n595349004\n297674502\n549718521\n297674502\n549718521\n297674502\n101192689\n549718521\n595349004\n297674502\n101192689\n297674502\n101192689\n297674502\n549718521\n",
        "42365832\n603712812\n124449607\n524276926\n161519661\n283321379\n362757265\n481911094\n203885493\n839372581\n283321379\n280673490\n399827319\n121801718\n683148698\n680500809\n360109376\n243603436\n42365832\n203885493\n240955547\n680500809\n521629037\n124449607\n561346980\n240955547\n479263205\n958526410\n362757265\n881738413\n",
        "61128841\n655563720\n98563838\n955457225\n295691514\n377063779\n916872088\n578393446\n115755411\n17191573\n235712813\n338478642\n556999882\n38585137\n895478524\n415648916\n578393446\n137148975\n437042480\n976850789\n197127676\n98563838\n698350848\n458436044\n257106377\n796914686\n736935985\n775521122\n818308250\n578393446\n",
        "528451192\n658031067\n259159750\n828137710\n218632982\n957717585\n838269402\n848401094\n218632982\n688426143\n942792071\n398871317\n678294451\n807874326\n129579875\n419134701\n787610942\n139711567\n139711567\n368476241\n378607933\n139711567\n498056116\n848401094\n787610942\n698557835\n797742634\n967849277\n927322509\n957717585\n",
        "399967190\n806628868\n604971651\n399967190\n3347244\n800038448\n225087925\n16736220\n621707871\n420050654\n816670600\n228435169\n208351705\n225087925\n231782413\n26777952\n3347244\n51806110\n13388976\n30125196\n399967190\n601624407\n23430708\n225087925\n399967190\n628402359\n420050654\n826712332\n205004461\n823365088\n",
        "114252107\n760713694\n489959522\n18014766\n787754905\n689300600\n484993454\n142826188\n936763395\n126261951\n805769671\n827160720\n475023194\n781749983\n176049701\n138271795\n444998584\n252523902\n765679762\n354766165\n214239282\n727490181\n354766165\n565255613\n24019688\n275720240\n798903275\n969986908\n104636607\n126261951\n",
        "417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n417992317\n142843895\n",
        "23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n23\n",
        "9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n9\n",
        "635246412\n635246412\n544496942\n272248471\n907494883\n",
        "187134581\n727874429\n187134581\n187134581\n727874429\n187134581\n727874429\n457504505\n124563167\n727874429\n",
        "853605709\n708967065\n708967065\n853605709\n708967065\n708967065\n708967065\n922030188\n708967065\n922030188\n853605709\n853605709\n708967065\n922030188\n708967065\n461015094\n853605709\n853605709\n708967065\n708967065\n",
        "436731907\n873463814\n873463814\n873463814\n873463814\n873463814\n873463814\n436731907\n873463814\n436731907\n873463814\n436731907\n873463814\n436731907\n436731907\n873463814\n436731907\n873463814\n873463814\n436731907\n",
        "729284231\n60340485\n239647233\n389641092\n20685064\n829280137\n389641092\n918933511\n529292419\n629288325\n366487398\n808595073\n579290372\n829280137\n829280137\n41331201\n389641092\n110338438\n239647233\n249989765\n679286278\n629288325\n426374038\n968931464\n160336391\n629288325\n49997953\n718941699\n579290372\n918933511\n539634951\n808595073\n89829960\n818937605\n539634951\n349985671\n968931464\n958588932\n210334344\n589632904\n",
        "394710173\n789420346\n580596339\n789420346\n185886166\n789420346\n580596339\n185886166\n394710173\n394710173\n185886166\n394710173\n581788048\n789420346\n636898629\n185886166\n185886166\n975306512\n580596339\n580596339\n394710173\n394710173\n55110581\n185886166\n55110581\n394710173\n975306512\n975306512\n975306512\n580596339\n789420346\n789420346\n789420346\n394710173\n789420346\n580596339\n580596339\n975306512\n789420346\n394710173\n580596339\n",
        "11284873\n329090227\n33854619\n45139492\n504764613\n995500935\n33854619\n504764613\n22569746\n504764613\n516049486\n22569746\n516049486\n538619232\n33854619\n33854619\n45139492\n538619232\n22569746\n504764613\n538619232\n22569746\n33854619\n549904105\n516049486\n504764613\n549904105\n538619232\n504764613\n11284873\n990014099\n516049486\n504764613\n33854619\n504764613\n527334359\n504764613\n45139492\n663667290\n33854619\n45139492\n45139492\n",
        "175780254\n94650906\n163530008\n802992688\n561362014\n881093354\n522311681\n319731340\n802992688\n881093354\n959194020\n241630674\n959194020\n802992688\n280681007\n241630674\n241630674\n124479675\n881093354\n163530008\n842043021\n124479675\n124479675\n13521558\n600412347\n600412347\n483261348\n67607790\n444211015\n639462680\n319731340\n163530008\n280681007\n163530008\n202580341\n444211015\n444211015\n920143687\n522311681\n802992688\n483261348\n959194020\n920143687\n",
        "327775237\n983325711\n983325711\n305397274\n327775237\n853173373\n305397274\n640631832\n320315916\n960947748\n960947748\n272889453\n283019311\n648091153\n975866390\n312856595\n290478632\n655550474\n625713190\n618253869\n968407069\n625713190\n968407069\n633172511\n327775237\n305397274\n283019311\n327775237\n983325711\n640631832\n327775237\n953488427\n648091153\n816905628\n953488427\n640631832\n960947748\n983325711\n305397274\n975866390\n648091153\n320315916\n290478632\n305397274\n",
        "630266647\n555616275\n379739073\n948743787\n301438985\n948743787\n669416691\n225976394\n555616275\n340589029\n156600176\n835755590\n563727926\n786866823\n560278630\n781592669\n970855676\n388465157\n835755590\n853405544\n889918511\n614441551\n156600176\n446277794\n117450132\n853405544\n630266647\n78300088\n225976394\n722767393\n708566735\n669416691\n58825276\n931705632\n78300088\n708566735\n970855676\n948743787\n223138897\n39150044\n781592669\n280139315\n555616275\n338964591\n786866823\n",
        "265429165\n98093399\n859759619\n646262275\n738585431\n455845720\n311590743\n548168876\n144254977\n502007298\n975163564\n380833110\n288509954\n502007298\n905921197\n571249665\n669343064\n525088087\n75012610\n715504642\n502007298\n548168876\n784747009\n288509954\n502007298\n761666220\n761666220\n646262275\n288509954\n167335766\n242348376\n144254977\n738585431\n51931821\n478926509\n646262275\n646262275\n98093399\n715504642\n190416555\n784747009\n167335766\n288509954\n121174188\n357752321\n859759619\n",
        "2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n2\n",
        "51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n51\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 3252,
    "description": "Your greeting card company makes unique greeting cards. The sizes of these greeting cards vary widely because of the whims of card designers. There are a lot of different types of cards, and each has a specific quantity that you need to manufacture.\n\nYour job is to determine what envelopes to order for these greeting cards. You have a strict limit on the different number of different sizes of envelopes, which may be less than the number of distinct sizes of cards. You need to have envelopes so that every card fits in some envelope, possibly with room to spare, and the amount of waste paper is minimized. Measure the waste paper by the area of the envelope that is in excess of the area of the card, for each card. For example, a $10 \\times 4$ card in a $10 \\times 4$ envelope has no wasted paper, but a $10 \\times 4$ card in a $12 \\times 5$ envelope has waste of $20$. You may not rotate the cards to fit them in the envelopes better.\n\nSuppose that you have $5$ types of cards: $10 \\times 10$ ($5$ of these), $9 \\times 8$ ($10$ of these), $4 \\times 12$ ($20$ of these), $12 \\times 4$ ($8$ of these), and $2 \\times 3$ ($16$ of these).\n\nNow, suppose that you can only buy one type of envelope. Since all cards have to fit in that one envelope size, the smallest envelope size you can use is $12 \\times 12$, with an area of $144$. The wastes by each type of card are $144 - 10 \\cdot 10=44$, $144 - 9 \\cdot 8=72$, $144 - 4 \\cdot 12=96$, $144 - 12 \\cdot 4=96$, and $144 - 2 \\cdot 3=138$, respectively. The total waste is $44 \\cdot 5 + 72 \\cdot 10 + 96 \\cdot 20 + 96 \\cdot 8 + 138 \\cdot 16=5836$.\n\nSuppose that you can buy $2$ types of envelopes. The best you can do is to put the $10 \\times 10$, $9 \\times 8$ and $12 \\times 4$ cards in $12 \\times 10$ envelopes, and the $4 \\times 12$ and $2 \\times 3$ cards in $4 \\times 12$ envelopes. That adds up to waste of $1828$.\n\nIf you can buy $5$ types of envelopes, then you can match one envelope type to each card type, and there\u2019s no waste!\n\nGiven a list of card types and the number of types of envelopes you can buy, what is the smallest amount of wasted paper you can achieve?\n\n-----Input-----\nEach input will consist of a single test case. Note that your program may be run multiple times on different inputs. The first line of the input will consist of two space-separated integers $n$ and $k$ ($1 \\le n,k \\le 15$), where $n$ is the number of different types of cards, and $k$ is the maximum number of types of envelopes you can order. Each of the following $n$ lines will consist of three integers, describing a type of card. The integers are $w$, $h$ and $q$ ($1 \\le w,h,q \\le 10000$), where $w$ is the width of the cards of this type, $h$ is the height of the cards, and $q$ is the quantity of cards of this type.\n\n-----Output-----\nOutput a single integer, representing the smallest possible total amount of wasted paper.\n\n-----Examples-----\nSample Input 1:\n5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\nSample Output 1:\n5836\n\nSample Input 2:\n5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\nSample Output 2:\n1828",
    "public_tests": {
      "input": [
        "5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n",
        "5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n"
      ],
      "output": [
        "5836\n",
        "1828\n"
      ]
    },
    "private_tests": {
      "input": [
        "5 1\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n",
        "5 2\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n",
        "5 5\n10 10 5\n9 8 10\n4 12 20\n12 4 8\n2 3 16\n"
      ],
      "output": [
        "5836\n",
        "1828\n",
        "0\n"
      ]
    },
    "difficulty": "competition"
  },
  {
    "name": 2007,
    "description": "You are given a graph with $n$ nodes and $m$ directed edges. One lowercase letter is assigned to each node. We define a path's value as the number of the most frequently occurring letter. For example, if letters on a path are \"abaca\", then the value of that path is $3$. Your task is find a path whose value is the largest.\n\n\n-----Input-----\n\nThe first line contains two positive integers $n, m$ ($1 \\leq n, m \\leq 300\\,000$), denoting that the graph has $n$ nodes and $m$ directed edges.\n\nThe second line contains a string $s$ with only lowercase English letters. The $i$-th character is the letter assigned to the $i$-th node.\n\nThen $m$ lines follow. Each line contains two integers $x, y$ ($1 \\leq x, y \\leq n$), describing a directed edge from $x$ to $y$. Note that $x$ can be equal to $y$ and there can be multiple edges between $x$ and $y$. Also the graph can be not connected.\n\n\n-----Output-----\n\nOutput a single line with a single integer denoting the largest value. If the value can be arbitrarily large, output -1 instead.\n\n\n-----Examples-----\nInput\n5 4\nabaca\n1 2\n1 3\n3 4\n4 5\n\nOutput\n3\n\nInput\n6 6\nxzyabc\n1 2\n3 1\n2 3\n5 4\n4 3\n6 4\n\nOutput\n-1\n\nInput\n10 14\nxzyzyzyzqx\n1 2\n2 4\n3 5\n4 5\n2 6\n6 8\n6 5\n2 10\n3 9\n10 9\n4 6\n1 10\n2 8\n3 7\n\nOutput\n4\n\n\n\n-----Note-----\n\nIn the first sample, the path with largest value is $1 \\to 3 \\to 4 \\to 5$. The value is $3$ because the letter 'a' appears $3$ times.",
    "public_tests": {
      "input": [
        "5 4\nabaca\n1 2\n1 3\n3 4\n4 5\n",
        "6 6\nxzyabc\n1 2\n3 1\n2 3\n5 4\n4 3\n6 4\n",
        "10 14\nxzyzyzyzqx\n1 2\n2 4\n3 5\n4 5\n2 6\n6 8\n6 5\n2 10\n3 9\n10 9\n4 6\n1 10\n2 8\n3 7\n"
      ],
      "output": [
        "3\n",
        "-1\n",
        "4\n"
      ]
    },
    "private_tests": {
      "input": [
        "5 4\nabaca\n1 2\n1 3\n3 4\n4 5\n",
        "6 6\nxzyabc\n1 2\n3 1\n2 3\n5 4\n4 3\n6 4\n",
        "10 14\nxzyzyzyzqx\n1 2\n2 4\n3 5\n4 5\n2 6\n6 8\n6 5\n2 10\n3 9\n10 9\n4 6\n1 10\n2 8\n3 7\n",
        "1 1\nf\n1 1\n",
        "10 50\nebibwbjihv\n1 10\n1 2\n5 4\n1 8\n9 7\n5 6\n1 8\n8 7\n2 6\n5 4\n1 9\n3 2\n8 3\n5 6\n5 9\n2 4\n2 7\n3 9\n1 2\n1 7\n1 10\n3 7\n1 8\n3 10\n8 6\n1 7\n10 6\n1 6\n5 8\n1 5\n2 10\n3 9\n5 8\n8 3\n3 7\n5 2\n1 10\n1 4\n5 3\n3 2\n1 2\n5 8\n10 4\n2 10\n8 2\n1 9\n1 8\n1 2\n3 4\n1 8\n",
        "13 37\ndwpzcppjmhkmz\n2 6\n3 6\n6 7\n6 7\n6 7\n6 7\n6 8\n6 8\n6 8\n6 8\n4 6\n4 6\n5 6\n4 6\n4 6\n6 9\n6 9\n6 10\n6 10\n6 10\n6 10\n4 6\n1 6\n1 6\n10 11\n6 11\n1 6\n6 12\n6 12\n6 12\n6 13\n6 13\n6 13\n6 13\n3 6\n2 6\n2 6\n",
        "5 8\ntetqw\n2 1\n4 4\n5 5\n5 2\n4 5\n1 5\n1 5\n1 1\n",
        "5 8\nreeet\n4 3\n2 5\n4 2\n2 4\n4 2\n5 2\n3 3\n3 4\n"
      ],
      "output": [
        "3\n",
        "-1\n",
        "4\n",
        "-1\n",
        "2\n",
        "3\n",
        "-1\n",
        "-1\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1309,
    "description": "Vadim is really keen on travelling. Recently he heard about kayaking activity near his town and became very excited about it, so he joined a party of kayakers.\n\nNow the party is ready to start its journey, but firstly they have to choose kayaks. There are 2\u00b7n people in the group (including Vadim), and they have exactly n - 1 tandem kayaks (each of which, obviously, can carry two people) and 2 single kayaks. i-th person's weight is w_{i}, and weight is an important matter in kayaking \u2014 if the difference between the weights of two people that sit in the same tandem kayak is too large, then it can crash. And, of course, people want to distribute their seats in kayaks in order to minimize the chances that kayaks will crash.\n\nFormally, the instability of a single kayak is always 0, and the instability of a tandem kayak is the absolute difference between weights of the people that are in this kayak. Instability of the whole journey is the total instability of all kayaks.\n\nHelp the party to determine minimum possible total instability! \n\n\n-----Input-----\n\nThe first line contains one number n (2 \u2264 n \u2264 50).\n\nThe second line contains 2\u00b7n integer numbers w_1, w_2, ..., w_2n, where w_{i} is weight of person i (1 \u2264 w_{i} \u2264 1000).\n\n\n-----Output-----\n\nPrint minimum possible total instability.\n\n\n-----Examples-----\nInput\n2\n1 2 3 4\n\nOutput\n1\n\nInput\n4\n1 3 4 6 3 4 100 200\n\nOutput\n5",
    "public_tests": {
      "input": [
        "2\n1 2 3 4\n",
        "4\n1 3 4 6 3 4 100 200\n"
      ],
      "output": [
        "1\n",
        "5\n"
      ]
    },
    "private_tests": {
      "input": [
        "2\n1 2 3 4\n",
        "4\n1 3 4 6 3 4 100 200\n",
        "3\n305 139 205 406 530 206\n",
        "3\n610 750 778 6 361 407\n",
        "5\n97 166 126 164 154 98 221 7 51 47\n",
        "50\n1 1 2 2 1 3 2 2 1 1 1 1 2 3 3 1 2 1 3 3 2 1 2 3 1 1 2 1 3 1 3 1 3 3 3 1 1 1 3 3 2 2 2 2 3 2 2 2 2 3 1 3 3 3 3 1 3 3 1 3 3 3 3 2 3 1 3 3 1 1 1 3 1 2 2 2 1 1 1 3 1 2 3 2 1 3 3 2 2 1 3 1 3 1 2 2 1 2 3 2\n",
        "50\n5 5 5 5 4 2 2 3 2 2 4 1 5 5 1 2 4 2 4 2 5 2 2 2 2 3 2 4 2 5 5 4 3 1 2 3 3 5 4 2 2 5 2 4 5 5 4 4 1 5 5 3 2 2 5 1 3 3 2 4 4 5 1 2 3 4 4 1 3 3 3 5 1 2 4 4 4 4 2 5 2 5 3 2 4 5 5 2 1 1 2 4 5 3 2 1 2 4 4 4\n",
        "50\n499 780 837 984 481 526 944 482 862 136 265 605 5 631 974 967 574 293 969 467 573 845 102 224 17 873 648 120 694 996 244 313 404 129 899 583 541 314 525 496 443 857 297 78 575 2 430 137 387 319 382 651 594 411 845 746 18 232 6 289 889 81 174 175 805 1000 799 950 475 713 951 685 729 925 262 447 139 217 788 514 658 572 784 185 112 636 10 251 621 218 210 89 597 553 430 532 264 11 160 476\n",
        "50\n873 838 288 87 889 364 720 410 565 651 577 356 740 99 549 592 994 385 777 435 486 118 887 440 749 533 356 790 413 681 267 496 475 317 88 660 374 186 61 437 729 860 880 538 277 301 667 180 60 393 955 540 896 241 362 146 74 680 734 767 851 337 751 860 542 735 444 793 340 259 495 903 743 961 964 966 87 275 22 776 368 701 835 732 810 735 267 988 352 647 924 183 1 924 217 944 322 252 758 597\n",
        "50\n297 787 34 268 439 629 600 398 425 833 721 908 830 636 64 509 420 647 499 675 427 599 396 119 798 742 577 355 22 847 389 574 766 453 196 772 808 261 106 844 726 975 173 992 874 89 775 616 678 52 69 591 181 573 258 381 665 301 589 379 362 146 790 842 765 100 229 916 938 97 340 793 758 177 736 396 247 562 571 92 923 861 165 748 345 703 431 930 101 761 862 595 505 393 126 846 431 103 596 21\n",
        "50\n721 631 587 746 692 406 583 90 388 16 161 948 921 70 387 426 39 398 517 724 879 377 906 502 359 950 798 408 846 718 911 845 57 886 9 668 537 632 344 762 19 193 658 447 870 173 98 156 592 519 183 539 274 393 962 615 551 626 148 183 769 763 829 120 796 761 14 744 537 231 696 284 581 688 611 826 703 145 224 600 965 613 791 275 984 375 402 281 851 580 992 8 816 454 35 532 347 250 242 637\n",
        "50\n849 475 37 120 754 183 758 374 543 198 896 691 11 607 198 343 761 660 239 669 628 259 223 182 216 158 20 565 454 884 137 923 156 22 310 77 267 707 582 169 120 308 439 309 59 152 206 696 210 177 296 887 559 22 154 553 142 247 491 692 473 572 461 206 532 319 503 164 328 365 541 366 300 392 486 257 863 432 877 404 520 69 418 99 519 239 374 927 601 103 226 316 423 219 240 26 455 101 184 61\n",
        "3\n1 2 10 11 100 100\n",
        "17\n814 744 145 886 751 1000 272 914 270 529 467 164 410 369 123 424 991 12 702 582 561 858 746 950 598 393 606 498 648 686 455 873 728 858\n",
        "45\n476 103 187 696 463 457 588 632 763 77 391 721 95 124 378 812 980 193 694 898 859 572 721 274 605 264 929 615 257 918 42 493 1 3 697 349 990 800 82 535 382 816 943 735 11 272 562 323 653 370 766 332 666 130 704 604 645 717 267 255 37 470 925 941 376 611 332 758 504 40 477 263 708 434 38 596 650 990 714 662 572 467 949 799 648 581 545 828 508 636\n",
        "2\n55 5 25 51\n",
        "25\n89 50 640 463 858 301 522 241 923 378 892 822 550 17 42 66 706 779 657 840 273 222 444 459 94 925 437 159 182 727 92 851 742 215 653 891 782 533 29 128 133 883 317 475 165 994 802 434 744 973\n",
        "4\n35 48 71 44 78 79 57 48\n",
        "3\n58 89 73 15 5 47\n",
        "2\n1 20 99 100\n"
      ],
      "output": [
        "1\n",
        "5\n",
        "102\n",
        "74\n",
        "35\n",
        "0\n",
        "1\n",
        "368\n",
        "393\n",
        "387\n",
        "376\n",
        "351\n",
        "1\n",
        "318\n",
        "355\n",
        "4\n",
        "348\n",
        "10\n",
        "21\n",
        "1\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 589,
    "description": "Special Agent Smart Beaver works in a secret research department of ABBYY. He's been working there for a long time and is satisfied with his job, as it allows him to eat out in the best restaurants and order the most expensive and exotic wood types there. \n\nThe content special agent has got an important task: to get the latest research by British scientists on the English Language. These developments are encoded and stored in a large safe. The Beaver's teeth are strong enough, so the authorities assured that upon arriving at the place the beaver won't have any problems with opening the safe.\n\nAnd he finishes his aspen sprig and leaves for this important task. Of course, the Beaver arrived at the location without any problems, but alas. He can't open the safe with his strong and big teeth. At this point, the Smart Beaver get a call from the headquarters and learns that opening the safe with the teeth is not necessary, as a reliable source has sent the following information: the safe code consists of digits and has no leading zeroes. There also is a special hint, which can be used to open the safe. The hint is string s with the following structure:\n\n  if s_{i} = \"?\", then the digit that goes i-th in the safe code can be anything (between 0 to 9, inclusively);  if s_{i} is a digit (between 0 to 9, inclusively), then it means that there is digit s_{i} on position i in code;  if the string contains letters from \"A\" to \"J\", then all positions with the same letters must contain the same digits and the positions with distinct letters must contain distinct digits.  The length of the safe code coincides with the length of the hint. \n\nFor example, hint \"?JGJ9\" has such matching safe code variants: \"51919\", \"55959\", \"12329\", \"93539\" and so on, and has wrong variants such as: \"56669\", \"00111\", \"03539\" and \"13666\".\n\nAfter receiving such information, the authorities change the plan and ask the special agents to work quietly and gently and not to try to open the safe by mechanical means, and try to find the password using the given hint.\n\nAt a special agent school the Smart Beaver was the fastest in his platoon finding codes for such safes, but now he is not in that shape: the years take their toll ... Help him to determine the number of possible variants of the code to the safe, matching the given hint. After receiving this information, and knowing his own speed of entering codes, the Smart Beaver will be able to determine whether he will have time for tonight's show \"Beavers are on the trail\" on his favorite TV channel, or he should work for a sleepless night...\n\n\n-----Input-----\n\nThe first line contains string s \u2014 the hint to the safe code. String s consists of the following characters: ?, 0-9, A-J. It is guaranteed that the first character of string s doesn't equal to character 0.\n\nThe input limits for scoring 30 points are (subproblem A1):   1 \u2264 |s| \u2264 5. \n\nThe input limits for scoring 100 points are (subproblems A1+A2):   1 \u2264 |s| \u2264 10^5. \n\nHere |s| means the length of string s.\n\n\n-----Output-----\n\nPrint the number of codes that match the given hint.\n\n\n-----Examples-----\nInput\nAJ\n\nOutput\n81\n\nInput\n1?AA\n\nOutput\n100",
    "public_tests": {
      "input": [
        "AJ\n",
        "1?AA\n"
      ],
      "output": [
        "81\n",
        "100\n"
      ]
    },
    "private_tests": {
      "input": [
        "AJ\n",
        "1?AA\n",
        "?\n",
        "7\n",
        "A\n",
        "BBB?\n",
        "BC??\n",
        "CC\n",
        "CB?\n",
        "B??C?\n",
        "C?\n",
        "BB?C?\n",
        "B?\n",
        "?BCB?\n",
        "?C\n",
        "??C?C\n",
        "CB\n",
        "?BB\n",
        "BC?\n",
        "???2\n",
        "??8\n",
        "???\n",
        "5???\n",
        "9???\n",
        "?3?2\n",
        "3??\n",
        "????\n",
        "5??\n",
        "GJH2?\n",
        "7I9G4\n",
        "IG5IJ\n",
        "?J?5?\n",
        "?H2?H\n",
        "IJ?GH\n",
        "H1I??\n",
        "I?GI?\n",
        "HH???\n",
        "??JG?\n",
        "JG50?\n",
        "CDEFG\n"
      ],
      "output": [
        "81\n",
        "100\n",
        "9\n",
        "1\n",
        "9\n",
        "90\n",
        "8100\n",
        "9\n",
        "810\n",
        "81000\n",
        "90\n",
        "8100\n",
        "90\n",
        "8100\n",
        "90\n",
        "9000\n",
        "81\n",
        "90\n",
        "810\n",
        "900\n",
        "90\n",
        "900\n",
        "1000\n",
        "1000\n",
        "90\n",
        "100\n",
        "9000\n",
        "100\n",
        "6480\n",
        "90\n",
        "648\n",
        "9000\n",
        "900\n",
        "45360\n",
        "8100\n",
        "8100\n",
        "9000\n",
        "81000\n",
        "810\n",
        "27216\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 2822,
    "description": "You are playing hide-and-go-seek in a forest with Belle. The forest has one tree at each of the positive integer lattice points. That is, there is a tree at every point $(x,y)$ where $x$ and $y$ are both positive integers. You may consider each tree as a point. A logging company has cut down all of the trees in some axis-aligned rectangle, including those on the boundary of the rectangle.\n\nYou are standing at $(0,0)$ and Belle is standing at $(x_ b,y_ b)$. You can see Belle if and only if there is no tree blocking your line of sight to Belle. If there is a tree at $(x_ b,y_ b)$, Belle will make it easier for you to find her by standing on the side of the tree facing your location.\n\nFor example, suppose that Belle is standing at $(2,6)$. If the trees in the rectangle with corners at $(1,1)$ and $(5,4)$ are cut down (blue rectangle in figure), then you can see Belle. However, if the rectangle was at $(3,5)$ and $(5,7)$ (red rectangle in figure), then the tree at $(1,3)$ would be in the way.\n\nGiven the rectangle and Belle\u2019s location, can you see her?\n\n-----Input-----\nThe first line of input contains two integer $x_ b$ and $y_ b$\u00a0($1 \\leq x_ b,y_ b \\leq 10^{12}$), which are the coordinates that Belle is standing on.\n\nThe second line of input contains four integers $x_1$, $y_1$, $x_2$ and $y_2$\u00a0($1 \\leq x_1 \\leq x_2 \\leq 10^{12}$ and $1 \\leq y_1 \\leq y_2 \\leq 10^{12}$), which specify two opposite corners of the rectangle at $(x_1, y_1)$ and $(x_2, y_2)$.\n\n-----Output-----\nIf you can see Belle, display Yes.\n\nOtherwise, display No and the coordinates of the closest tree that is blocking your view.\n\n-----Examples-----\nSample Input 1:\n2 6\n1 1 5 4\nSample Output 1:\nYes\n\nSample Input 2:\n2 6\n3 5 5 7\nSample Output 2:\nNo\n1 3",
    "public_tests": {
      "input": [
        "2 6\n1 1 5 4\n",
        "2 6\n3 5 5 7\n"
      ],
      "output": [
        "Yes\n",
        "No\n1 3\n"
      ]
    },
    "private_tests": {
      "input": [
        "2 6\n1 1 5 4\n",
        "2 6\n3 5 5 7\n",
        "830844890448 39710592053\n821266 42860 402207107926 423171345006\n"
      ],
      "output": [
        "Yes\n",
        "No\n1 3\n",
        "No\n402207964848 19223704203\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 585,
    "description": "You are given two arrays $a_1, a_2, \\dots , a_n$ and $b_1, b_2, \\dots , b_m$. Array $b$ is sorted in ascending order ($b_i < b_{i + 1}$ for each $i$ from $1$ to $m - 1$).\n\nYou have to divide the array $a$ into $m$ consecutive subarrays so that, for each $i$ from $1$ to $m$, the minimum on the $i$-th subarray is equal to $b_i$. Note that each element belongs to exactly one subarray, and they are formed in such a way: the first several elements of $a$ compose the first subarray, the next several elements of $a$ compose the second subarray, and so on.\n\nFor example, if $a = [12, 10, 20, 20, 25, 30]$ and $b = [10, 20, 30]$ then there are two good partitions of array $a$:   $[12, 10, 20], [20, 25], [30]$;  $[12, 10], [20, 20, 25], [30]$. \n\nYou have to calculate the number of ways to divide the array $a$. Since the number can be pretty large print it modulo 998244353.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2 \\cdot 10^5$)\u00a0\u2014 the length of arrays $a$ and $b$ respectively.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots , a_n$ ($1 \\le a_i \\le 10^9$)\u00a0\u2014 the array $a$.\n\nThe third line contains $m$ integers $b_1, b_2, \\dots , b_m$ ($1 \\le b_i \\le 10^9; b_i < b_{i+1}$)\u00a0\u2014 the array $b$.\n\n\n-----Output-----\n\nIn only line print one integer \u2014 the number of ways to divide the array $a$ modulo 998244353.\n\n\n-----Examples-----\nInput\n6 3\n12 10 20 20 25 30\n10 20 30\n\nOutput\n2\n\nInput\n4 2\n1 3 3 7\n3 7\n\nOutput\n0\n\nInput\n8 2\n1 2 2 2 2 2 2 2\n1 2\n\nOutput\n7",
    "public_tests": {
      "input": [
        "6 3\n12 10 20 20 25 30\n10 20 30\n",
        "4 2\n1 3 3 7\n3 7\n",
        "8 2\n1 2 2 2 2 2 2 2\n1 2\n"
      ],
      "output": [
        "2\n",
        "0\n",
        "7\n"
      ]
    },
    "private_tests": {
      "input": [
        "6 3\n12 10 20 20 25 30\n10 20 30\n",
        "4 2\n1 3 3 7\n3 7\n",
        "8 2\n1 2 2 2 2 2 2 2\n1 2\n",
        "18 10\n8 1 2 3 4 9 9 5 1 6 6 7 8 6 2 9 10 7\n1 2 3 4 5 6 7 8 9 10\n",
        "1 1\n1000000000\n1000000000\n",
        "1 1\n1\n1\n",
        "5 1\n7 10 3 11 3\n3\n",
        "5 1\n7 10 3 11 2\n3\n",
        "10 1\n1 1 1 1 1 1 1 1 1 1\n1\n",
        "2 3\n1 3\n1 2 3\n",
        "1 5\n1\n1 2 3 4 1000000000\n",
        "9 9\n3 4 5 6 7 8 9 10 11\n3 4 5 6 7 8 9 10 11\n",
        "3 2\n2 2 3\n1 2\n",
        "5 2\n2 1 2 3 2\n1 3\n",
        "1 1\n2\n1\n",
        "6 3\n12 10 20 20 15 30\n10 20 30\n",
        "2 2\n10 7\n5 7\n",
        "3 3\n2 5 6\n1 5 6\n",
        "1 1\n3\n2\n",
        "2 3\n2 3\n1 2 3\n",
        "3 2\n2 2 8\n1 2\n",
        "10 5\n9 8 7 6 5 6 7 8 9 10\n6 7 8 9 10\n",
        "20 5\n8 8 2 5 2 1 5 3 6 5 5 4 5 6 3 5 5 7 3 7\n1 3 4 5 7\n",
        "5 5\n2 3 4 5 6\n1 2 3 4 5\n",
        "24 3\n4 12 3 14 2 7 12 7 11 3 5 10 14 1 6 12 13 4 1 5 5 9 8 6\n1 5 8\n",
        "1 1\n5\n3\n",
        "39 3\n4 8 12 9 19 4 2 21 20 15 6 7 4 13 10 4 10 4 22 22 12 11 10 14 5 2 11 20 15 16 14 18 1 3 4 19 4 6 15\n1 3 4\n",
        "1 2\n2\n1 2\n",
        "7 2\n2 2 3 2 3 4 3\n2 4\n",
        "5 4\n1 5 3 10 15\n1 5 10 15\n",
        "6 3\n12 20 20 25 10 30\n7 10 30\n",
        "6 3\n12 20 20 25 10 30\n10 30 35\n",
        "4 2\n3 2 6 2\n2 6\n",
        "10 4\n1 6 1 4 8 4 4 6 5 1\n1 6 7 9\n",
        "47 2\n6 2 5 1 1 9 10 7 8 6 10 8 5 10 3 5 1 7 1 1 10 8 2 4 3 9 4 6 2 8 3 5 3 8 6 7 5 4 6 6 5 3 8 2 10 6 3\n1 9\n",
        "71 4\n9 9 6 9 8 2 10 9 2 5 10 1 9 7 5 6 4 9 3 7 3 8 5 3 4 10 5 9 9 1 2 1 10 1 10 8 2 9 2 2 8 8 2 4 10 1 6 9 7 2 7 5 1 1 8 6 7 9 5 6 8 2 3 4 3 1 3 7 2 7 4\n1 2 3 7\n",
        "77 22\n7 2 4 8 10 7 5 7 9 7 5 6 2 9 10 1 5 4 5 8 6 9 3 1 8 1 10 9 6 7 7 1 5 3 6 4 9 10 7 8 2 3 10 10 9 9 2 9 1 9 7 3 2 4 7 7 1 1 10 4 2 2 8 3 2 9 9 9 5 6 7 1 10 8 3 9 1\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\n",
        "5 2\n2 3 4 5 6\n1 4\n",
        "6 1\n2 2 2 2 2 4\n1\n",
        "6 3\n12 10 20 20 5 30\n10 20 30\n",
        "6 3\n12 10 20 20 10 30\n7 10 30\n"
      ],
      "output": [
        "2\n",
        "0\n",
        "7\n",
        "0\n",
        "1\n",
        "1\n",
        "1\n",
        "0\n",
        "1\n",
        "0\n",
        "0\n",
        "1\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "3\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n",
        "0\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 2745,
    "description": "You are given a string, s, and a list of words, words, that are all of the same length. Find all starting indices of substring(s) in s that is a concatenation of each word in words exactly once and without any intervening characters.\n\nExample 1:\n\n\nInput:\ns = \"barfoothefoobarman\",\nwords = [\"foo\",\"bar\"]\nOutput: [0,9]\nExplanation: Substrings starting at index 0 and 9 are \"barfoor\" and \"foobar\" respectively.\nThe output order does not matter, returning [9,0] is fine too.\n\n\nExample 2:\n\n\nInput:\ns = \"wordgoodstudentgoodword\",\nwords = [\"word\",\"student\"]\nOutput: []",
    "public_tests": {
      "input": [
        "s = \"barfoothefoobarman\",\nwords = [\"foo\",\"bar\"]",
        "s = \"wordgoodstudentgoodword\",\nwords = [\"word\",\"student\"]"
      ],
      "output": [
        "[0,9]Explanation: Substrings starting at index 0 and 9 are \"barfoor\" and \"foobar\" respectively.\nThe output order does not matter, returning [9,0] is fine too.",
        "[]"
      ]
    },
    "private_tests": {
      "input": [
        "['\"barfoothefoobarman', ['\"foo', '\"bar\"']]",
        "['\"wordgoodgoodgoodbestword\"', ['\"word\"', '\"good\"', '\"best\"', '\"word\"']]",
        "['\"barfoofoobarthefoobarman\"', ['\"bar\"', '\"foo\"', '\"the\"']]"
      ],
      "output": [
        "[0, 9]",
        "[]",
        "[6, 9, 12]"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 82,
    "description": "Noora is a student of one famous high school. It's her final year in school\u00a0\u2014 she is going to study in university next year. However, she has to get an \u00abA\u00bb graduation certificate in order to apply to a prestigious one.\n\nIn school, where Noora is studying, teachers are putting down marks to the online class register, which are integers from 1 to k. The worst mark is 1, the best is k. Mark that is going to the certificate, is calculated as an average of all the marks, rounded to the closest integer. If several answers are possible, rounding up is produced. For example, 7.3 is rounded to 7, but 7.5 and 7.8784\u00a0\u2014 to 8. \n\nFor instance, if Noora has marks [8, 9], then the mark to the certificate is 9, because the average is equal to 8.5 and rounded to 9, but if the marks are [8, 8, 9], Noora will have graduation certificate with 8.\n\nTo graduate with \u00abA\u00bb certificate, Noora has to have mark k.\n\nNoora got n marks in register this year. However, she is afraid that her marks are not enough to get final mark k. Noora decided to ask for help in the internet, where hacker Leha immediately responded to her request. He is ready to hack class register for Noora and to add Noora any number of additional marks from 1 to k. At the same time, Leha want his hack be unseen to everyone, so he decided to add as less as possible additional marks. Please help Leha to calculate the minimal number of marks he has to add, so that final Noora's mark will become equal to k.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 100) denoting the number of marks, received by Noora and the value of highest possible mark.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 k) denoting marks received by Noora before Leha's hack.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 minimal number of additional marks, that Leha has to add in order to change Noora's final mark to k.\n\n\n-----Examples-----\nInput\n2 10\n8 9\n\nOutput\n4\nInput\n3 5\n4 4 4\n\nOutput\n3\n\n\n-----Note-----\n\nConsider the first example testcase.\n\nMaximal mark is 10, Noora received two marks\u00a0\u2014 8 and 9, so current final mark is 9. To fix it, Leha can add marks [10, 10, 10, 10] (4 marks in total) to the registry, achieving Noora having average mark equal to $\\frac{8 + 9 + 10 + 10 + 10 + 10}{6} = \\frac{57}{6} = 9.5$. Consequently, new final mark is 10. Less number of marks won't fix the situation.\n\nIn the second example Leha can add [5, 5, 5] to the registry, so that making average mark equal to 4.5, which is enough to have 5 in the certificate.",
    "public_tests": {
      "input": [
        "2 10\n8 9\n",
        "3 5\n4 4 4\n"
      ],
      "output": [
        "4",
        "3"
      ]
    },
    "private_tests": {
      "input": [
        "2 10\n8 9\n",
        "3 5\n4 4 4\n",
        "3 10\n10 8 9\n",
        "2 23\n21 23\n",
        "5 10\n5 10 10 9 10\n",
        "12 50\n18 10 26 22 22 23 14 21 27 18 25 12\n",
        "38 12\n2 7 10 8 5 3 5 6 3 6 5 1 9 7 7 8 3 4 4 4 5 2 3 6 6 1 6 7 4 4 8 7 4 5 3 6 6 6\n",
        "63 86\n32 31 36 29 36 26 28 38 39 32 29 26 33 38 36 38 36 28 43 48 28 33 25 39 39 27 34 25 37 28 40 26 30 31 42 32 36 44 29 36 30 35 48 40 26 34 30 33 33 46 42 24 36 38 33 51 33 41 38 29 29 32 28\n",
        "100 38\n30 24 38 31 31 33 32 32 29 34 29 22 27 23 34 25 32 30 30 26 16 27 38 33 38 38 37 34 32 27 33 23 33 32 24 24 30 36 29 30 33 30 29 30 36 33 33 35 28 24 30 32 38 29 30 36 31 30 27 38 31 36 15 37 32 27 29 24 38 33 28 29 34 21 37 35 32 31 27 25 27 28 31 31 36 38 35 35 36 29 35 22 38 31 38 28 31 27 34 31\n",
        "33 69\n60 69 68 69 69 60 64 60 62 59 54 47 60 62 69 69 69 58 67 69 62 69 68 53 69 69 66 66 57 58 65 69 61\n",
        "39 92\n19 17 16 19 15 30 21 25 14 17 19 19 23 16 14 15 17 19 29 15 11 25 19 14 18 20 10 16 11 15 18 20 20 17 18 16 12 17 16\n",
        "68 29\n29 29 29 29 29 28 29 29 29 27 29 29 29 29 29 29 29 23 29 29 26 29 29 29 29 29 29 29 29 29 29 29 29 29 29 29 26 29 29 29 29 29 29 29 29 29 29 29 29 22 29 29 29 29 29 29 29 29 29 29 29 29 29 28 29 29 29 29\n",
        "75 30\n22 18 21 26 23 18 28 30 24 24 19 25 28 30 23 29 18 23 23 30 26 30 17 30 18 19 25 26 26 15 27 23 30 21 19 26 25 30 25 28 20 22 22 21 26 17 23 23 24 15 25 19 18 22 30 30 29 21 30 28 28 30 27 25 24 15 22 19 30 21 20 30 18 20 25\n",
        "78 43\n2 7 6 5 5 6 4 5 3 4 6 8 4 5 5 4 3 1 2 4 4 6 5 6 4 4 6 4 8 4 6 5 6 1 4 5 6 3 2 5 2 5 3 4 8 8 3 3 4 4 6 6 5 4 5 5 7 9 3 9 6 4 7 3 6 9 6 5 1 7 2 5 6 3 6 2 5 4\n",
        "82 88\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 2 1 1 2 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1\n",
        "84 77\n28 26 36 38 37 44 48 34 40 22 42 35 40 37 30 31 33 35 36 55 47 36 33 47 40 38 27 38 36 33 35 31 47 33 30 38 38 47 49 24 38 37 28 43 39 36 34 33 29 38 36 43 48 38 36 34 33 34 35 31 26 33 39 37 37 37 35 52 47 30 24 46 38 26 43 46 41 50 33 40 36 41 37 30\n",
        "94 80\n21 19 15 16 27 16 20 18 19 19 15 15 20 19 19 21 20 19 13 17 15 9 17 15 23 15 12 18 12 13 15 12 14 13 14 17 20 20 14 21 15 6 10 23 24 8 18 18 13 23 17 22 17 19 19 18 17 24 8 16 18 20 24 19 10 19 15 10 13 14 19 15 16 19 20 15 14 21 16 16 14 14 22 19 12 11 14 13 19 32 16 16 13 20\n",
        "96 41\n13 32 27 34 28 34 30 26 21 24 29 20 25 34 25 16 27 15 22 22 34 22 25 19 23 17 17 22 26 24 23 20 21 27 19 33 13 24 22 18 30 30 27 14 26 24 20 20 22 11 19 31 19 29 18 28 30 22 17 15 28 32 17 24 17 24 24 19 26 23 22 29 18 22 23 29 19 32 26 23 22 22 24 23 27 30 24 25 21 21 33 19 35 27 34 28\n",
        "1 26\n26\n",
        "99 39\n25 28 30 28 32 34 31 28 29 28 29 30 33 19 33 31 27 33 29 24 27 30 25 38 28 34 35 31 34 37 30 22 21 24 34 27 34 33 34 33 26 26 36 19 30 22 35 30 21 28 23 35 33 29 21 22 36 31 34 32 34 32 30 32 27 33 38 25 35 26 39 27 29 29 19 33 28 29 34 38 26 30 36 26 29 30 26 34 22 32 29 38 25 27 24 17 25 28 26\n",
        "100 12\n7 6 6 3 5 5 9 8 7 7 4 7 12 6 9 5 6 3 4 7 9 10 7 7 5 3 9 6 9 9 6 7 4 10 4 8 8 6 9 8 6 5 7 4 10 7 5 6 8 9 3 4 8 5 4 8 6 10 5 8 7 5 9 8 5 8 5 6 9 11 4 9 5 5 11 4 6 6 7 3 8 9 6 7 10 4 7 6 9 4 8 11 5 4 10 8 5 10 11 4\n",
        "100 18\n1 2 2 2 2 2 1 1 1 2 3 1 3 1 1 4 2 4 1 2 1 2 1 3 2 1 2 1 1 1 2 1 2 2 1 1 4 3 1 1 2 1 3 3 2 1 2 2 1 1 1 1 3 1 1 2 2 1 1 1 5 1 2 1 3 2 2 1 4 2 2 1 1 1 1 1 1 1 1 2 2 1 2 1 1 1 2 1 2 2 2 1 1 3 1 1 2 1 1 2\n",
        "100 27\n16 20 21 10 16 17 18 25 19 18 20 12 11 21 21 23 20 26 20 21 27 16 25 18 25 21 27 12 20 27 18 17 27 13 21 26 12 22 15 21 25 21 18 27 24 15 16 18 23 21 24 27 19 17 24 14 21 16 24 26 13 14 25 18 27 26 22 16 27 27 17 25 17 12 22 10 19 27 19 20 23 22 25 23 17 25 14 20 22 10 22 27 21 20 15 26 24 27 12 16\n",
        "100 29\n20 18 23 24 14 14 16 23 22 17 18 22 21 21 19 19 14 11 18 19 16 22 25 20 14 13 21 24 18 16 18 29 17 25 12 10 18 28 11 16 17 14 15 20 17 20 18 22 10 16 16 20 18 19 29 18 25 27 17 19 24 15 24 25 16 23 19 16 16 20 19 15 12 21 20 13 21 15 15 23 16 23 17 13 17 21 13 18 17 18 18 20 16 12 19 15 27 14 11 18\n",
        "100 30\n16 10 20 11 14 27 15 17 22 26 24 17 15 18 19 22 22 15 21 22 14 21 22 22 21 22 15 17 17 22 18 19 26 18 22 20 22 25 18 18 17 23 18 18 20 13 19 30 17 24 22 19 29 20 20 21 17 18 26 25 22 19 15 18 18 20 19 19 18 18 24 16 19 17 12 21 20 16 23 21 16 17 26 23 25 28 22 20 9 21 17 24 15 19 17 21 29 13 18 15\n",
        "100 59\n56 58 53 59 59 48 59 54 46 59 59 58 48 59 55 59 59 50 59 56 59 59 59 59 59 59 59 57 59 53 45 53 50 59 50 55 58 54 59 56 54 59 59 59 59 48 56 59 59 57 59 59 48 43 55 57 39 59 46 55 55 52 58 57 51 59 59 59 59 53 59 43 51 54 46 59 57 43 50 59 47 58 59 59 59 55 46 56 55 59 56 47 56 56 46 51 47 48 59 55\n",
        "100 81\n6 7 6 6 7 6 6 6 3 9 4 5 4 3 4 6 6 6 1 3 9 5 2 3 8 5 6 9 6 6 6 5 4 4 7 7 3 6 11 7 6 4 8 7 12 6 4 10 2 4 9 11 7 4 7 7 8 8 6 7 9 8 4 5 8 13 6 6 6 8 6 2 5 6 7 5 4 4 4 4 2 6 4 8 3 4 7 7 6 7 7 10 5 10 6 7 4 11 8 4\n",
        "100 100\n30 35 23 43 28 49 31 32 30 44 32 37 33 34 38 28 43 32 33 32 50 32 41 38 33 20 40 36 29 21 42 25 23 34 43 32 37 31 30 27 36 32 45 37 33 29 38 34 35 33 28 19 37 33 28 41 31 29 41 27 32 39 30 34 37 40 33 38 35 32 32 34 35 34 28 39 28 34 40 45 31 25 42 28 29 31 33 21 36 33 34 37 40 42 39 30 36 34 34 40\n",
        "100 100\n71 87 100 85 89 98 90 90 71 65 76 75 85 100 81 100 91 80 73 89 86 78 82 89 77 92 78 90 100 81 85 89 73 100 66 60 72 88 91 73 93 76 88 81 86 78 83 77 74 93 97 94 85 78 82 78 91 91 100 78 89 76 78 82 81 78 83 88 87 83 78 98 85 97 98 89 88 75 76 86 74 81 70 76 86 84 99 100 89 94 72 84 82 88 83 89 78 99 87 76\n",
        "100 100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "100 100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n",
        "100 100\n1 1 2 1 1 1 1 1 1 1 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "100 100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 99\n",
        "100 100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 98 100 100 100 100 98 100 100 100 100 100 100 99 98 100 100 93 100 100 98 100 100 100 100 93 100 96 100 100 100 94 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 95 88 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n",
        "100 100\n95 100 100 100 100 100 100 100 100 100 100 100 100 100 87 100 100 100 94 100 100 100 100 100 100 100 100 100 100 100 100 99 100 100 100 100 100 100 100 100 100 100 90 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 97 100 100 100 96 100 98 100 100 100 100 100 96 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 97 100 100 100 100\n",
        "100 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "100 2\n2 1 1 2 1 1 1 1 2 2 2 2 1 1 1 2 1 1 1 2 2 2 2 1 1 1 1 2 2 2 1 2 2 2 2 1 2 2 1 1 1 1 1 1 2 2 1 2 1 1 1 2 1 2 2 2 2 1 1 1 2 2 1 2 1 1 1 2 1 2 2 1 1 1 2 2 1 1 2 1 1 2 1 1 1 2 1 1 1 1 2 1 1 1 1 2 1 2 1 1\n",
        "3 5\n5 5 5\n",
        "7 7\n1 1 1 1 1 1 1\n",
        "1 1\n1\n",
        "100 100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "4 10\n10 10 10 10\n",
        "1 10\n10\n",
        "10 1\n1 1 1 1 1 1 1 1 1 1\n",
        "3 10\n10 10 10\n",
        "2 4\n3 4\n",
        "1 2\n2\n",
        "3 4\n4 4 4\n",
        "3 2\n2 2 1\n",
        "5 5\n5 5 5 5 5\n",
        "3 3\n3 3 3\n",
        "2 9\n8 9\n",
        "3 10\n9 10 10\n",
        "1 3\n3\n",
        "2 2\n1 2\n",
        "2 10\n10 10\n",
        "23 14\n7 11 13 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14 14\n",
        "2 10\n9 10\n",
        "2 2\n2 2\n",
        "10 5\n5 5 5 5 5 5 5 5 5 4\n",
        "3 5\n4 5 5\n",
        "5 4\n4 4 4 4 4\n",
        "2 10\n10 9\n",
        "4 5\n3 5 5 5\n",
        "10 5\n5 5 5 5 5 5 5 5 5 5\n",
        "3 10\n10 10 9\n",
        "5 1\n1 1 1 1 1\n",
        "2 1\n1 1\n",
        "4 10\n9 10 10 10\n",
        "5 2\n2 2 2 2 2\n",
        "2 5\n4 5\n",
        "5 10\n10 10 10 10 10\n",
        "2 6\n6 6\n",
        "2 9\n9 9\n",
        "3 10\n10 9 10\n",
        "4 40\n39 40 40 40\n",
        "3 4\n3 4 4\n",
        "9 9\n9 9 9 9 9 9 9 9 9\n",
        "1 4\n4\n",
        "4 7\n1 1 1 1\n",
        "1 5\n5\n",
        "3 1\n1 1 1\n",
        "1 100\n100\n",
        "2 7\n3 5\n",
        "3 6\n6 6 6\n",
        "4 2\n1 2 2 2\n",
        "4 5\n4 5 5 5\n",
        "5 5\n1 1 1 1 1\n",
        "66 2\n1 2 2 2 2 1 1 2 1 2 2 2 2 2 2 1 2 1 2 1 2 1 2 1 2 1 1 1 1 2 2 1 2 2 1 1 2 1 2 2 1 1 1 2 1 2 1 2 1 2 1 2 2 2 2 1 2 2 1 2 1 1 1 2 2 1\n",
        "2 2\n2 1\n",
        "5 5\n5 5 5 4 5\n",
        "3 7\n1 1 1\n",
        "2 5\n5 5\n",
        "1 7\n1\n",
        "6 7\n1 1 1 1 1 1\n",
        "99 97\n15 80 78 69 12 84 36 51 89 77 88 10 1 19 67 85 6 36 8 70 14 45 88 97 22 13 75 57 83 27 13 97 9 90 68 51 76 37 5 2 16 92 11 48 13 77 35 19 15 74 22 29 21 12 28 42 56 5 32 41 62 75 71 71 68 72 24 77 11 28 78 27 53 88 74 66 1 42 18 16 18 39 75 38 81 5 13 39 40 75 13 36 53 83 9 54 57 63 64\n",
        "8 7\n1 1 1 1 1 1 1 1\n",
        "3 2\n2 2 2\n",
        "6 5\n5 5 5 5 5 5\n",
        "10 5\n5 5 5 5 5 5 5 4 1 1\n",
        "1 5\n1\n",
        "10 10\n10 10 10 10 10 10 10 10 10 10\n",
        "2 3\n2 3\n",
        "1 9\n9\n",
        "74 2\n2 2 2 2 1 2 2 1 1 1 2 2 1 2 2 2 2 1 2 1 1 1 2 1 1 2 2 1 2 1 1 2 1 1 2 2 2 2 2 2 2 2 1 2 2 2 1 2 2 1 1 2 1 1 1 1 1 1 2 2 2 1 1 1 1 1 2 2 2 2 2 2 1 2\n",
        "5 5\n5 5 5 5 4\n"
      ],
      "output": [
        "4",
        "3",
        "3",
        "2",
        "7",
        "712",
        "482",
        "6469",
        "1340",
        "329",
        "5753",
        "0",
        "851",
        "5884",
        "14170",
        "6650",
        "11786",
        "3182",
        "0",
        "1807",
        "946",
        "3164",
        "1262",
        "2024",
        "1984",
        "740",
        "14888",
        "13118",
        "3030",
        "19700",
        "0",
        "19696",
        "0",
        "0",
        "2",
        "0",
        "16",
        "0",
        "77",
        "0",
        "19700",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "0",
        "44",
        "0",
        "0",
        "0",
        "10",
        "0",
        "0",
        "0",
        "35",
        "0",
        "0",
        "0",
        "33",
        "0",
        "11",
        "66",
        "10077",
        "88",
        "0",
        "0",
        "8",
        "7",
        "0",
        "0",
        "0",
        "0",
        "0"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 2208,
    "description": "Mike and !Mike are old childhood rivals, they are opposite in everything they do, except programming. Today they have a problem they cannot solve on their own, but together (with you)\u00a0\u2014 who knows? \n\nEvery one of them has an integer sequences a and b of length n. Being given a query of the form of pair of integers (l, r), Mike can instantly tell the value of $\\operatorname{max}_{i = l}^{r} a_{i}$ while !Mike can instantly tell the value of $\\operatorname{min}_{i = l} b_{i}$.\n\nNow suppose a robot (you!) asks them all possible different queries of pairs of integers (l, r) (1 \u2264 l \u2264 r \u2264 n) (so he will make exactly n(n + 1) / 2 queries) and counts how many times their answers coincide, thus for how many pairs $\\operatorname{max}_{i = l}^{r} a_{i} = \\operatorname{min}_{i = l} b_{i}$ is satisfied.\n\nHow many occasions will the robot count?\n\n\n-----Input-----\n\nThe first line contains only integer n (1 \u2264 n \u2264 200 000).\n\nThe second line contains n integer numbers a_1, a_2, ..., a_{n} ( - 10^9 \u2264 a_{i} \u2264 10^9)\u00a0\u2014 the sequence a.\n\nThe third line contains n integer numbers b_1, b_2, ..., b_{n} ( - 10^9 \u2264 b_{i} \u2264 10^9)\u00a0\u2014 the sequence b.\n\n\n-----Output-----\n\nPrint the only integer number\u00a0\u2014 the number of occasions the robot will count, thus for how many pairs $\\operatorname{max}_{i = l}^{r} a_{i} = \\operatorname{min}_{i = l} b_{i}$ is satisfied.\n\n\n-----Examples-----\nInput\n6\n1 2 3 2 1 4\n6 7 1 2 3 2\n\nOutput\n2\n\nInput\n3\n3 3 3\n1 1 1\n\nOutput\n0\n\n\n\n-----Note-----\n\nThe occasions in the first sample case are:\n\n1.l = 4,r = 4 since max{2} = min{2}.\n\n2.l = 4,r = 5 since max{2, 1} = min{2, 3}.\n\nThere are no occasions in the second sample case since Mike will answer 3 to any query pair, but !Mike will always answer 1.",
    "public_tests": {
      "input": [
        "6\n1 2 3 2 1 4\n6 7 1 2 3 2\n",
        "3\n3 3 3\n1 1 1\n"
      ],
      "output": [
        "2\n",
        "0\n"
      ]
    },
    "private_tests": {
      "input": [
        "6\n1 2 3 2 1 4\n6 7 1 2 3 2\n",
        "3\n3 3 3\n1 1 1\n",
        "17\n714413739 -959271262 714413739 -745891378 926207665 -404845105 -404845105 -959271262 -189641729 -670860364 714413739 -189641729 192457837 -745891378 -670860364 536388097 -959271262\n-417715348 -959271262 -959271262 714413739 -189641729 571055593 571055593 571055593 -417715348 -417715348 192457837 -745891378 536388097 571055593 -189641729 571055593 -670860364\n",
        "1\n509658558\n509658558\n",
        "1\n509658558\n-544591380\n",
        "3\n1 1 1\n2 2 2\n"
      ],
      "output": [
        "2\n",
        "0\n",
        "1\n",
        "1\n",
        "0\n",
        "0\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1068,
    "description": "A correct expression of the form a+b=c was written; a, b and c are non-negative integers without leading zeros. In this expression, the plus and equally signs were lost. The task is to restore the expression. In other words, one character '+' and one character '=' should be inserted into given sequence of digits so that:   character'+' is placed on the left of character '=',  characters '+' and '=' split the sequence into three non-empty subsequences consisting of digits (let's call the left part a, the middle part\u00a0\u2014 b and the right part\u00a0\u2014 c),  all the three parts a, b and c do not contain leading zeros,  it is true that a+b=c. \n\nIt is guaranteed that in given tests answer always exists.\n\n\n-----Input-----\n\nThe first line contains a non-empty string consisting of digits. The length of the string does not exceed 10^6.\n\n\n-----Output-----\n\nOutput the restored expression. If there are several solutions, you can print any of them.\n\nNote that the answer at first should contain two terms (divided with symbol '+'), and then the result of their addition, before which symbol'=' should be. \n\nDo not separate numbers and operation signs with spaces. Strictly follow the output format given in the examples.\n\nIf you remove symbol '+' and symbol '=' from answer string you should get a string, same as string from the input data.\n\n\n-----Examples-----\nInput\n12345168\n\nOutput\n123+45=168\n\nInput\n099\n\nOutput\n0+9=9\n\nInput\n199100\n\nOutput\n1+99=100\n\nInput\n123123123456456456579579579\n\nOutput\n123123123+456456456=579579579",
    "public_tests": {
      "input": [
        "12345168\n",
        "099\n",
        "199100\n",
        "123123123456456456579579579\n"
      ],
      "output": [
        "123+45=168\n",
        "0+9=9\n",
        "1+99=100\n",
        "123123123+456456456=579579579\n"
      ]
    },
    "private_tests": {
      "input": [
        "12345168\n",
        "099\n",
        "199100\n",
        "123123123456456456579579579\n",
        "112\n",
        "101\n",
        "19999999999999999999991000000000000000000000\n",
        "011\n",
        "178\n",
        "56772\n",
        "24823441936901\n",
        "90001667868290010349\n",
        "2099339395097728908986834555921320993394819322848302\n",
        "000\n",
        "814752277691991477306861346922924221557534659480258977017038624458370459477306861346922924221557534659480258977017853376736062450\n",
        "10111110001111101\n",
        "1101111000111111\n",
        "101011100101111\n",
        "10001100110110111\n",
        "1011100011101\n",
        "10101110100111111\n",
        "989121001\n",
        "1999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999910000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n",
        "999091008\n",
        "100277221476489181970323375139380435110027722147648918197032337513938043511002772214764891819703233751393804351100277221476489181970323375139380435120055444295297836394064675027876087022005544429529783639406467502787608702\n"
      ],
      "output": [
        "123+45=168\n",
        "0+9=9\n",
        "1+99=100\n",
        "123123123+456456456=579579579\n",
        "1+1=2\n",
        "1+0=1\n",
        "1+999999999999999999999=1000000000000000000000\n",
        "0+1=1\n",
        "1+7=8\n",
        "5+67=72\n",
        "2482+34419=36901\n",
        "90001667+8682=90010349\n",
        "20993393950977289089+868345559213=20993394819322848302\n",
        "0+0=0\n",
        "814752277691991+477306861346922924221557534659480258977017038624458370459=477306861346922924221557534659480258977017853376736062450\n",
        "101+1111000=1111101\n",
        "110111+1000=111111\n",
        "101011+100=101111\n",
        "10001+100110=110111\n",
        "101+11000=11101\n",
        "101011+10100=111111\n",
        "989+12=1001\n",
        "1+9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999=10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n",
        "99+909=1008\n",
        "10027722147648918197032337513938043511002772214764891819703233751393804351+10027722147648918197032337513938043511002772214764891819703233751393804351=20055444295297836394064675027876087022005544429529783639406467502787608702\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1465,
    "description": "There are $n$ children, who study at the school \u211641. It is well-known that they are good mathematicians. Once at a break, they arranged a challenge for themselves. All children arranged in a row and turned heads either to the left or to the right.\n\nChildren can do the following: in one second\u00a0several pairs of neighboring children who are looking at each other can simultaneously turn the head in the opposite direction. For instance, the one who was looking at the right neighbor turns left and vice versa for the second child. Moreover, every second at least one pair of neighboring children performs such action. They are going to finish when there is no pair of neighboring children who are looking at each other. \n\nYou are given the number $n$, the initial arrangement of children and the number $k$. You have to find a way for the children to act if they want to finish the process in exactly $k$ seconds. More formally, for each of the $k$ moves, you need to output the numbers of the children who turn left during this move.\n\nFor instance, for the configuration shown below and $k = 2$ children can do the following steps:  [Image]  At the beginning, two pairs make move: $(1, 2)$ and $(3, 4)$. After that, we receive the following configuration:  [Image]  At the second move pair $(2, 3)$ makes the move. The final configuration is reached. Good job.  [Image] \n\nIt is guaranteed that if the solution exists, it takes not more than $n^2$ \"headturns\".\n\n\n-----Input-----\n\nThe first line of input contains two integers $n$ and $k$ ($2 \\le n \\le 3000$, $1 \\le k \\le 3000000$) \u00a0\u2014 the number of children and required number of moves.\n\nThe next line contains a string of length $n$ and consists only of characters L and R, where L means that the child looks to the left and R means that the child looks to the right. \n\n\n-----Output-----\n\nIf there is no solution, print a single line with number $-1$.\n\nOtherwise, output $k$ lines. Each line has to start with a number $n_i$ ($1\\le n_i \\le \\frac{n}{2}$) \u00a0\u2014 the number of pairs of children, who turn at this move. After that print $n_i$ distinct integers \u00a0\u2014 the numbers of the children who will turn left during this move. \n\nAfter performing all \"headturns\", there can't be a pair of two neighboring children looking at each other.\n\nIf there are many solutions, print any of them.\n\n\n-----Examples-----\nInput\n2 1\nRL\n\nOutput\n1 1 \n\nInput\n2 1\nLR\n\nOutput\n-1\nInput\n4 2\nRLRL\n\nOutput\n2 1 3 \n1 2\n\n\n\n-----Note-----\n\nThe first sample contains a pair of children who look at each other. After one move, they can finish the process.\n\nIn the second sample, children can't make any move. As a result, they can't end in $k>0$ moves.\n\nThe third configuration is described in the statement.",
    "public_tests": {
      "input": [
        "2 1\nRL\n",
        "2 1\nLR\n",
        "4 2\nRLRL\n"
      ],
      "output": [
        "1 1 \n",
        "-1 \n",
        "2 1 3\n1 2 \n"
      ]
    },
    "private_tests": {
      "input": [
        "2 1\nRL\n",
        "2 1\nLR\n",
        "4 2\nRLRL\n",
        "3 2\nRRL\n",
        "3 2\nLRL\n",
        "250 2188894\nLRLLLRRLRLRRLLRRRRRRRRRLRRLLRLLRLRLRLRRLLLRRLLLRLRRRRRRRLLLRRRRRLLLLRLRRRLRRRLLLLLLLLRRLRRLLRRRLLLRLLRRRLLRRLRLRLLLRLRRLLRRRRLRRLRLLLLRLRRLLLLLRRLRLRRRLLLRRLLLRRRLLRLRRRLRRRRRLRRLRRLLLRLRRRLLLRLLRRRLLRRLLRLLLLRRRRRLLRRLRLRRRLLRRRRRLRLLRRRRLLLRRRLRRLR\n",
        "258 7719\nRLLLRRLRRRRRLRLLLLLRRLRRRRRLLLRLRLLLLLRLLLRRRRRLLLRRLRLRLRLLRRLLRLRLLLLLLLLLLLRRLLLLRLLLLLRLLRLLRRRLLRLLLLLLRLRRRRLRLLRLRLRRLLRLRLRLLLRRLRLLLLLLLLLRRRLLRRLRRLLLLLLLLRRRLLLRRRLLRLLLLRLRLRLRLLRRLLLLRLRRRLLRRLRLRLLLRRRRRRLRRRLLLRRRLRLRLLRLLRLRLLRLRLLLRLRRLRRRRL\n",
        "476 252\nRRLLLRRRLLLLLRLRRLLRLLLRLRRLRRLLRLRLRRLLRRRRLLLRRRLLLLRLRLRRRLRLLRRRLRLRRLLRRLLLRLLRLRLLLRLRRLLLRLLLRLLRRRLRLRLLRLLLLLLRLRLRRRRLLRLRRRLRLLRRRLRRRRLRRRLRLLRLRRRLLRRLLRLLRLLRLRLRLRRLLLRLLLLLRLRRRRRLRLRLRLLLLRRLRRLLRLRLRLLRLLRLLRRLRLRLLRLRLRLRLRRLLLRLRRLLRLLRLLRLRLRLLRRLLRLLRLLLLLRLLLLRLLRLLLLLLLLLLLLLLRLRRRLRLLRRLLLRLLLLRRRRRRRRLRLRRLLRRLLLLRLLRLLRLRRLLRLLRRRLRLRRLRLRRRLRRLRRRRRRLLLLRLRRLLRRLLRRRLRRRRRLRRLLRRLRLRLLRLRLLLLLRLRLLRLLLRRRLLLLRRRLLRLRRLLLLRLLLLLRLRRRRRLRRLRRRRRL\n",
        "127 67\nLLLRRRLRLRLLRRRLRLLLLRRLRRLRLRLRRLLRLLRRLRLRLLLRRLRLLLRRRRRRLLLRLLLLRRLLRRRRRLRRRLRRLLRRRRRLLLRLLLLRRRRLLRLRLRRRLLLRRRRLRRRLLRL\n",
        "189 106\nRLRRRLLRRRRRRRRRLLLRLRLRRRRLLRRLRRRRRLLRLLLRRLRRRRLLRLRRRLLRRLLRRLLLRRLLLRLRRLRLRLLRRLLLLRRRLLRRLRLLLRLLLLLLRRLLLRLRRRRLRLLLLRRLLLRLRLLLLRLRLRRRLRRRRLLLLLRRRLRRRRRLLRRLLRRLLRLRLLLLRRLRLLRRR\n",
        "308 2805095\nRRRRRLLLRRLLLLRRLLRRLRLRLRRLLLRLLRRLLLLRLRRLRRLLLLLLLLRLRLRLRLLLRLRLRLLRLLRLRRRLRLRLRLRLLRLLLRRLRLRRRRRLRRRLRRRRLRRRRRRRLLRRRRLRRLLRLLLLRLRRRRRRRLRRLRRLRRRRLLLLRLRLLLRRLRLLLRLLLLRLRLRLRLLLLLLLLRLRRRRRRRRRLLRLLRRRRLLLRLLRLRLRLLRLRRRLLLLLLRRRRLLLLLRRLLLRLLRLRRRRLRRRLRRRRLLLLRLLLLLLLLRLLRRRLLRRRRRLRRLRLRLRLLRL\n",
        "175 67888\nLRRRRRLLLLLRRLRLLLRRRRLRRLRRLRRRRLRLRRRRRRRRRLRLRRRLLRRRRLRLLRRRLLLLRRRRRLRRRRRRLLRLLRLLLRLLRLLLLLLRLLRRRRLLRRLLRRRLRLRLRRRRRRLRLRRRLLLLRLRRLLRRRRLLRRRLLLRLLLLLRLRLLRLRRLRLLRL\n",
        "209 54\nLRLRRLLRLRRRRRLLLLRLLRRLRLLLRLRRLLRLLLLLRRRRLLRRRRLLRLLRRLRRLLRRLLRLRRRLLRLLLLLRLLRRLLLRRLRLRLLLLRRLRRRLLLLRRRLLRLLRRLLRLRLRLRLRLRLLRRLLLLRLRLRLLRLLRLLRRRLLRLRRRLLLLRLLLRLRLLRRLRRLRRLLLLLLLLLLRRRRRLRRLLRRLLRRL\n",
        "258 71\nRRRRLLRLLRRLLLLLRRRLRRRRRRLRLLRLRLLLRRLLLLRLLLRRLLRRLRRRLLLRRRLRLRRRRRRLLRLRRRRLLRRLRRRLLLRRRRLRRRLRLRLLRRLRRRLLLLLLLRRLRRLLLRRLLLLLLRRRLLRLRLRLLLRLLRLRRRLRRLLLLLLRRRRLRLRRRLRLRLLLRLRLRRRLRLLRRLLRLLRLLLLRLRRLLLRRLLLLLLRLLRRRRRRRRRRRRRRLLLLRRRRRLRRLLLRLLLRLRR\n",
        "347 152\nRRRLRRRLLRRRLRRLRRRRLRRRRLLRLRLRRLRRRLRLRRRLLLRLLLRLLLLLRLRLLRRRLRLLRRRRLRLRLLLLLRRRLRRLRLLRRLRRLRRLLLRRRLLRLRLLRRRLRRRLLRLRLLLRRLLRLLLRRRRRLRLLRRRLRRLRLLRRLRRRLRRRLLLLLLLRLLLLLRRLRRLRRRLRRRRLLRRRLRRRLRRRRLRRLRLLLRLLLLLRRLLRRRRLLRLLRRLRLRRLRLRRRLLRLLRLRLLLRLRLRLLRRRLLRRLRLRRLRRRLRLRLLLLRRRLRLRLLLRLRRRLRRLLRRLLLRLRLLLRRLLLLRLLLRRLLRLRRRLLLLRRLRRL\n",
        "488 2493006\nRRRRRRRRRLRRRRRLLRLLRRRLRRLRLRRRLLRLLLLRRLRLLLRLRRLLRRRRRRLLRLRLRRLRLRLRRRRLRRRRLLRLRRRLRLRRLRRLLLLLRRLRRLLLLLRRRLLRRLRRLLLLRRRRRLRLRRRLRRRLLRRLRRRLLRLRLRRRRLLLRLLLLRRLLLLRRRLLRLLRRRRLRRLRRLRLRLLLRLLRRLLRLRRRRRRLLLLLLLLRRRLRRLRLLLRLRLRLLRLRRRRLRLRRLRRRLRRRLRRRLRRLLLRLLLLRLLRRRLRRRRRRLLRRRLRLRLLRLRLRRRRRRLRRRLLLRLLLRLLLLRLRRLLRLRLRLLRLLRLLRRLRLLLRLLLLRLLRLRRLLLRRLRLLRRRLRLRRLLRLLRRRLLRLLRRLRRLRRLLRRLLRLRRLRLLRLRRLLLLLRLLRLRRRRLRRLRRLRLLLLRRRLLLLLLLLLLLLRRLLRLLLRLLRLLRLRLRLLRRRLLRRRRLR\n",
        "444 368721\nLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\n"
      ],
      "output": [
        "1 1 \n",
        "-1",
        "2 1 3 \n1 2\n",
        "1 2 \n1 1\n",
        "-1",
        "-1",
        "-1",
        "-1",
        "-1",
        "-1",
        "-1",
        "-1",
        "-1",
        "-1",
        "-1",
        "-1",
        "-1"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 170,
    "description": "Two bored soldiers are playing card war. Their card deck consists of exactly n cards, numbered from 1 to n, all values are different. They divide cards between them in some manner, it's possible that they have different number of cards. Then they play a \"war\"-like card game. \n\nThe rules are following. On each turn a fight happens. Each of them picks card from the top of his stack and puts on the table. The one whose card value is bigger wins this fight and takes both cards from the table to the bottom of his stack. More precisely, he first takes his opponent's card and puts to the bottom of his stack, and then he puts his card to the bottom of his stack. If after some turn one of the player's stack becomes empty, he loses and the other one wins. \n\nYou have to calculate how many fights will happen and who will win the game, or state that game won't end.\n\n\n-----Input-----\n\nFirst line contains a single integer n (2 \u2264 n \u2264 10), the number of cards.\n\nSecond line contains integer k_1 (1 \u2264 k_1 \u2264 n - 1), the number of the first soldier's cards. Then follow k_1 integers that are the values on the first soldier's cards, from top to bottom of his stack.\n\nThird line contains integer k_2 (k_1 + k_2 = n), the number of the second soldier's cards. Then follow k_2 integers that are the values on the second soldier's cards, from top to bottom of his stack.\n\nAll card values are different.\n\n\n-----Output-----\n\nIf somebody wins in this game, print 2 integers where the first one stands for the number of fights before end of game and the second one is 1 or 2 showing which player has won.\n\nIf the game won't end and will continue forever output  - 1.\n\n\n-----Examples-----\nInput\n4\n2 1 3\n2 4 2\n\nOutput\n6 2\nInput\n3\n1 2\n2 1 3\n\nOutput\n-1\n\n\n-----Note-----\n\nFirst sample:  [Image] \n\nSecond sample:  [Image]",
    "public_tests": {
      "input": [
        "4\n2 1 3\n2 4 2\n",
        "3\n1 2\n2 1 3\n"
      ],
      "output": [
        "6 2",
        "-1"
      ]
    },
    "private_tests": {
      "input": [
        "4\n2 1 3\n2 4 2\n",
        "3\n1 2\n2 1 3\n",
        "5\n4 5 3 2 4\n1 1\n",
        "6\n2 6 5\n4 1 2 3 4\n",
        "7\n6 6 5 2 7 4 1\n1 3\n",
        "8\n7 2 3 1 5 6 4 8\n1 7\n",
        "9\n2 3 6\n7 9 7 8 5 2 1 4\n",
        "10\n3 7 10 8\n7 4 6 9 2 5 1 3\n",
        "3\n2 2 1\n1 3\n",
        "3\n2 3 2\n1 1\n",
        "3\n1 3\n2 2 1\n",
        "3\n1 1\n2 3 2\n",
        "3\n1 2\n2 3 1\n",
        "3\n2 3 1\n1 2\n",
        "3\n1 3\n2 1 2\n",
        "3\n2 1 3\n1 2\n",
        "3\n2 1 2\n1 3\n",
        "2\n1 1\n1 2\n",
        "4\n2 2 1\n2 4 3\n",
        "4\n1 2\n3 3 4 1\n",
        "4\n3 3 2 1\n1 4\n",
        "4\n3 2 3 1\n1 4\n",
        "4\n3 1 4 2\n1 3\n",
        "4\n3 1 3 2\n1 4\n",
        "5\n2 2 1\n3 4 5 3\n",
        "5\n1 4\n4 5 2 3 1\n",
        "5\n1 2\n4 5 1 4 3\n",
        "5\n2 2 4\n3 3 1 5\n",
        "5\n4 2 4 3 1\n1 5\n",
        "5\n4 1 3 4 2\n1 5\n",
        "5\n4 3 2 5 1\n1 4\n",
        "5\n1 4\n4 3 2 5 1\n",
        "5\n4 4 1 3 2\n1 5\n",
        "5\n4 1 4 3 2\n1 5\n",
        "5\n4 1 5 3 2\n1 4\n",
        "6\n3 2 4 1\n3 3 6 5\n",
        "6\n1 4\n5 2 5 6 3 1\n",
        "6\n5 1 5 4 6 2\n1 3\n",
        "6\n2 4 6\n4 1 3 2 5\n",
        "6\n4 2 1 6 4\n2 5 3\n",
        "6\n1 6\n5 1 3 2 5 4\n",
        "6\n5 4 6 3 2 1\n1 5\n",
        "6\n1 5\n5 4 6 3 2 1\n",
        "6\n5 1 5 4 3 2\n1 6\n",
        "6\n5 1 4 3 5 2\n1 6\n",
        "6\n5 1 4 2 5 3\n1 6\n",
        "6\n5 1 3 4 5 2\n1 6\n",
        "7\n1 1\n6 5 6 3 2 7 4\n",
        "7\n6 5 1 2 6 4 3\n1 7\n",
        "7\n6 3 5 2 1 6 4\n1 7\n",
        "7\n1 6\n6 1 2 5 4 7 3\n",
        "8\n1 4\n7 3 8 6 1 5 7 2\n",
        "8\n7 3 1 5 4 7 6 2\n1 8\n",
        "9\n8 3 1 4 5 2 6 9 8\n1 7\n",
        "9\n7 6 5 9 2 1 3 8\n2 7 4\n",
        "9\n8 7 4 3 1 6 5 9 2\n1 8\n",
        "9\n8 4 8 5 6 3 2 7 1\n1 9\n",
        "10\n2 9 3\n8 10 4 1 8 6 2 7 5\n",
        "10\n2 7 1\n8 8 2 4 3 5 6 10 9\n",
        "10\n1 5\n9 3 2 8 7 1 9 10 6 4\n",
        "10\n9 6 2 1 4 8 7 3 10 5\n1 9\n",
        "10\n1 10\n9 9 4 7 8 5 2 6 3 1\n",
        "10\n5 1 2 7 9 6\n5 3 4 10 8 5\n",
        "10\n9 8 7 6 2 3 5 4 9 1\n1 10\n",
        "10\n1 10\n9 5 7 6 1 2 3 9 8 4\n",
        "10\n9 8 7 6 2 3 5 4 10 1\n1 9\n",
        "10\n9 4 6 5 3 1 8 9 7 2\n1 10\n",
        "10\n9 4 6 5 3 1 8 10 7 2\n1 9\n",
        "10\n9 4 9 6 5 8 3 2 7 1\n1 10\n",
        "10\n3 8 4 10\n7 1 2 6 7 3 9 5\n",
        "10\n4 6 2 7 1\n6 3 8 10 9 5 4\n",
        "10\n2 7 8\n8 3 5 2 10 4 9 1 6\n",
        "10\n2 7 5\n8 9 3 2 4 6 8 1 10\n",
        "10\n3 4 9 2\n7 5 1 6 8 3 7 10\n",
        "10\n5 4 9 1 8 7\n5 6 10 3 5 2\n",
        "10\n3 4 5 1\n7 9 10 3 2 6 7 8\n",
        "10\n3 5 9 8\n7 2 3 7 10 1 6 4\n",
        "10\n1 5\n9 4 9 1 7 2 6 10 3 8\n",
        "10\n4 3 10 8 7\n6 4 2 5 6 1 9\n",
        "10\n8 1 6 5 3 8 7 10 4\n2 9 2\n",
        "2\n1 2\n1 1\n"
      ],
      "output": [
        "6 2",
        "-1",
        "1 1",
        "6 1",
        "1 1",
        "15 1",
        "2 2",
        "25 1",
        "2 2",
        "1 1",
        "2 1",
        "1 2",
        "1 2",
        "1 1",
        "-1",
        "-1",
        "-1",
        "1 2",
        "2 2",
        "1 2",
        "3 2",
        "7 2",
        "7 1",
        "5 2",
        "2 2",
        "1 2",
        "1 2",
        "-1",
        "-1",
        "-1",
        "7 1",
        "7 2",
        "6 2",
        "-1",
        "-1",
        "3 2",
        "3 2",
        "3 1",
        "-1",
        "-1",
        "-1",
        "19 1",
        "19 2",
        "17 2",
        "-1",
        "-1",
        "-1",
        "1 2",
        "-1",
        "14 2",
        "-1",
        "3 2",
        "41 2",
        "11 1",
        "-1",
        "25 1",
        "-1",
        "2 2",
        "2 2",
        "7 2",
        "-1",
        "-1",
        "-1",
        "105 2",
        "105 1",
        "103 1",
        "-1",
        "-1",
        "-1",
        "37 1",
        "10 2",
        "12 2",
        "10 2",
        "7 2",
        "21 2",
        "3 2",
        "19 2",
        "7 2",
        "8 1",
        "40 1",
        "1 1"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1990,
    "description": "The development of a text editor is a hard problem. You need to implement an extra module for brackets coloring in text.\n\nYour editor consists of a line with infinite length and cursor, which points to the current character. Please note that it points to only one of the characters (and not between a pair of characters). Thus, it points to an index character. The user can move the cursor left or right one position. If the cursor is already at the first (leftmost) position, then it does not move left.\n\nInitially, the cursor is in the first (leftmost) character.\n\nAlso, the user can write a letter or brackets (either (, or )) to the position that the cursor is currently pointing at. A new character always overwrites the old value at that position.\n\nYour editor must check, whether the current line is the correct text. Text is correct if the brackets in them form the correct bracket sequence.\n\nFormally, correct text (CT) must satisfy the following rules:   any line without brackets is CT (the line can contain whitespaces);  If the first character of the string \u2014 is (, the last \u2014 is ), and all the rest form a CT, then the whole line is a CT;  two consecutively written CT is also CT. \n\nExamples of correct texts: hello(codeforces), round, ((i)(write))edi(tor)s, ( me). Examples of incorrect texts: hello)oops(, round), ((me).\n\nThe user uses special commands to work with your editor. Each command has its symbol, which must be written to execute this command.\n\nThe correspondence of commands and characters is as follows:   L \u2014 move the cursor one character to the left (remains in place if it already points to the first character);  R \u2014 move the cursor one character to the right;  any lowercase Latin letter or bracket (( or )) \u2014 write the entered character to the position where the cursor is now. \n\nFor a complete understanding, take a look at the first example and its illustrations in the note below.\n\nYou are given a string containing the characters that the user entered. For the brackets coloring module's work, after each command you need to:\n\n  check if the current text in the editor is a correct text;  if it is, print the least number of colors that required, to color all brackets. \n\nIf two pairs of brackets are nested (the first in the second or vice versa), then these pairs of brackets should be painted in different colors. If two pairs of brackets are not nested, then they can be painted in different or the same colors. For example, for the bracket sequence ()(())()() the least number of colors is $2$, and for the bracket sequence (()(()())())(()) \u2014 is $3$.\n\nWrite a program that prints the minimal number of colors after processing each command.\n\n\n-----Input-----\n\nThe first line contains an integer $n$ ($1 \\le n \\le 10^6$) \u2014 the number of commands. \n\nThe second line contains $s$ \u2014 a sequence of commands. The string $s$ consists of $n$ characters. It is guaranteed that all characters in a string are valid commands.\n\n\n-----Output-----\n\nIn a single line print $n$ integers, where the $i$-th number is:\n\n  $-1$ if the line received after processing the first $i$ commands is not valid text,  the minimal number of colors in the case of the correct text. \n\n\n-----Examples-----\nInput\n11\n(RaRbR)L)L(\n\nOutput\n-1 -1 -1 -1 -1 -1 1 1 -1 -1 2 \nInput\n11\n(R)R(R)Ra)c\n\nOutput\n-1 -1 1 1 -1 -1 1 1 1 -1 1 \n\n\n-----Note-----\n\nIn the first example, the text in the editor will take the following form:\n\n  (\n\n^  (\n\n ^  (a\n\n ^  (a\n\n  ^  (ab\n\n  ^  (ab\n\n   ^  (ab)\n\n   ^  (ab)\n\n  ^  (a))\n\n  ^  (a))\n\n ^  (())\n\n ^",
    "public_tests": {
      "input": [
        "11\n(RaRbR)L)L(\n",
        "11\n(R)R(R)Ra)c\n"
      ],
      "output": [
        "-1 -1 -1 -1 -1 -1 1 1 -1 -1 2 ",
        "-1 -1 1 1 -1 -1 1 1 1 -1 1 "
      ]
    },
    "private_tests": {
      "input": [
        "11\n(RaRbR)L)L(\n",
        "11\n(R)R(R)Ra)c\n",
        "1\na\n",
        "3\n(R)\n",
        "3\n(R(\n",
        "3\n)R)\n",
        "3\n)R(\n",
        "3\n(l)\n",
        "21\n(RRRRR)LLLL(RRR)LL(R)\n"
      ],
      "output": [
        "-1 -1 -1 -1 -1 -1 1 1 -1 -1 2 ",
        "-1 -1 1 1 -1 -1 1 1 1 -1 1 ",
        "0 ",
        "-1 -1 1 ",
        "-1 -1 -1 ",
        "-1 -1 -1 ",
        "-1 -1 -1 ",
        "-1 0 -1 ",
        "-1 -1 -1 -1 -1 -1 1 1 1 1 1 -1 -1 -1 -1 2 2 2 -1 -1 3 "
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1208,
    "description": "Berland National Library has recently been built in the capital of Berland. In addition, in the library you can take any of the collected works of Berland leaders, the library has a reading room.\n\nToday was the pilot launch of an automated reading room visitors' accounting system! The scanner of the system is installed at the entrance to the reading room. It records the events of the form \"reader entered room\", \"reader left room\". Every reader is assigned a registration number during the registration procedure at the library \u2014 it's a unique integer from 1 to 10^6. Thus, the system logs events of two forms:  \"+ r_{i}\" \u2014 the reader with registration number r_{i} entered the room;  \"- r_{i}\" \u2014 the reader with registration number r_{i} left the room. \n\nThe first launch of the system was a success, it functioned for some period of time, and, at the time of its launch and at the time of its shutdown, the reading room may already have visitors.\n\nSignificant funds of the budget of Berland have been spent on the design and installation of the system. Therefore, some of the citizens of the capital now demand to explain the need for this system and the benefits that its implementation will bring. Now, the developers of the system need to urgently come up with reasons for its existence.\n\nHelp the system developers to find the minimum possible capacity of the reading room (in visitors) using the log of the system available to you.\n\n\n-----Input-----\n\nThe first line contains a positive integer n (1 \u2264 n \u2264 100) \u2014 the number of records in the system log. Next follow n events from the system journal in the order in which the were made. Each event was written on a single line and looks as \"+ r_{i}\" or \"- r_{i}\", where r_{i} is an integer from 1 to 10^6, the registration number of the visitor (that is, distinct visitors always have distinct registration numbers).\n\nIt is guaranteed that the log is not contradictory, that is, for every visitor the types of any of his two consecutive events are distinct. Before starting the system, and after stopping the room may possibly contain visitors.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the minimum possible capacity of the reading room.\n\n\n-----Examples-----\nInput\n6\n+ 12001\n- 12001\n- 1\n- 1200\n+ 1\n+ 7\n\nOutput\n3\nInput\n2\n- 1\n- 2\n\nOutput\n2\nInput\n2\n+ 1\n- 1\n\nOutput\n1\n\n\n-----Note-----\n\nIn the first sample test, the system log will ensure that at some point in the reading room were visitors with registration numbers 1, 1200 and 12001. More people were not in the room at the same time based on the log. Therefore, the answer to the test is 3.",
    "public_tests": {
      "input": [
        "6\n+ 12001\n- 12001\n- 1\n- 1200\n+ 1\n+ 7\n",
        "2\n- 1\n- 2\n",
        "2\n+ 1\n- 1\n"
      ],
      "output": [
        "3",
        "2",
        "1"
      ]
    },
    "private_tests": {
      "input": [
        "6\n+ 12001\n- 12001\n- 1\n- 1200\n+ 1\n+ 7\n",
        "2\n- 1\n- 2\n",
        "2\n+ 1\n- 1\n",
        "5\n+ 1\n- 1\n+ 2\n+ 3\n- 4\n",
        "3\n- 1\n- 2\n- 3\n",
        "4\n+ 1\n+ 2\n- 1\n+ 3\n",
        "6\n+ 1\n+ 2\n- 1\n+ 3\n- 2\n+ 4\n",
        "3\n+ 1\n+ 2\n- 3\n",
        "3\n- 1\n+ 2\n- 2\n",
        "4\n- 1\n- 2\n+ 3\n+ 4\n",
        "1\n+ 1\n",
        "1\n- 1\n",
        "3\n- 1\n+ 1\n- 1\n",
        "10\n+ 1\n+ 2\n+ 3\n+ 4\n+ 5\n+ 6\n+ 7\n+ 8\n+ 9\n+ 10\n",
        "5\n+ 5\n+ 4\n- 4\n- 5\n+ 5\n",
        "50\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n+ 100\n- 100\n",
        "10\n- 8\n- 4\n+ 8\n+ 10\n+ 6\n- 8\n+ 9\n- 2\n- 7\n+ 4\n",
        "20\n+ 3\n- 3\n- 2\n+ 2\n+ 3\n- 5\n- 1\n+ 1\n- 3\n+ 4\n- 1\n+ 1\n+ 3\n- 3\n+ 5\n- 2\n- 1\n+ 2\n+ 1\n- 5\n",
        "50\n+ 4\n+ 5\n+ 3\n+ 2\n- 2\n- 3\n- 4\n+ 3\n+ 2\n- 3\n+ 4\n- 2\n- 4\n+ 2\n+ 3\n- 3\n- 5\n- 1\n+ 4\n+ 5\n- 5\n+ 3\n- 4\n- 3\n- 2\n+ 4\n+ 3\n+ 2\n- 2\n- 4\n+ 5\n+ 1\n+ 4\n+ 2\n- 2\n+ 2\n- 3\n- 5\n- 4\n- 1\n+ 5\n- 2\n- 5\n+ 5\n+ 3\n- 3\n+ 1\n+ 3\n+ 2\n- 1\n",
        "10\n- 2\n+ 1\n- 1\n+ 2\n- 2\n+ 2\n+ 1\n- 1\n- 2\n+ 1\n",
        "50\n+ 1\n+ 2\n+ 3\n+ 4\n+ 5\n+ 6\n+ 7\n+ 8\n+ 9\n+ 10\n+ 11\n+ 12\n+ 13\n+ 14\n+ 15\n+ 16\n+ 17\n+ 18\n+ 19\n+ 20\n+ 21\n+ 22\n+ 23\n+ 24\n+ 25\n+ 26\n+ 27\n+ 28\n+ 29\n+ 30\n+ 31\n+ 32\n+ 33\n+ 34\n+ 35\n+ 36\n+ 37\n+ 38\n+ 39\n+ 40\n+ 41\n+ 42\n+ 43\n+ 44\n+ 45\n+ 46\n+ 47\n+ 48\n+ 49\n+ 50\n",
        "50\n- 1\n- 2\n- 3\n- 4\n- 5\n- 6\n- 7\n- 8\n- 9\n- 10\n- 11\n- 12\n- 13\n- 14\n- 15\n- 16\n- 17\n- 18\n- 19\n- 20\n- 21\n- 22\n- 23\n- 24\n- 25\n- 26\n- 27\n- 28\n- 29\n- 30\n- 31\n- 32\n- 33\n- 34\n- 35\n- 36\n- 37\n- 38\n- 39\n- 40\n- 41\n- 42\n- 43\n- 44\n- 45\n- 46\n- 47\n- 48\n- 49\n- 50\n"
      ],
      "output": [
        "3",
        "2",
        "1",
        "3",
        "3",
        "2",
        "2",
        "3",
        "1",
        "2",
        "1",
        "1",
        "1",
        "10",
        "2",
        "1",
        "5",
        "4",
        "5",
        "2",
        "50",
        "50"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 2229,
    "description": "Mahmoud has an array a consisting of n integers. He asked Ehab to find another array b of the same length such that:\n\n  b is lexicographically greater than or equal to a.  b_{i} \u2265 2.  b is pairwise coprime: for every 1 \u2264 i < j \u2264 n, b_{i} and b_{j} are coprime, i.\u00a0e. GCD(b_{i}, b_{j}) = 1, where GCD(w, z) is the greatest common divisor of w and z. \n\nEhab wants to choose a special array so he wants the lexicographically minimal array between all the variants. Can you find it?\n\nAn array x is lexicographically greater than an array y if there exists an index i such than x_{i} > y_{i} and x_{j} = y_{j} for all 1 \u2264 j < i. An array x is equal to an array y if x_{i} = y_{i} for all 1 \u2264 i \u2264 n.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5), the number of elements in a and b.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (2 \u2264 a_{i} \u2264 10^5), the elements of a.\n\n\n-----Output-----\n\nOutput n space-separated integers, the i-th of them representing b_{i}.\n\n\n-----Examples-----\nInput\n5\n2 3 5 4 13\n\nOutput\n2 3 5 7 11 \nInput\n3\n10 3 7\n\nOutput\n10 3 7 \n\n\n-----Note-----\n\nNote that in the second sample, the array is already pairwise coprime so we printed it.",
    "public_tests": {
      "input": [
        "5\n2 3 5 4 13\n",
        "3\n10 3 7\n"
      ],
      "output": [
        "2 3 5 7 11 ",
        "10 3 7 "
      ]
    },
    "private_tests": {
      "input": [
        "5\n2 3 5 4 13\n",
        "3\n10 3 7\n",
        "5\n7 10 2 5 5\n",
        "7\n20 9 7 6 7 9 15\n",
        "10\n5 3 2 2 3 3 3 4 2 5\n",
        "3\n3 18 2\n"
      ],
      "output": [
        "2 3 5 7 11 ",
        "10 3 7 ",
        "7 10 3 11 13 ",
        "20 9 7 11 13 17 19 ",
        "5 3 2 7 11 13 17 19 23 29 ",
        "3 19 2 "
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1876,
    "description": "You are given a tree (a connected undirected graph without cycles) of $n$ vertices. Each of the $n - 1$ edges of the tree is colored in either black or red.\n\nYou are also given an integer $k$. Consider sequences of $k$ vertices. Let's call a sequence $[a_1, a_2, \\ldots, a_k]$ good if it satisfies the following criterion:  We will walk a path (possibly visiting same edge/vertex multiple times) on the tree, starting from $a_1$ and ending at $a_k$.  Start at $a_1$, then go to $a_2$ using the shortest path between $a_1$ and $a_2$, then go to $a_3$ in a similar way, and so on, until you travel the shortest path between $a_{k-1}$ and $a_k$. If you walked over at least one black edge during this process, then the sequence is good.  [Image] \n\nConsider the tree on the picture. If $k=3$ then the following sequences are good: $[1, 4, 7]$, $[5, 5, 3]$ and $[2, 3, 7]$. The following sequences are not good: $[1, 4, 6]$, $[5, 5, 5]$, $[3, 7, 3]$.\n\nThere are $n^k$ sequences of vertices, count how many of them are good. Since this number can be quite large, print it modulo $10^9+7$.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($2 \\le n \\le 10^5$, $2 \\le k \\le 100$), the size of the tree and the length of the vertex sequence.\n\nEach of the next $n - 1$ lines contains three integers $u_i$, $v_i$ and $x_i$ ($1 \\le u_i, v_i \\le n$, $x_i \\in \\{0, 1\\}$), where $u_i$ and $v_i$ denote the endpoints of the corresponding edge and $x_i$ is the color of this edge ($0$ denotes red edge and $1$ denotes black edge).\n\n\n-----Output-----\n\nPrint the number of good sequences modulo $10^9 + 7$.\n\n\n-----Examples-----\nInput\n4 4\n1 2 1\n2 3 1\n3 4 1\n\nOutput\n252\nInput\n4 6\n1 2 0\n1 3 0\n1 4 0\n\nOutput\n0\nInput\n3 5\n1 2 1\n2 3 0\n\nOutput\n210\n\n\n-----Note-----\n\nIn the first example, all sequences ($4^4$) of length $4$ except the following are good:   $[1, 1, 1, 1]$ $[2, 2, 2, 2]$ $[3, 3, 3, 3]$ $[4, 4, 4, 4]$ \n\nIn the second example, all edges are red, hence there aren't any good sequences.",
    "public_tests": {
      "input": [
        "4 4\n1 2 1\n2 3 1\n3 4 1\n",
        "4 6\n1 2 0\n1 3 0\n1 4 0\n",
        "3 5\n1 2 1\n2 3 0\n"
      ],
      "output": [
        "252",
        "0",
        "210"
      ]
    },
    "private_tests": {
      "input": [
        "4 4\n1 2 1\n2 3 1\n3 4 1\n",
        "4 6\n1 2 0\n1 3 0\n1 4 0\n",
        "3 5\n1 2 1\n2 3 0\n",
        "13 3\n9 13 1\n8 3 1\n11 9 0\n8 13 0\n10 9 0\n2 7 0\n4 8 1\n11 5 0\n10 12 0\n12 1 1\n5 7 0\n6 8 1\n",
        "4 19\n2 4 1\n2 3 0\n1 4 0\n",
        "7 12\n4 5 0\n2 7 1\n7 6 1\n2 5 0\n2 3 0\n1 6 0\n",
        "2 20\n2 1 0\n",
        "19 20\n8 10 1\n17 15 1\n14 5 0\n6 14 0\n7 15 0\n19 8 1\n12 14 0\n2 18 0\n13 3 0\n17 1 1\n4 2 1\n11 3 0\n4 6 0\n6 9 0\n7 11 1\n16 4 1\n5 13 1\n16 19 0\n",
        "2 2\n1 2 0\n",
        "2 2\n1 2 1\n"
      ],
      "output": [
        "252",
        "0",
        "210",
        "1842",
        "876856450",
        "824505797",
        "0",
        "928042611",
        "0",
        "2"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 2257,
    "description": "A flowerbed has many flowers and two fountains.\n\nYou can adjust the water pressure and set any values r_1(r_1 \u2265 0) and r_2(r_2 \u2265 0), giving the distances at which the water is spread from the first and second fountain respectively. You have to set such r_1 and r_2 that all the flowers are watered, that is, for each flower, the distance between the flower and the first fountain doesn't exceed r_1, or the distance to the second fountain doesn't exceed r_2. It's OK if some flowers are watered by both fountains.\n\nYou need to decrease the amount of water you need, that is set such r_1 and r_2 that all the flowers are watered and the r_1^2 + r_2^2 is minimum possible. Find this minimum value.\n\n\n-----Input-----\n\nThe first line of the input contains integers n, x_1, y_1, x_2, y_2 (1 \u2264 n \u2264 2000,  - 10^7 \u2264 x_1, y_1, x_2, y_2 \u2264 10^7)\u00a0\u2014 the number of flowers, the coordinates of the first and the second fountain.\n\nNext follow n lines. The i-th of these lines contains integers x_{i} and y_{i} ( - 10^7 \u2264 x_{i}, y_{i} \u2264 10^7)\u00a0\u2014 the coordinates of the i-th flower.\n\nIt is guaranteed that all n + 2 points in the input are distinct.\n\n\n-----Output-----\n\nPrint the minimum possible value r_1^2 + r_2^2. Note, that in this problem optimal answer is always integer.\n\n\n-----Examples-----\nInput\n2 -1 0 5 3\n0 2\n5 2\n\nOutput\n6\n\nInput\n4 0 0 5 0\n9 4\n8 3\n-1 0\n1 4\n\nOutput\n33\n\n\n\n-----Note-----\n\nThe first sample is (r_1^2 = 5, r_2^2 = 1): $0^{\\circ}$ The second sample is (r_1^2 = 1, r_2^2 = 32): [Image]",
    "public_tests": {
      "input": [
        "2 -1 0 5 3\n0 2\n5 2\n",
        "4 0 0 5 0\n9 4\n8 3\n-1 0\n1 4\n"
      ],
      "output": [
        "6\n",
        "33\n"
      ]
    },
    "private_tests": {
      "input": [
        "2 -1 0 5 3\n0 2\n5 2\n",
        "4 0 0 5 0\n9 4\n8 3\n-1 0\n1 4\n",
        "5 -6 -4 0 10\n-7 6\n-9 7\n-5 -1\n-2 1\n-8 10\n",
        "10 -68 10 87 22\n30 89\n82 -97\n-52 25\n76 -22\n-20 95\n21 25\n2 -3\n45 -7\n-98 -56\n-15 16\n",
        "1 -10000000 -10000000 -10000000 -9999999\n10000000 10000000\n"
      ],
      "output": [
        "6\n",
        "33\n",
        "100\n",
        "22034\n",
        "799999960000001\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 2844,
    "description": "The evil emperor Cactus has in his possession the Magic Keg and has flooded the Enchanted Forest! The Painter and the three little hedgehogs now have to return to the Beaver\u2019s den where they will be safe from the water as quickly as possible!\n\nThe map of the Enchanted Forest consists of R rows and C columns. Empty fields are represented by \u2018.\u2019 characters, flooded fields by \u2018*\u2019 and rocks by \u2018X\u2019. Additionally, the Beaver\u2019s den is represented by \u2018D\u2019 and the Painter and the three little hedgehogs are shown as \u2018S\u2019.\n\nEvery minute the Painter and the three little hedgehogs can move to one of the four neighbouring fields (up, down, left or right). Every minute the flood expands as well so that all empty fields that have at least one common side with a flooded field become flooded as well. Neither water nor the Painter and the three little hedgehogs can pass through rocks. Naturally, the Painter and the three little hedgehogs cannot pass through flooded fields, and water cannot flood the Beaver\u2019s den.\n\nWrite a program that will, given a map of the Enchanted Forest, output the shortest time needed for the Painter and the three little hedgehogs to safely reach the Beaver\u2019s den.\n\nNote: The Painter and the three little hedgehogs cannot move into a field that is about to be flooded (in the same minute).\n\n-----Input-----\nThe first line of input will contain two positive integers, $R$ and $C$, smaller than or equal to $50$. The following $R$ lines will each contain $C$ characters (\u2018.\u2019, \u2018*\u2019, \u2018X\u2019, \u2018D\u2019 or \u2018S\u2019). The map will contain exactly one \u2018D\u2019 character and exactly one \u2018S\u2019 character.\n\n-----Output-----\nOutput the shortest possible time needed for the Painter and the three little hedgehogs to safely reach the Beaver\u2019s den. If this is impossible output the word \u201cKAKTUS\u201d on a line by itself.\n\nClarification of the second sample test below: The best they can do is to go along the lower border and then the left border, and get flooded one minute before reaching the den.\n\n-----Examples-----\nSample Input 1:\n3 3\nD.*\n...\n.S.\nSample Output 1:\n3\n\nSample Input 2:\n3 3\nD.*\n...\n..S\nSample Output 2:\nKAKTUS",
    "public_tests": {
      "input": [
        "3 3\nD.*\n...\n.S.\n",
        "3 3\nD.*\n...\n..S\n"
      ],
      "output": [
        "3\n",
        "KAKTUS\n"
      ]
    },
    "private_tests": {
      "input": [
        "3 3\nD.*\n...\n.S.\n",
        "3 3\nD.*\n...\n..S\n",
        "3 6\nD...*.\n.X.X..\n....S*\n"
      ],
      "output": [
        "3\n",
        "KAKTUS\n",
        "6\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 2075,
    "description": "As Famil Door\u2019s birthday is coming, some of his friends (like Gabi) decided to buy a present for him. His friends are going to buy a string consisted of round brackets since Famil Door loves string of brackets of length n more than any other strings!\n\nThe sequence of round brackets is called valid if and only if:   the total number of opening brackets is equal to the total number of closing brackets;  for any prefix of the sequence, the number of opening brackets is greater or equal than the number of closing brackets. \n\nGabi bought a string s of length m (m \u2264 n) and want to complete it to obtain a valid sequence of brackets of length n. He is going to pick some strings p and q consisting of round brackets and merge them in a string p + s + q, that is add the string p at the beginning of the string s and string q at the end of the string s.\n\nNow he wonders, how many pairs of strings p and q exists, such that the string p + s + q is a valid sequence of round brackets. As this number may be pretty large, he wants to calculate it modulo 10^9 + 7.\n\n\n-----Input-----\n\nFirst line contains n and m (1 \u2264 m \u2264 n \u2264 100 000, n - m \u2264 2000)\u00a0\u2014 the desired length of the string and the length of the string bought by Gabi, respectively.\n\nThe second line contains string s of length m consisting of characters '(' and ')' only.\n\n\n-----Output-----\n\nPrint the number of pairs of string p and q such that p + s + q is a valid sequence of round brackets modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\n4 1\n(\n\nOutput\n4\n\nInput\n4 4\n(())\n\nOutput\n1\n\nInput\n4 3\n(((\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample there are four different valid pairs:   p = \"(\", q = \"))\"  p = \"()\", q = \")\"  p = \"\", q = \"())\"  p = \"\", q = \")()\" \n\nIn the second sample the only way to obtain a desired string is choose empty p and q.\n\nIn the third sample there is no way to get a valid sequence of brackets.",
    "public_tests": {
      "input": [
        "4 1\n(\n",
        "4 4\n(())\n",
        "4 3\n(((\n"
      ],
      "output": [
        "4\n",
        "1\n",
        "0\n"
      ]
    },
    "private_tests": {
      "input": [
        "4 1\n(\n",
        "4 4\n(())\n",
        "4 3\n(((\n",
        "875 50\n)))((())()))((()(())))))())))((((((()))))))()(((((\n",
        "1980 464\n))(()()))(((((((((()))))))(()(((()((()))()()())()))()))(()))))))(())((())))()())()((())())()())))(())()(()))(()())()((((()))())()(())))))(()()(()(((((()(()()))(((()))(())))))()())(())))))())()()((())))))))((()(())))))()()(()((()((()()))(()))(())(()))()((((())()()))))))()(())))()(()())()())(((((()))())))())())(()))()(()))())((())((((()(()(())))(((()()))))()()()))))((()())()((())())))())))()(()(()()(((((()((((()))()(())()))))()(()))(()(((((((()((()(())))(((((())\n",
        "1542 282\n())())()((()(()))()((())()))((())(()))))(()()))(())((()))()((()())())()))((())(((()(())((()()())((((())))((()((((()(()()))))(()(()()(())()((())())())))))()()())))(()((((()))(()(()(()(()))())((()()()()(()(()))())(((()(())()(())()()())))()))())(()))(((())()))((())()(())))))(())))()()\n",
        "2 2\n)(\n",
        "2 2\n))\n"
      ],
      "output": [
        "4\n",
        "1\n",
        "0\n",
        "0\n",
        "854368836\n",
        "631927032\n",
        "0\n",
        "0\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 2441,
    "description": "Your city has n junctions. There are m one-way roads between the junctions. As a mayor of the city, you have to ensure the security of all the junctions.\n\nTo ensure the security, you have to build some police checkposts. Checkposts can only be built in a junction. A checkpost at junction i can protect junction j if either i = j or the police patrol car can go to j from i and then come back to i.\n\nBuilding checkposts costs some money. As some areas of the city are more expensive than others, building checkpost at some junctions might cost more money than other junctions.\n\nYou have to determine the minimum possible money needed to ensure the security of all the junctions. Also you have to find the number of ways to ensure the security in minimum price and in addition in minimum number of checkposts. Two ways are different if any of the junctions contains a checkpost in one of them and do not contain in the other.\n\n\n-----Input-----\n\nIn the first line, you will be given an integer n, number of junctions (1 \u2264 n \u2264 10^5). In the next line, n space-separated integers will be given. The i^{th} integer is the cost of building checkpost at the i^{th} junction (costs will be non-negative and will not exceed 10^9).\n\nThe next line will contain an integer m\u00a0(0 \u2264 m \u2264 3\u00b710^5). And each of the next m lines contains two integers u_{i} and v_{i}\u00a0(1 \u2264 u_{i}, v_{i} \u2264 n;\u00a0u \u2260 v). A pair u_{i}, v_{i} means, that there is a one-way road which goes from u_{i} to v_{i}. There will not be more than one road between two nodes in the same direction.\n\n\n-----Output-----\n\nPrint two integers separated by spaces. The first one is the minimum possible money needed to ensure the security of all the junctions. And the second one is the number of ways you can ensure the security modulo 1000000007 (10^9 + 7).\n\n\n-----Examples-----\nInput\n3\n1 2 3\n3\n1 2\n2 3\n3 2\n\nOutput\n3 1\n\nInput\n5\n2 8 0 6 0\n6\n1 4\n1 3\n2 4\n3 4\n4 5\n5 1\n\nOutput\n8 2\n\nInput\n10\n1 3 2 2 1 3 1 4 10 10\n12\n1 2\n2 3\n3 1\n3 4\n4 5\n5 6\n5 7\n6 4\n7 3\n8 9\n9 10\n10 9\n\nOutput\n15 6\n\nInput\n2\n7 91\n2\n1 2\n2 1\n\nOutput\n7 1",
    "public_tests": {
      "input": [
        "3\n1 2 3\n3\n1 2\n2 3\n3 2\n",
        "5\n2 8 0 6 0\n6\n1 4\n1 3\n2 4\n3 4\n4 5\n5 1\n",
        "10\n1 3 2 2 1 3 1 4 10 10\n12\n1 2\n2 3\n3 1\n3 4\n4 5\n5 6\n5 7\n6 4\n7 3\n8 9\n9 10\n10 9\n",
        "2\n7 91\n2\n1 2\n2 1\n"
      ],
      "output": [
        "3 1\n",
        "8 2\n",
        "15 6\n",
        "7 1\n"
      ]
    },
    "private_tests": {
      "input": [
        "3\n1 2 3\n3\n1 2\n2 3\n3 2\n",
        "5\n2 8 0 6 0\n6\n1 4\n1 3\n2 4\n3 4\n4 5\n5 1\n",
        "10\n1 3 2 2 1 3 1 4 10 10\n12\n1 2\n2 3\n3 1\n3 4\n4 5\n5 6\n5 7\n6 4\n7 3\n8 9\n9 10\n10 9\n",
        "2\n7 91\n2\n1 2\n2 1\n",
        "10\n1 1 1 1 1 1 1 2 2 2\n15\n2 3\n2 4\n4 1\n4 7\n4 10\n4 5\n4 8\n2 6\n3 2\n1 2\n7 2\n10 2\n5 2\n8 2\n6 2\n",
        "100\n174 174 49 152 10 185 101 157 28 177 105 83 155 178 119 123 197 197 56 174 39 53 85 94 72 166 71 43 177 123 186 11 64 82 145 81 11 29 100 10 106 45 138 79 131 90 80 104 149 116 129 30 96 192 11 182 92 157 95 136 152 38 68 34 42 95 164 134 117 75 186 185 28 146 86 24 147 12 166 169 116 44 46 99 55 179 85 187 150 161 49 46 146 79 100 130 59 135 81 176\n0\n",
        "1\n1000000000\n0\n",
        "1\n0\n0\n"
      ],
      "output": [
        "3 1\n",
        "8 2\n",
        "15 6\n",
        "7 1\n",
        "3 7\n",
        "10585 1\n",
        "1000000000 1\n",
        "0 1\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 84,
    "description": "There are n shovels in Polycarp's shop. The i-th shovel costs i burles, that is, the first shovel costs 1 burle, the second shovel costs 2 burles, the third shovel costs 3 burles, and so on. Polycarps wants to sell shovels in pairs.\n\nVisitors are more likely to buy a pair of shovels if their total cost ends with several 9s. Because of this, Polycarp wants to choose a pair of shovels to sell in such a way that the sum of their costs ends with maximum possible number of nines. For example, if he chooses shovels with costs 12345 and 37454, their total cost is 49799, it ends with two nines.\n\nYou are to compute the number of pairs of shovels such that their total cost ends with maximum possible number of nines. Two pairs are considered different if there is a shovel presented in one pair, but not in the other.\n\n\n-----Input-----\n\nThe first line contains a single integer n (2 \u2264 n \u2264 10^9) \u2014 the number of shovels in Polycarp's shop.\n\n\n-----Output-----\n\nPrint the number of pairs of shovels such that their total cost ends with maximum possible number of nines. \n\nNote that it is possible that the largest number of 9s at the end is 0, then you should count all such ways.\n\nIt is guaranteed that for every n \u2264 10^9 the answer doesn't exceed 2\u00b710^9.\n\n\n-----Examples-----\nInput\n7\n\nOutput\n3\n\nInput\n14\n\nOutput\n9\n\nInput\n50\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example the maximum possible number of nines at the end is one. Polycarp cah choose the following pairs of shovels for that purpose:  2 and 7;  3 and 6;  4 and 5. \n\nIn the second example the maximum number of nines at the end of total cost of two shovels is one. The following pairs of shovels suit Polycarp:  1 and 8;  2 and 7;  3 and 6;  4 and 5;  5 and 14;  6 and 13;  7 and 12;  8 and 11;  9 and 10. \n\nIn the third example it is necessary to choose shovels 49 and 50, because the sum of their cost is 99, that means that the total number of nines is equal to two, which is maximum possible for n = 50.",
    "public_tests": {
      "input": [
        "7\n",
        "14\n",
        "50\n"
      ],
      "output": [
        "3\n",
        "9\n",
        "1\n"
      ]
    },
    "private_tests": {
      "input": [
        "7\n",
        "14\n",
        "50\n",
        "999999999\n",
        "15\n",
        "3\n",
        "6500\n",
        "4\n",
        "13\n",
        "10\n",
        "499999\n",
        "6\n",
        "8\n",
        "9\n",
        "11\n",
        "12\n",
        "5\n",
        "16\n",
        "17\n",
        "18\n",
        "19\n",
        "20\n",
        "21\n",
        "22\n",
        "23\n",
        "24\n",
        "25\n",
        "26\n",
        "27\n",
        "28\n",
        "29\n",
        "30\n",
        "31\n",
        "32\n",
        "33\n",
        "34\n",
        "35\n",
        "36\n",
        "37\n",
        "38\n",
        "39\n",
        "40\n",
        "41\n",
        "42\n",
        "43\n",
        "44\n",
        "45\n",
        "46\n",
        "47\n",
        "48\n",
        "49\n",
        "51\n",
        "100\n",
        "99\n",
        "101\n",
        "4999\n",
        "4998\n",
        "4992\n",
        "5000\n",
        "5001\n",
        "10000\n",
        "10001\n",
        "49839\n",
        "4999999\n",
        "49999999\n",
        "499999999\n",
        "999\n",
        "9999\n",
        "99999\n",
        "999999\n",
        "9999999\n",
        "99999999\n",
        "2\n",
        "1000000000\n",
        "764675465\n",
        "499999998\n",
        "167959139\n",
        "641009859\n",
        "524125987\n",
        "702209411\n",
        "585325539\n",
        "58376259\n",
        "941492387\n",
        "824608515\n",
        "2691939\n",
        "802030518\n",
        "685146646\n",
        "863230070\n",
        "41313494\n",
        "219396918\n",
        "102513046\n",
        "985629174\n",
        "458679894\n",
        "341796022\n",
        "519879446\n",
        "452405440\n",
        "335521569\n",
        "808572289\n",
        "691688417\n",
        "869771841\n",
        "752887969\n",
        "930971393\n",
        "109054817\n",
        "992170945\n",
        "170254369\n",
        "248004555\n"
      ],
      "output": [
        "3\n",
        "9\n",
        "1\n",
        "499999999\n",
        "11\n",
        "3\n",
        "1501\n",
        "6\n",
        "8\n",
        "5\n",
        "1249995\n",
        "2\n",
        "4\n",
        "4\n",
        "6\n",
        "7\n",
        "1\n",
        "13\n",
        "15\n",
        "17\n",
        "18\n",
        "20\n",
        "22\n",
        "24\n",
        "26\n",
        "28\n",
        "31\n",
        "34\n",
        "37\n",
        "40\n",
        "42\n",
        "45\n",
        "48\n",
        "51\n",
        "54\n",
        "57\n",
        "61\n",
        "65\n",
        "69\n",
        "73\n",
        "76\n",
        "80\n",
        "84\n",
        "88\n",
        "92\n",
        "96\n",
        "101\n",
        "106\n",
        "111\n",
        "116\n",
        "120\n",
        "2\n",
        "50\n",
        "49\n",
        "51\n",
        "12495\n",
        "12491\n",
        "12461\n",
        "1\n",
        "2\n",
        "5000\n",
        "5001\n",
        "124196\n",
        "12499995\n",
        "124999995\n",
        "1249999995\n",
        "499\n",
        "4999\n",
        "49999\n",
        "499999\n",
        "4999999\n",
        "49999999\n",
        "1\n",
        "500000000\n",
        "264675466\n",
        "1249999991\n",
        "135918279\n",
        "141009860\n",
        "24125988\n",
        "202209412\n",
        "85325540\n",
        "8376260\n",
        "441492388\n",
        "324608516\n",
        "3575818\n",
        "302030519\n",
        "185146647\n",
        "363230071\n",
        "85253976\n",
        "238793836\n",
        "52513046\n",
        "485629175\n",
        "1043399471\n",
        "575388066\n",
        "19879447\n",
        "1012027201\n",
        "556564707\n",
        "308572290\n",
        "191688418\n",
        "369771842\n",
        "252887970\n",
        "430971394\n",
        "59054817\n",
        "492170946\n",
        "140508739\n",
        "296009110\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1112,
    "description": "Little Elephant loves magic squares very much.\n\nA magic square is a 3 \u00d7 3 table, each cell contains some positive integer. At that the sums of integers in all rows, columns and diagonals of the table are equal. The figure below shows the magic square, the sum of integers in all its rows, columns and diagonals equals 15. $\\left. \\begin{array}{|c|c|c|} \\hline 4 & {9} & {2} \\\\ \\hline 3 & {5} & {7} \\\\ \\hline 8 & {1} & {6} \\\\ \\hline \\end{array} \\right.$ \n\nThe Little Elephant remembered one magic square. He started writing this square on a piece of paper, but as he wrote, he forgot all three elements of the main diagonal of the magic square. Fortunately, the Little Elephant clearly remembered that all elements of the magic square did not exceed 10^5. \n\nHelp the Little Elephant, restore the original magic square, given the Elephant's notes.\n\n\n-----Input-----\n\nThe first three lines of the input contain the Little Elephant's notes. The first line contains elements of the first row of the magic square. The second line contains the elements of the second row, the third line is for the third row. The main diagonal elements that have been forgotten by the Elephant are represented by zeroes.\n\nIt is guaranteed that the notes contain exactly three zeroes and they are all located on the main diagonal. It is guaranteed that all positive numbers in the table do not exceed 10^5.\n\n\n-----Output-----\n\nPrint three lines, in each line print three integers \u2014 the Little Elephant's magic square. If there are multiple magic squares, you are allowed to print any of them. Note that all numbers you print must be positive and not exceed 10^5.\n\nIt is guaranteed that there exists at least one magic square that meets the conditions.\n\n\n-----Examples-----\nInput\n0 1 1\n1 0 1\n1 1 0\n\nOutput\n1 1 1\n1 1 1\n1 1 1\n\nInput\n0 3 6\n5 0 5\n4 7 0\n\nOutput\n6 3 6\n5 5 5\n4 7 4",
    "public_tests": {
      "input": [
        "0 1 1\n1 0 1\n1 1 0\n",
        "0 3 6\n5 0 5\n4 7 0\n"
      ],
      "output": [
        "1 1 1\n1 1 1\n1 1 1\n",
        "6 3 6\n5 5 5\n4 7 4\n"
      ]
    },
    "private_tests": {
      "input": [
        "0 1 1\n1 0 1\n1 1 0\n",
        "0 3 6\n5 0 5\n4 7 0\n",
        "0 4 4\n4 0 4\n4 4 0\n",
        "0 54 48\n36 0 78\n66 60 0\n",
        "0 17 14\n15 0 15\n16 13 0\n",
        "0 97 56\n69 0 71\n84 43 0\n",
        "0 1099 1002\n1027 0 1049\n1074 977 0\n",
        "0 98721 99776\n99575 0 99123\n98922 99977 0\n",
        "0 6361 2304\n1433 0 8103\n7232 3175 0\n",
        "0 99626 99582\n99766 0 99258\n99442 99398 0\n",
        "0 99978 99920\n99950 0 99918\n99948 99890 0\n",
        "0 840 666\n612 0 948\n894 720 0\n",
        "0 28 10\n12 0 24\n26 8 0\n",
        "0 120 83\n98 0 90\n105 68 0\n",
        "0 86900 85807\n85836 0 86842\n86871 85778 0\n",
        "0 74 78\n78 0 74\n74 78 0\n",
        "0 505 681\n605 0 657\n581 757 0\n",
        "0 662 918\n822 0 854\n758 1014 0\n",
        "0 93 95\n93 0 97\n95 97 0\n",
        "0 709 712\n719 0 695\n702 705 0\n",
        "0 7 6\n9 0 1\n4 3 0\n",
        "0 9 2\n3 0 7\n8 1 0\n",
        "0 1 43\n13 0 61\n31 73 0\n",
        "0 100000 100000\n100000 0 100000\n100000 100000 0\n"
      ],
      "output": [
        "1 1 1\n1 1 1\n1 1 1\n",
        "6 3 6\n5 5 5\n4 7 4\n",
        "4 4 4\n4 4 4\n4 4 4\n",
        "69 54 48\n36 57 78\n66 60 45\n",
        "14 17 14\n15 15 15\n16 13 16\n",
        "57 97 56\n69 70 71\n84 43 83\n",
        "1013 1099 1002\n1027 1038 1049\n1074 977 1063\n",
        "99550 98721 99776\n99575 99349 99123\n98922 99977 99148\n",
        "5639 6361 2304\n1433 4768 8103\n7232 3175 3897\n",
        "99328 99626 99582\n99766 99512 99258\n99442 99398 99696\n",
        "99904 99978 99920\n99950 99934 99918\n99948 99890 99964\n",
        "834 840 666\n612 780 948\n894 720 726\n",
        "16 28 10\n12 18 24\n26 8 20\n",
        "79 120 83\n98 94 90\n105 68 109\n",
        "86310 86900 85807\n85836 86339 86842\n86871 85778 86368\n",
        "76 74 78\n78 76 74\n74 78 76\n",
        "707 505 681\n605 631 657\n581 757 555\n",
        "934 662 918\n822 838 854\n758 1014 742\n",
        "97 93 95\n93 95 97\n95 97 93\n",
        "700 709 712\n719 707 695\n702 705 714\n",
        "2 7 6\n9 5 1\n4 3 8\n",
        "4 9 2\n3 5 7\n8 1 6\n",
        "67 1 43\n13 37 61\n31 73 7\n",
        "100000 100000 100000\n100000 100000 100000\n100000 100000 100000\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 414,
    "description": "As the name of the task implies, you are asked to do some work with segments and trees.\n\nRecall that a tree is a connected undirected graph such that there is exactly one simple path between every pair of its vertices.\n\nYou are given $n$ segments $[l_1, r_1], [l_2, r_2], \\dots, [l_n, r_n]$, $l_i < r_i$ for every $i$. It is guaranteed that all segments' endpoints are integers, and all endpoints are unique \u2014 there is no pair of segments such that they start in the same point, end in the same point or one starts in the same point the other one ends.\n\nLet's generate a graph with $n$ vertices from these segments. Vertices $v$ and $u$ are connected by an edge if and only if segments $[l_v, r_v]$ and $[l_u, r_u]$ intersect and neither of it lies fully inside the other one.\n\nFor example, pairs $([1, 3], [2, 4])$ and $([5, 10], [3, 7])$ will induce the edges but pairs $([1, 2], [3, 4])$ and $([5, 7], [3, 10])$ will not.\n\nDetermine if the resulting graph is a tree or not.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($1 \\le n \\le 5 \\cdot 10^5$) \u2014 the number of segments.\n\nThe $i$-th of the next $n$ lines contain the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$ ($1 \\le l_i < r_i \\le 2n$).\n\nIt is guaranteed that all segments borders are pairwise distinct. \n\n\n-----Output-----\n\nPrint \"YES\" if the resulting graph is a tree and \"NO\" otherwise.\n\n\n-----Examples-----\nInput\n6\n9 12\n2 11\n1 3\n6 10\n5 7\n4 8\n\nOutput\nYES\n\nInput\n5\n1 3\n2 4\n5 9\n6 8\n7 10\n\nOutput\nNO\n\nInput\n5\n5 8\n3 6\n2 9\n7 10\n1 4\n\nOutput\nNO\n\n\n\n-----Note-----\n\nThe graph corresponding to the first example:\n\n[Image]\n\nThe graph corresponding to the second example:\n\n[Image]\n\nThe graph corresponding to the third example:\n\n[Image]",
    "public_tests": {
      "input": [
        "6\n9 12\n2 11\n1 3\n6 10\n5 7\n4 8\n",
        "5\n1 3\n2 4\n5 9\n6 8\n7 10\n",
        "5\n5 8\n3 6\n2 9\n7 10\n1 4\n"
      ],
      "output": [
        "YES\n",
        "NO\n",
        "NO\n"
      ]
    },
    "private_tests": {
      "input": [
        "6\n9 12\n2 11\n1 3\n6 10\n5 7\n4 8\n",
        "5\n1 3\n2 4\n5 9\n6 8\n7 10\n",
        "5\n5 8\n3 6\n2 9\n7 10\n1 4\n",
        "1\n1 2\n",
        "20\n20 22\n9 11\n32 36\n8 12\n14 16\n4 6\n28 30\n29 37\n15 18\n33 35\n27 31\n21 25\n2 7\n19 23\n10 39\n34 40\n5 13\n24 38\n17 26\n1 3\n",
        "20\n11 13\n21 38\n29 33\n10 18\n4 9\n2 6\n26 28\n15 39\n12 17\n8 19\n27 36\n20 22\n14 16\n3 5\n1 7\n24 37\n31 35\n30 32\n34 40\n23 25\n",
        "20\n3 13\n33 35\n6 8\n27 31\n25 28\n15 17\n11 29\n30 37\n1 5\n9 12\n20 23\n19 21\n14 18\n16 24\n7 10\n32 36\n22 26\n38 40\n34 39\n2 4\n",
        "5\n1 4\n2 5\n3 6\n7 9\n8 10\n",
        "4\n1 6\n3 5\n4 7\n2 8\n",
        "4\n1 8\n2 5\n3 6\n4 7\n",
        "6\n6 9\n4 7\n3 10\n8 11\n2 5\n1 12\n",
        "7\n9 13\n3 12\n7 11\n5 10\n6 8\n2 4\n1 14\n",
        "5\n3 6\n4 7\n5 8\n1 9\n2 10\n",
        "3\n1 4\n2 6\n3 5\n",
        "4\n3 8\n2 7\n5 6\n1 4\n",
        "5\n2 5\n1 3\n4 8\n7 9\n6 10\n",
        "5\n1 4\n2 5\n3 10\n6 8\n7 9\n",
        "5\n1 4\n3 5\n2 8\n7 9\n6 10\n",
        "5\n1 3\n2 4\n5 8\n6 9\n7 10\n",
        "4\n1 2\n3 6\n4 7\n5 8\n",
        "6\n7 10\n3 8\n2 11\n9 12\n1 4\n5 6\n",
        "8\n2 5\n3 6\n4 7\n10 13\n11 14\n12 15\n1 9\n8 16\n",
        "4\n1 4\n2 5\n3 8\n6 7\n",
        "5\n7 10\n6 9\n5 8\n1 3\n2 4\n",
        "7\n5 8\n7 11\n2 6\n1 3\n4 14\n10 12\n9 13\n",
        "6\n1 12\n6 9\n4 7\n3 10\n8 11\n2 5\n",
        "8\n2 16\n7 13\n12 14\n4 15\n8 9\n1 11\n3 6\n5 10\n",
        "7\n1 13\n6 9\n4 7\n3 10\n8 11\n2 5\n12 14\n",
        "4\n1 6\n2 3\n4 7\n5 8\n",
        "7\n2 7\n3 6\n4 5\n1 11\n8 12\n9 13\n10 14\n",
        "5\n1 6\n2 3\n4 9\n5 8\n7 10\n",
        "6\n4 11\n1 5\n7 9\n2 12\n6 8\n3 10\n",
        "4\n1 4\n5 6\n3 8\n2 7\n",
        "5\n5 8\n6 9\n2 3\n4 10\n1 7\n",
        "5\n1 3\n4 9\n8 10\n5 7\n2 6\n",
        "6\n1 3\n2 10\n8 11\n4 12\n5 7\n6 9\n",
        "6\n2 8\n6 9\n4 11\n5 7\n1 12\n3 10\n",
        "6\n9 12\n2 3\n6 10\n4 7\n1 5\n8 11\n",
        "8\n5 8\n1 16\n7 10\n4 14\n13 15\n3 6\n2 11\n9 12\n",
        "8\n9 12\n5 10\n1 6\n2 7\n3 4\n14 15\n8 13\n11 16\n",
        "7\n4 6\n11 13\n8 12\n5 9\n2 7\n10 14\n1 3\n",
        "7\n2 12\n1 3\n5 7\n9 11\n4 8\n10 13\n6 14\n",
        "7\n8 11\n5 7\n1 6\n10 12\n2 14\n4 9\n3 13\n",
        "5\n7 10\n4 6\n3 8\n2 5\n1 9\n",
        "5\n1 4\n7 8\n3 10\n2 6\n5 9\n",
        "5\n1 3\n4 9\n7 8\n5 10\n2 6\n",
        "5\n4 6\n2 5\n3 9\n8 10\n1 7\n",
        "5\n1 4\n9 10\n2 6\n5 7\n3 8\n",
        "6\n3 5\n4 6\n1 10\n7 11\n9 12\n2 8\n",
        "5\n1 3\n2 7\n6 8\n4 10\n5 9\n",
        "4\n2 5\n3 6\n4 7\n1 8\n"
      ],
      "output": [
        "YES\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "NO\n",
        "NO\n",
        "YES\n",
        "NO\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1726,
    "description": "Recently Luba bought a very interesting book. She knows that it will take t seconds to read the book. Luba wants to finish reading as fast as she can.\n\nBut she has some work to do in each of n next days. The number of seconds that Luba has to spend working during i-th day is a_{i}. If some free time remains, she can spend it on reading.\n\nHelp Luba to determine the minimum number of day when she finishes reading.\n\nIt is guaranteed that the answer doesn't exceed n.\n\nRemember that there are 86400 seconds in a day.\n\n\n-----Input-----\n\nThe first line contains two integers n and t (1 \u2264 n \u2264 100, 1 \u2264 t \u2264 10^6) \u2014 the number of days and the time required to read the book.\n\nThe second line contains n integers a_{i} (0 \u2264 a_{i} \u2264 86400) \u2014 the time Luba has to spend on her work during i-th day.\n\n\n-----Output-----\n\nPrint the minimum day Luba can finish reading the book.\n\nIt is guaranteed that answer doesn't exceed n.\n\n\n-----Examples-----\nInput\n2 2\n86400 86398\n\nOutput\n2\n\nInput\n2 86400\n0 86400\n\nOutput\n1",
    "public_tests": {
      "input": [
        "2 2\n86400 86398\n",
        "2 86400\n0 86400\n"
      ],
      "output": [
        "2\n",
        "1\n"
      ]
    },
    "private_tests": {
      "input": [
        "2 2\n86400 86398\n",
        "2 86400\n0 86400\n",
        "2 86400\n1 86399\n",
        "100 1000000\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n",
        "1 1\n86399\n",
        "6 1200\n86400 86400 86000 86000 86000 86400\n",
        "6 1200\n86400 86400 86000 86000 86001 86399\n",
        "4 172799\n1 1 86400 0\n",
        "4 172799\n0 86400 86399 0\n",
        "6 1\n1 1 86400 1 86399 1\n",
        "4 1\n86400 86399 86400 86400\n",
        "4 1\n86400 86400 0 86400\n"
      ],
      "output": [
        "2\n",
        "1\n",
        "2\n",
        "12\n",
        "1\n",
        "5\n",
        "6\n",
        "4\n",
        "4\n",
        "1\n",
        "2\n",
        "3\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 334,
    "description": "A monster is chasing after Rick and Morty on another planet. They're so frightened that sometimes they scream. More accurately, Rick screams at times b, b + a, b + 2a, b + 3a, ... and Morty screams at times d, d + c, d + 2c, d + 3c, ....  [Image] \n\nThe Monster will catch them if at any point they scream at the same time, so it wants to know when it will catch them (the first time they scream at the same time) or that they will never scream at the same time.\n\n\n-----Input-----\n\nThe first line of input contains two integers a and b (1 \u2264 a, b \u2264 100). \n\nThe second line contains two integers c and d (1 \u2264 c, d \u2264 100).\n\n\n-----Output-----\n\nPrint the first time Rick and Morty will scream at the same time, or  - 1 if they will never scream at the same time.\n\n\n-----Examples-----\nInput\n20 2\n9 19\n\nOutput\n82\n\nInput\n2 1\n16 12\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample testcase, Rick's 5th scream and Morty's 8th time are at time 82. \n\nIn the second sample testcase, all Rick's screams will be at odd times and Morty's will be at even times, so they will never scream at the same time.",
    "public_tests": {
      "input": [
        "20 2\n9 19\n",
        "2 1\n16 12\n"
      ],
      "output": [
        "82\n",
        "-1\n"
      ]
    },
    "private_tests": {
      "input": [
        "20 2\n9 19\n",
        "2 1\n16 12\n",
        "39 52\n88 78\n",
        "59 96\n34 48\n",
        "87 37\n91 29\n",
        "11 81\n49 7\n",
        "39 21\n95 89\n",
        "59 70\n48 54\n",
        "87 22\n98 32\n",
        "15 63\n51 13\n",
        "39 7\n97 91\n",
        "18 18\n71 71\n",
        "46 71\n16 49\n",
        "70 11\n74 27\n",
        "94 55\n20 96\n",
        "18 4\n77 78\n",
        "46 44\n23 55\n",
        "74 88\n77 37\n",
        "94 37\n34 7\n",
        "22 81\n80 88\n",
        "46 30\n34 62\n",
        "40 4\n81 40\n",
        "69 48\n39 9\n",
        "89 93\n84 87\n",
        "17 45\n42 65\n",
        "41 85\n95 46\n",
        "69 30\n41 16\n",
        "93 74\n99 93\n",
        "17 19\n44 75\n",
        "45 63\n98 53\n",
        "69 11\n48 34\n",
        "55 94\n3 96\n",
        "100 100\n100 100\n",
        "1 1\n1 1\n",
        "1 1\n1 100\n",
        "1 100\n100 1\n",
        "98 1\n99 100\n",
        "98 1\n99 2\n",
        "97 2\n99 100\n",
        "3 3\n3 1\n",
        "3 2\n7 2\n",
        "2 3\n2 5\n",
        "2 3\n2 3\n",
        "100 3\n100 5\n",
        "6 10\n12 14\n",
        "4 2\n4 4\n",
        "2 3\n2 2\n",
        "2 3\n4 99\n",
        "1 5\n1 5\n",
        "1 100\n3 1\n",
        "2 2\n2 1\n",
        "2 10\n6 20\n",
        "2 2\n2 10\n",
        "3 7\n3 6\n",
        "1 100\n1 100\n",
        "7 25\n39 85\n",
        "84 82\n38 6\n",
        "7 7\n7 14\n"
      ],
      "output": [
        "82\n",
        "-1\n",
        "1222\n",
        "1748\n",
        "211\n",
        "301\n",
        "3414\n",
        "1014\n",
        "718\n",
        "-1\n",
        "1255\n",
        "1278\n",
        "209\n",
        "2321\n",
        "-1\n",
        "1156\n",
        "-1\n",
        "1346\n",
        "789\n",
        "-1\n",
        "674\n",
        "364\n",
        "48\n",
        "5967\n",
        "317\n",
        "331\n",
        "1410\n",
        "-1\n",
        "427\n",
        "3483\n",
        "-1\n",
        "204\n",
        "100\n",
        "1\n",
        "100\n",
        "101\n",
        "9703\n",
        "9605\n",
        "4852\n",
        "-1\n",
        "2\n",
        "5\n",
        "3\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "99\n",
        "5\n",
        "100\n",
        "-1\n",
        "20\n",
        "10\n",
        "-1\n",
        "100\n",
        "319\n",
        "82\n",
        "14\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1984,
    "description": "During the loading of the game \"Dungeons and Candies\" you are required to get descriptions of k levels from the server. Each description is a map of an n \u00d7 m checkered rectangular field. Some cells of the field contain candies (each cell has at most one candy). An empty cell is denoted as \".\" on the map, but if a cell has a candy, it is denoted as a letter of the English alphabet. A level may contain identical candies, in this case the letters in the corresponding cells of the map will be the same.\n\n [Image] \n\nWhen you transmit information via a network, you want to minimize traffic \u2014 the total size of the transferred data. The levels can be transmitted in any order. There are two ways to transmit the current level A:\n\n  You can transmit the whole level A. Then you need to transmit n\u00b7m bytes via the network.  You can transmit the difference between level A and some previously transmitted level B (if it exists); this operation requires to transmit d_{A}, B\u00b7w bytes, where d_{A}, B is the number of cells of the field that are different for A and B, and w is a constant. Note, that you should compare only the corresponding cells of levels A and B to calculate d_{A}, B. You cannot transform the maps of levels, i.e. rotate or shift them relatively to each other. \n\nYour task is to find a way to transfer all the k levels and minimize the traffic.\n\n\n-----Input-----\n\nThe first line contains four integers n, m, k, w (1 \u2264 n, m \u2264 10;\u00a01 \u2264 k, w \u2264 1000). Then follows the description of k levels. Each level is described by n lines, each line contains m characters. Each character is either a letter of the English alphabet or a dot (\".\"). Please note that the case of the letters matters.\n\n\n-----Output-----\n\nIn the first line print the required minimum number of transferred bytes.\n\nThen print k pairs of integers x_1, y_1, x_2, y_2, ..., x_{k}, y_{k}, describing the way to transfer levels. Pair x_{i}, y_{i} means that level x_{i} needs to be transferred by way y_{i}. If y_{i} equals 0, that means that the level must be transferred using the first way, otherwise y_{i} must be equal to the number of a previously transferred level. It means that you will transfer the difference between levels y_{i} and x_{i} to transfer level x_{i}. Print the pairs in the order of transferring levels. The levels are numbered 1 through k in the order they follow in the input.\n\nIf there are multiple optimal solutions, you can print any of them.\n\n\n-----Examples-----\nInput\n2 3 3 2\nA.A\n...\nA.a\n..C\nX.Y\n...\n\nOutput\n14\n1 0\n2 1\n3 1\n\nInput\n1 1 4 1\nA\n.\nB\n.\n\nOutput\n3\n1 0\n2 0\n4 2\n3 0\n\nInput\n1 3 5 2\nABA\nBBB\nBBA\nBAB\nABB\n\nOutput\n11\n1 0\n3 1\n2 3\n4 2\n5 1",
    "public_tests": {
      "input": [
        "2 3 3 2\nA.A\n...\nA.a\n..C\nX.Y\n...\n",
        "1 1 4 1\nA\n.\nB\n.\n",
        "1 3 5 2\nABA\nBBB\nBBA\nBAB\nABB\n"
      ],
      "output": [
        "14\n1 0\n2 1\n3 1\n",
        "3\n1 0\n2 0\n4 2\n3 0\n",
        "11\n1 0\n3 1\n2 3\n4 2\n5 1\n"
      ]
    },
    "private_tests": {
      "input": [
        "2 3 3 2\nA.A\n...\nA.a\n..C\nX.Y\n...\n",
        "1 1 4 1\nA\n.\nB\n.\n",
        "1 3 5 2\nABA\nBBB\nBBA\nBAB\nABB\n",
        "2 2 5 1\n..\nBA\n.A\nB.\n..\nA.\nAB\n.B\n..\n..\n",
        "3 3 10 2\nBA.\n..A\n.BB\nB..\n..B\n.AA\nB..\nAB.\n..A\nBAB\n.A.\n.B.\n..B\nA..\n...\n...\n.B.\nBA.\n..B\n.AB\n.B.\nB.A\n.A.\n.BA\n..B\n...\n.A.\n.AA\n..A\n.B.\n",
        "3 1 5 1\nB\nA\nB\nA\nA\nB\nA\nA\nA\nA\nA\nA\nA\nA\nA\n",
        "3 2 10 1\nAB\nBA\nAB\nAA\nAA\nBA\nAA\nAA\nAB\nAB\nAB\nBA\nBA\nAB\nAA\nBB\nAB\nBA\nBB\nBB\nBA\nAA\nAA\nAB\nAB\nAB\nBA\nBB\nAB\nAA\n",
        "2 3 10 2\nABB\nABA\nAAB\nBAB\nAAA\nBBA\nBBB\nBAA\nBBB\nABB\nABA\nBBA\nBBB\nAAB\nABA\nABB\nBBA\nBAB\nBBB\nBBB\n",
        "1 1 1 1\n.\n"
      ],
      "output": [
        "14\n1 0\n2 1\n3 1\n",
        "3\n1 0\n2 0\n4 2\n3 0\n",
        "11\n1 0\n3 1\n2 3\n4 2\n5 1\n",
        "12\n1 0\n2 1\n3 1\n5 3\n4 5\n",
        "67\n1 0\n10 1\n2 1\n3 2\n4 1\n7 4\n9 7\n5 9\n6 9\n8 4\n",
        "5\n1 0\n2 1\n3 2\n4 3\n5 3\n",
        "16\n1 0\n3 1\n8 3\n2 3\n4 2\n9 4\n6 4\n7 6\n10 6\n5 10\n",
        "38\n1 0\n5 1\n7 5\n4 7\n9 4\n10 5\n6 1\n3 6\n8 1\n2 0\n",
        "1\n1 0\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 767,
    "description": "You are given a set of points $x_1$, $x_2$, ..., $x_n$ on the number line.\n\nTwo points $i$ and $j$ can be matched with each other if the following conditions hold:  neither $i$ nor $j$ is matched with any other point;  $|x_i - x_j| \\ge z$. \n\nWhat is the maximum number of pairs of points you can match with each other?\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $z$ ($2 \\le n \\le 2 \\cdot 10^5$, $1 \\le z \\le 10^9$) \u2014 the number of points and the constraint on the distance between matched points, respectively.\n\nThe second line contains $n$ integers $x_1$, $x_2$, ..., $x_n$ ($1 \\le x_i \\le 10^9$).\n\n\n-----Output-----\n\nPrint one integer \u2014 the maximum number of pairs of points you can match with each other.\n\n\n-----Examples-----\nInput\n4 2\n1 3 3 7\n\nOutput\n2\n\nInput\n5 5\n10 9 5 8 7\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example, you may match point $1$ with point $2$ ($|3 - 1| \\ge 2$), and point $3$ with point $4$ ($|7 - 3| \\ge 2$).\n\nIn the second example, you may match point $1$ with point $3$ ($|5 - 10| \\ge 5$).",
    "public_tests": {
      "input": [
        "4 2\n1 3 3 7\n",
        "5 5\n10 9 5 8 7\n"
      ],
      "output": [
        "2\n",
        "1\n"
      ]
    },
    "private_tests": {
      "input": [
        "4 2\n1 3 3 7\n",
        "5 5\n10 9 5 8 7\n",
        "3 2\n1 4 7\n",
        "6 4\n17 13 16 12 15 11\n",
        "6 5\n17 13 16 12 15 11\n",
        "2 1\n2 2\n",
        "14 16\n27 37 50 11 16 42 45 43 31 42 40 29 42 32\n",
        "10 1\n3 1 3 4 5 3 2 4 1 4\n",
        "12 15\n12 17 28 14 32 40 33 18 28 10 40 50\n",
        "5 1\n5 4 3 2 4\n",
        "4 2\n1 3 3 4\n",
        "9 4\n8 10 5 1 10 8 6 1 6\n",
        "10 2\n5 1 3 2 3 1 3 4 3 5\n",
        "4 1\n1 2 2 2\n",
        "8 5\n6 8 10 7 7 1 8 10\n",
        "18 13\n45 28 33 49 50 12 26 34 47 50 34 17 37 11 35 46 13 21\n",
        "8 6\n2 3 10 16 18 15 15 10\n",
        "2 2\n5 4\n",
        "10 1\n4 4 3 4 1 5 5 4 4 1\n",
        "3 2\n5 5 5\n",
        "14 14\n13 35 34 25 39 38 31 11 42 10 23 14 47 25\n",
        "2 1\n1 5\n",
        "4 1\n2 4 1 4\n",
        "19 16\n49 15 36 20 20 43 24 39 43 26 21 42 10 43 34 26 45 43 37\n",
        "100 13\n11 28 21 7 6 23 26 31 26 32 34 17 19 1 13 1 28 30 28 8 23 36 17 20 5 37 32 23 14 1 20 23 3 39 20 14 2 12 15 3 1 27 7 25 15 39 10 6 8 37 6 22 7 29 6 17 17 9 16 3 39 23 2 34 20 12 28 29 32 2 38 27 36 27 29 18 7 14 27 25 33 18 29 40 22 9 9 6 21 7 23 35 33 26 31 31 39 36 27 27\n",
        "5 6\n2 8 1 2 3\n",
        "2 1\n3 1\n",
        "5 2\n1 1 4 5 1\n",
        "10 1\n2 14 10 8 8 7 12 9 3 2\n",
        "2 1\n1 3\n",
        "10 7\n17 9 12 8 5 17 10 2 20 14\n",
        "7 4\n4 15 8 13 2 9 12\n",
        "9 9\n6 16 2 5 12 12 4 13 11\n"
      ],
      "output": [
        "2\n",
        "1\n",
        "1\n",
        "3\n",
        "2\n",
        "0\n",
        "5\n",
        "5\n",
        "6\n",
        "2\n",
        "1\n",
        "4\n",
        "5\n",
        "1\n",
        "1\n",
        "9\n",
        "4\n",
        "0\n",
        "5\n",
        "0\n",
        "7\n",
        "1\n",
        "2\n",
        "8\n",
        "50\n",
        "1\n",
        "1\n",
        "2\n",
        "5\n",
        "1\n",
        "5\n",
        "3\n",
        "3\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 260,
    "description": "One day, after a difficult lecture a diligent student Sasha saw a graffitied desk in the classroom. She came closer and read: \"Find such positive integer n, that among numbers n + 1, n + 2, ..., 2\u00b7n there are exactly m numbers which binary representation contains exactly k digits one\".\n\nThe girl got interested in the task and she asked you to help her solve it. Sasha knows that you are afraid of large numbers, so she guaranteed that there is an answer that doesn't exceed 10^18.\n\n\n-----Input-----\n\nThe first line contains two space-separated integers, m and k (0 \u2264 m \u2264 10^18; 1 \u2264 k \u2264 64).\n\n\n-----Output-----\n\nPrint the required number n (1 \u2264 n \u2264 10^18). If there are multiple answers, print any of them.\n\n\n-----Examples-----\nInput\n1 1\n\nOutput\n1\n\nInput\n3 2\n\nOutput\n5",
    "public_tests": {
      "input": [
        "1 1\n",
        "3 2\n"
      ],
      "output": [
        "1\n",
        "5\n"
      ]
    },
    "private_tests": {
      "input": [
        "1 1\n",
        "3 2\n",
        "3 3\n",
        "1 11\n",
        "4 20\n",
        "45902564 24\n",
        "330 8\n",
        "10 10\n",
        "0 2\n",
        "1000000 55\n",
        "1 60\n",
        "1000000000 52\n",
        "101628400788615604 30\n",
        "101628400798615604 31\n",
        "55 55\n",
        "14240928 10\n",
        "1000000000 10\n",
        "1111111 11\n",
        "10000000000000000 35\n",
        "0 19\n",
        "768 10\n",
        "3691 6\n",
        "16 15\n",
        "427 4\n",
        "669 9\n",
        "0 16\n",
        "286 11\n",
        "6 16\n",
        "13111 8\n",
        "17 2\n",
        "440 4\n",
        "5733 6\n",
        "3322 6\n",
        "333398 7\n",
        "19027910 20\n",
        "73964712 13\n",
        "33156624 15\n",
        "406 3\n",
        "3600 4\n",
        "133015087 16\n",
        "14065439 11\n",
        "135647 6\n",
        "613794 8\n",
        "79320883 13\n",
        "433 3\n",
        "142129 6\n",
        "20074910 16\n",
        "27712 4\n",
        "109197403264830 17\n",
        "1767 3\n",
        "2518095982 9\n",
        "16184825266581 15\n",
        "60 2\n",
        "51908921235703 16\n",
        "373301530 8\n",
        "51140330728306 16\n",
        "78015012688021 17\n",
        "360651917262546 18\n",
        "15619605006173 15\n",
        "296851618 8\n",
        "1651507249349341 20\n",
        "234217752433205 18\n",
        "5004844 6\n",
        "820882585293 13\n",
        "0 64\n"
      ],
      "output": [
        "1\n",
        "5\n",
        "7\n",
        "1024\n",
        "983040\n",
        "6406200698\n",
        "2033\n",
        "1023\n",
        "1\n",
        "504262282264444927\n",
        "576460752303423488\n",
        "542648557841154044\n",
        "999999999999995905\n",
        "981546175132942729\n",
        "36028797018963967\n",
        "999948289\n",
        "38209103398929\n",
        "7734675\n",
        "247948501945678280\n",
        "1\n",
        "9471\n",
        "39105\n",
        "40960\n",
        "18561\n",
        "5535\n",
        "1\n",
        "8185\n",
        "64512\n",
        "73033\n",
        "65537\n",
        "20993\n",
        "96257\n",
        "34441\n",
        "142974977\n",
        "530210696\n",
        "808934145\n",
        "217957249\n",
        "402653185\n",
        "310378497\n",
        "903250260\n",
        "277820673\n",
        "612761601\n",
        "47611905\n",
        "877746562\n",
        "603979777\n",
        "893386753\n",
        "156957897\n",
        "54078379900534785\n",
        "530824147803045889\n",
        "612489549322387457\n",
        "835136255900516353\n",
        "753750817529397249\n",
        "576460752303423489\n",
        "927684967108968449\n",
        "628568807366983681\n",
        "880672956240363521\n",
        "237668409087623169\n",
        "866841191969193985\n",
        "676897611185127425\n",
        "208581753835618305\n",
        "660934198681731073\n",
        "333773758789582849\n",
        "488640559569698817\n",
        "167167411424854017\n",
        "1\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 814,
    "description": "Little Chris is bored during his physics lessons (too easy), so he has built a toy box to keep himself occupied. The box is special, since it has the ability to change gravity.\n\nThere are n columns of toy cubes in the box arranged in a line. The i-th column contains a_{i} cubes. At first, the gravity in the box is pulling the cubes downwards. When Chris switches the gravity, it begins to pull all the cubes to the right side of the box. The figure shows the initial and final configurations of the cubes in the box: the cubes that have changed their position are highlighted with orange. [Image] \n\nGiven the initial configuration of the toy cubes in the box, find the amounts of cubes in each of the n columns after the gravity switch!\n\n\n-----Input-----\n\nThe first line of input contains an integer n (1 \u2264 n \u2264 100), the number of the columns in the box. The next line contains n space-separated integer numbers. The i-th number a_{i} (1 \u2264 a_{i} \u2264 100) denotes the number of cubes in the i-th column.\n\n\n-----Output-----\n\nOutput n integer numbers separated by spaces, where the i-th number is the amount of cubes in the i-th column after the gravity switch.\n\n\n-----Examples-----\nInput\n4\n3 2 1 2\n\nOutput\n1 2 2 3 \n\nInput\n3\n2 3 8\n\nOutput\n2 3 8 \n\n\n\n-----Note-----\n\nThe first example case is shown on the figure. The top cube of the first column falls to the top of the last column; the top cube of the second column falls to the top of the third column; the middle cube of the first column falls to the top of the second column.\n\nIn the second example case the gravity switch does not change the heights of the columns.",
    "public_tests": {
      "input": [
        "4\n3 2 1 2\n",
        "3\n2 3 8\n"
      ],
      "output": [
        "1 2 2 3 \n",
        "2 3 8 \n"
      ]
    },
    "private_tests": {
      "input": [
        "4\n3 2 1 2\n",
        "3\n2 3 8\n",
        "5\n2 1 2 1 2\n",
        "1\n1\n",
        "2\n4 3\n",
        "6\n100 40 60 20 1 80\n",
        "10\n10 8 6 7 5 3 4 2 9 1\n",
        "10\n1 2 3 4 5 6 7 8 9 10\n",
        "100\n82 51 81 14 37 17 78 92 64 15 8 86 89 8 87 77 66 10 15 12 100 25 92 47 21 78 20 63 13 49 41 36 41 79 16 87 87 69 3 76 80 60 100 49 70 59 72 8 38 71 45 97 71 14 76 54 81 4 59 46 39 29 92 3 49 22 53 99 59 52 74 31 92 43 42 23 44 9 82 47 7 40 12 9 3 55 37 85 46 22 84 52 98 41 21 77 63 17 62 91\n",
        "100\n100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100\n",
        "10\n1 9 7 6 2 4 7 8 1 3\n",
        "20\n53 32 64 20 41 97 50 20 66 68 22 60 74 61 97 54 80 30 72 59\n",
        "30\n7 17 4 18 16 12 14 10 1 13 2 16 13 17 8 16 13 14 9 17 17 5 13 5 1 7 6 20 18 12\n",
        "40\n22 58 68 58 48 53 52 1 16 78 75 17 63 15 36 32 78 75 49 14 42 46 66 54 49 82 40 43 46 55 12 73 5 45 61 60 1 11 31 84\n",
        "70\n1 3 3 1 3 3 1 1 1 3 3 2 3 3 1 1 1 2 3 1 3 2 3 3 3 2 2 3 1 3 3 2 1 1 2 1 2 1 2 2 1 1 1 3 3 2 3 2 3 2 3 3 2 2 2 3 2 3 3 3 1 1 3 3 1 1 1 1 3 1\n",
        "90\n17 75 51 30 100 5 50 95 51 73 66 5 7 76 43 49 23 55 3 24 95 79 10 11 44 93 17 99 53 66 82 66 63 76 19 4 51 71 75 43 27 5 24 19 48 7 91 15 55 21 7 6 27 10 2 91 64 58 18 21 16 71 90 88 21 20 6 6 95 85 11 7 40 65 52 49 92 98 46 88 17 48 85 96 77 46 100 34 67 52\n",
        "100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "100\n1 1 1 1 2 1 1 1 1 1 2 2 1 1 2 1 2 1 1 1 2 1 1 2 1 2 1 1 2 2 2 1 1 2 1 1 1 2 2 2 1 1 1 2 1 2 2 1 2 1 1 2 2 1 2 1 2 1 2 2 1 1 1 2 1 1 2 1 2 1 2 2 2 1 2 1 2 2 2 1 2 2 1 1 1 1 2 2 2 2 2 2 2 1 1 1 2 1 2 1\n",
        "100\n2 1 1 1 3 2 3 3 2 3 3 1 3 3 1 3 3 1 1 1 2 3 1 2 3 1 2 3 3 1 3 1 1 2 3 2 3 3 2 3 3 1 2 2 1 2 3 2 3 2 2 1 1 3 1 3 2 1 3 1 3 1 3 1 1 3 3 3 2 3 2 2 2 2 1 3 3 3 1 2 1 2 3 2 1 3 1 3 2 1 3 1 2 1 2 3 1 3 2 3\n",
        "100\n7 4 5 5 10 10 5 8 5 7 4 5 4 6 8 8 2 6 3 3 10 7 10 8 6 2 7 3 9 7 7 2 4 5 2 4 9 5 10 1 10 5 10 4 1 3 4 2 6 9 9 9 10 6 2 5 6 1 8 10 4 10 3 4 10 5 5 4 10 4 5 3 7 10 2 7 3 6 9 6 1 6 5 5 4 6 6 4 4 1 5 1 6 6 6 8 8 6 2 6\n",
        "100\n12 10 5 11 13 12 14 13 7 15 15 12 13 19 12 18 14 10 10 3 1 10 16 11 19 8 10 15 5 10 12 16 11 13 11 15 14 12 16 8 11 8 15 2 18 2 14 13 15 20 8 8 4 12 14 7 10 3 9 1 7 19 6 7 2 14 8 20 7 17 18 20 3 18 18 9 6 10 4 1 4 19 9 13 3 3 12 11 11 20 8 2 13 6 7 12 1 4 17 3\n",
        "100\n5 13 1 40 30 10 23 32 33 12 6 4 15 29 31 17 23 5 36 31 32 38 24 11 34 39 19 21 6 19 31 35 1 15 6 29 22 15 17 15 1 17 2 34 20 8 27 2 29 26 13 9 22 27 27 3 20 40 4 40 33 29 36 30 35 16 19 28 26 11 36 24 29 5 40 10 38 34 33 23 34 39 31 7 10 31 22 6 36 24 14 31 34 23 2 4 26 16 2 32\n",
        "100\n72 44 34 74 9 60 26 37 55 77 74 69 28 66 54 55 8 36 57 31 31 48 32 66 40 70 77 43 64 28 37 10 21 58 51 32 60 28 51 52 28 35 7 33 1 68 38 70 57 71 8 20 42 57 59 4 58 10 17 47 22 48 16 3 76 67 32 37 64 47 33 41 75 69 2 76 39 9 27 75 20 21 52 25 71 21 11 29 38 10 3 1 45 55 63 36 27 7 59 41\n",
        "100\n75 18 61 10 56 53 42 57 79 80 31 2 50 45 54 99 84 52 71 21 86 3 19 98 14 37 40 62 63 68 5 10 87 8 81 85 52 52 57 94 2 7 56 96 19 76 1 13 81 6 80 47 22 59 99 32 9 5 36 88 98 91 70 70 12 93 12 22 85 1 97 48 94 16 84 84 51 34 62 7 68 51 30 2 37 82 4 7 27 1 80 9 61 16 59 55 12 96 94 82\n",
        "100\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100\n",
        "100\n100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n",
        "100\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n",
        "49\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97\n",
        "30\n1 4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49 52 55 58 61 64 67 70 73 76 79 82 85 88\n",
        "100\n100 51 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "10\n100 90 80 70 60 50 40 30 20 10\n",
        "1\n10\n"
      ],
      "output": [
        "1 2 2 3 \n",
        "2 3 8 \n",
        "1 1 2 2 2 \n",
        "1 \n",
        "3 4 \n",
        "1 20 40 60 80 100 \n",
        "1 2 3 4 5 6 7 8 9 10 \n",
        "1 2 3 4 5 6 7 8 9 10 \n",
        "3 3 3 4 7 8 8 8 9 9 10 12 12 13 14 14 15 15 16 17 17 20 21 21 22 22 23 25 29 31 36 37 37 38 39 40 41 41 41 42 43 44 45 46 46 47 47 49 49 49 51 52 52 53 54 55 59 59 59 60 62 63 63 64 66 69 70 71 71 72 74 76 76 77 77 78 78 79 80 81 81 82 82 84 85 86 87 87 87 89 91 92 92 92 92 97 98 99 100 100 \n",
        "100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 100 \n",
        "1 1 2 3 4 6 7 7 8 9 \n",
        "20 20 22 30 32 41 50 53 54 59 60 61 64 66 68 72 74 80 97 97 \n",
        "1 1 2 4 5 5 6 7 7 8 9 10 12 12 13 13 13 13 14 14 16 16 16 17 17 17 17 18 18 20 \n",
        "1 1 5 11 12 14 15 16 17 22 31 32 36 40 42 43 45 46 46 48 49 49 52 53 54 55 58 58 60 61 63 66 68 73 75 75 78 78 82 84 \n",
        "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 \n",
        "2 3 4 5 5 5 6 6 6 7 7 7 7 10 10 11 11 15 16 17 17 17 18 19 19 20 21 21 21 23 24 24 27 27 30 34 40 43 43 44 46 46 48 48 49 49 50 51 51 51 52 52 53 55 55 58 63 64 65 66 66 66 67 71 71 73 75 75 76 76 77 79 82 85 85 88 88 90 91 91 92 93 95 95 95 96 98 99 100 100 \n",
        "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 \n",
        "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 \n",
        "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 \n",
        "1 1 1 1 1 1 2 2 2 2 2 2 2 2 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 8 8 8 8 8 8 8 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10 10 10 10 \n",
        "1 1 1 1 2 2 2 2 3 3 3 3 3 3 4 4 4 4 5 5 6 6 6 7 7 7 7 7 7 8 8 8 8 8 8 8 9 9 9 10 10 10 10 10 10 10 10 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 13 13 13 13 13 13 13 14 14 14 14 14 14 15 15 15 15 15 15 16 16 16 17 17 18 18 18 18 18 19 19 19 19 20 20 20 20 \n",
        "1 1 1 2 2 2 2 3 4 4 4 5 5 5 6 6 6 6 7 8 9 10 10 10 11 11 12 13 13 14 15 15 15 15 16 16 17 17 17 19 19 19 20 20 21 22 22 22 23 23 23 23 24 24 24 26 26 26 27 27 27 28 29 29 29 29 29 30 30 31 31 31 31 31 31 32 32 32 33 33 33 34 34 34 34 34 35 35 36 36 36 36 38 38 39 39 40 40 40 40 \n",
        "1 1 2 3 3 4 7 7 8 8 9 9 10 10 10 11 16 17 20 20 21 21 21 22 25 26 27 27 28 28 28 28 29 31 31 32 32 32 33 33 34 35 36 36 37 37 37 38 38 39 40 41 41 42 43 44 45 47 47 48 48 51 51 52 52 54 55 55 55 57 57 57 58 58 59 59 60 60 63 64 64 66 66 67 68 69 69 70 70 71 71 72 74 74 75 75 76 76 77 77 \n",
        "1 1 1 2 2 2 3 4 5 5 6 7 7 7 8 9 9 10 10 12 12 12 13 14 16 16 18 19 19 21 22 22 27 30 31 32 34 36 37 37 40 42 45 47 48 50 51 51 52 52 52 53 54 55 56 56 57 57 59 59 61 61 62 62 63 68 68 70 70 71 75 76 79 80 80 80 81 81 82 82 84 84 84 85 85 86 87 88 91 93 94 94 94 96 96 97 98 98 99 99 \n",
        "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 \n",
        "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 \n",
        "50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 \n",
        "1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 \n",
        "1 4 7 10 13 16 19 22 25 28 31 34 37 40 43 46 49 52 55 58 61 64 67 70 73 76 79 82 85 88 \n",
        "1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 51 100 \n",
        "10 20 30 40 50 60 70 80 90 100 \n",
        "10 \n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 262,
    "description": "ZS the Coder and Chris the Baboon arrived at the entrance of Udayland. There is a n \u00d7 n magic grid on the entrance which is filled with integers. Chris noticed that exactly one of the cells in the grid is empty, and to enter Udayland, they need to fill a positive integer into the empty cell.\n\nChris tried filling in random numbers but it didn't work. ZS the Coder realizes that they need to fill in a positive integer such that the numbers in the grid form a magic square. This means that he has to fill in a positive integer so that the sum of the numbers in each row of the grid ($\\sum a_{r, i}$), each column of the grid ($\\sum a_{i, c}$), and the two long diagonals of the grid (the main diagonal\u00a0\u2014 $\\sum a_{i, i}$ and the secondary diagonal\u00a0\u2014 $\\sum a_{i, n - i + 1}$) are equal. \n\nChris doesn't know what number to fill in. Can you help Chris find the correct positive integer to fill in or determine that it is impossible?\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 500)\u00a0\u2014 the number of rows and columns of the magic grid.\n\nn lines follow, each of them contains n integers. The j-th number in the i-th of them denotes a_{i}, j (1 \u2264 a_{i}, j \u2264 10^9 or a_{i}, j = 0), the number in the i-th row and j-th column of the magic grid. If the corresponding cell is empty, a_{i}, j will be equal to 0. Otherwise, a_{i}, j is positive.\n\nIt is guaranteed that there is exactly one pair of integers i, j (1 \u2264 i, j \u2264 n) such that a_{i}, j = 0.\n\n\n-----Output-----\n\nOutput a single integer, the positive integer x (1 \u2264 x \u2264 10^18) that should be filled in the empty cell so that the whole grid becomes a magic square. If such positive integer x does not exist, output  - 1 instead.\n\nIf there are multiple solutions, you may print any of them.\n\n\n-----Examples-----\nInput\n3\n4 0 2\n3 5 7\n8 1 6\n\nOutput\n9\n\nInput\n4\n1 1 1 1\n1 1 0 1\n1 1 1 1\n1 1 1 1\n\nOutput\n1\n\nInput\n4\n1 1 1 1\n1 1 0 1\n1 1 2 1\n1 1 1 1\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample case, we can fill in 9 into the empty cell to make the resulting grid a magic square. Indeed, \n\nThe sum of numbers in each row is:\n\n4 + 9 + 2 = 3 + 5 + 7 = 8 + 1 + 6 = 15.\n\nThe sum of numbers in each column is:\n\n4 + 3 + 8 = 9 + 5 + 1 = 2 + 7 + 6 = 15.\n\nThe sum of numbers in the two diagonals is:\n\n4 + 5 + 6 = 2 + 5 + 8 = 15.\n\nIn the third sample case, it is impossible to fill a number in the empty square such that the resulting grid is a magic square.",
    "public_tests": {
      "input": [
        "3\n4 0 2\n3 5 7\n8 1 6\n",
        "4\n1 1 1 1\n1 1 0 1\n1 1 1 1\n1 1 1 1\n",
        "4\n1 1 1 1\n1 1 0 1\n1 1 2 1\n1 1 1 1\n"
      ],
      "output": [
        "9\n",
        "1\n",
        "-1\n"
      ]
    },
    "private_tests": {
      "input": [
        "3\n4 0 2\n3 5 7\n8 1 6\n",
        "4\n1 1 1 1\n1 1 0 1\n1 1 1 1\n1 1 1 1\n",
        "4\n1 1 1 1\n1 1 0 1\n1 1 2 1\n1 1 1 1\n",
        "1\n0\n",
        "10\n92 67 99 74 1 51 8 58 15 40\n17 42 24 49 0 26 83 33 90 65\n98 73 80 55 7 57 14 64 16 41\n23 48 5 30 82 32 89 39 91 66\n4 54 81 56 88 63 20 70 22 47\n79 29 6 31 13 38 95 45 97 72\n85 60 87 62 19 69 21 71 3 28\n10 35 12 37 94 44 96 46 78 53\n86 61 93 68 25 75 2 52 9 34\n11 36 18 43 100 50 77 27 84 59\n",
        "4\n1000000000 1000000000 1000000000 1000000000\n1000000000 1000000000 1000000000 1000000000\n1000000000 1000000000 0 1000000000\n1000000000 1000000000 1000000000 1000000000\n",
        "3\n3 8 1\n2 4 6\n7 0 5\n",
        "3\n1 2 2\n2 2 1\n0 1 2\n",
        "3\n1 6 10\n5 6 16\n0 5 1\n",
        "3\n2 2 1\n1 2 2\n0 1 2\n",
        "3\n1 2 2\n2 2 1\n2 1 0\n",
        "3\n2016 2016 2016\n2016 0 2016\n2016 2016 2016\n",
        "10\n92 67 99 74 1 51 8 58 15 40\n17 42 24 49 76 26 83 33 90 65\n98 73 80 55 7 57 14 64 16 41\n23 48 5 30 82 32 89 39 91 66\n4 54 81 56 88 63 20 70 22 47\n79 29 6 31 13 38 95 45 97 72\n85 60 87 62 19 69 21 71 3 28\n10 35 12 37 94 44 96 46 78 53\n86 61 93 68 25 75 2 52 0 34\n11 36 18 43 100 50 77 27 84 59\n",
        "10\n92 67 99 74 1 51 8 58 15 40\n17 42 24 49 76 26 83 33 90 65\n98 73 80 55 7 57 14 64 16 41\n23 48 5 30 82 32 89 39 91 66\n4 54 81 56 0 63 20 70 22 47\n79 29 6 31 13 38 95 45 97 72\n85 60 87 62 19 69 21 71 3 28\n10 35 12 37 94 44 96 46 78 53\n86 61 93 68 25 75 2 52 9 34\n11 36 18 43 100 50 77 27 84 59\n",
        "3\n2 2 1\n1 2 2\n2 1 0\n",
        "10\n92 67 99 74 1 51 8 58 15 0\n17 42 24 49 76 26 83 33 90 65\n98 73 80 55 7 57 14 64 16 41\n23 48 5 30 82 32 89 39 91 66\n4 54 81 56 88 63 20 70 22 47\n79 29 6 31 13 38 95 45 97 72\n85 60 87 62 19 69 21 71 3 28\n10 35 12 37 94 44 96 46 78 53\n86 61 93 68 25 75 2 52 9 34\n11 36 18 43 100 50 77 27 84 59\n",
        "4\n2 2 2 2\n2 0 2 2\n3 2 2 1\n2 2 2 2\n",
        "3\n1 15 5\n11 7 3\n9 0 13\n",
        "3\n61 0 41\n11 31 51\n21 71 1\n",
        "3\n3 0 3\n2 3 2\n2 3 2\n",
        "3\n0 2 2\n3 1 1\n1 2 2\n",
        "3\n1 0 1\n1 1 2\n1 1 1\n",
        "3\n1 0 1\n2 1 2\n2 1 2\n",
        "3\n1 0 1\n4 1 4\n1 1 1\n",
        "3\n1 1 1\n1 1 0\n1 2 1\n",
        "3\n2 0 1\n1 2 1\n1 1 2\n",
        "3\n1 2 2\n3 1 1\n0 2 2\n",
        "4\n0 1 1 1\n1 1 1 1\n1 1 1 2\n1 1 2 1\n",
        "4\n1 1 0 1\n1 1 1 1\n1 1 1 1\n1 2 1 1\n",
        "5\n1 1 1000000000 1000000000 1000000000\n1 1000000000 1 1000000000 1000000000\n0 1 1 1 1\n1 1000000000 1000000000 1000000000 1\n1 1000000000 1000000000 1 1000000000\n",
        "3\n5 5 5\n6 5 0\n5 5 5\n",
        "3\n1 0 1\n50 1 500\n2 1 2\n",
        "9\n1 1000000000 1 1000000000 1 1000000000 1 1000000000 1\n1000000000 1 1000000000 1 1 1 1000000000 1 1000000000\n1 1000000000 1 1000000000 1 1000000000 1 1000000000 1\n1000000000 1 1000000000 1 1 1 1000000000 1 1000000000\n1 1 1 1 0 1 1 1 1\n1000000000 1 1000000000 1 1 1 1000000000 1 1000000000\n1 1000000000 1 1000000000 1 1000000000 1 1000000000 1\n1000000000 1 1000000000 1 1 1 1000000000 1 1000000000\n1 1000000000 1 1000000000 1 1000000000 1 1000000000 1\n",
        "3\n7 22 1\n4 10 16\n19 0 13\n",
        "5\n1 1 1 1 1\n1 1 1 1 0\n1 2 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n",
        "4\n3 6 0 2\n5 5 7 1\n1 7 4 6\n2 9 1 6\n",
        "5\n1 2 1 1 1\n1 1 2 1 1\n2 1 1 0 1\n1 1 1 1 2\n1 1 1 2 1\n",
        "11\n5 5 5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5 5 5\n5 5 5 5 5 5 5 5 5 5 5\n5 5 5 5 13 1 1 5 5 5 5\n5 5 5 5 5 9 1 5 5 5 5\n5 5 5 5 0 5 13 5 5 5 5\n",
        "2\n5 5\n5 0\n",
        "5\n10 10 1 10 10\n1 1 0 1 1\n10 10 1 10 10\n10 10 1 10 10\n10 10 1 10 10\n",
        "5\n1 1 1 2 1\n1 1 1 1 1\n1 1 0 1 1\n1 1 1 1 1\n1 1 1 1 1\n",
        "3\n1000000000 1000000000 1000000000\n1000000000 1000000000 1000000000\n1000000000 0 1000000000\n",
        "3\n3 3 3\n0 2 5\n1 1 1\n",
        "4\n2 2 3 1\n1 0 3 3\n4 3 4 1\n1 2 3 1\n",
        "3\n1 1 2\n2 1 0\n1 2 1\n",
        "2\n1 2\n1 0\n",
        "2\n0 535\n535 535\n",
        "6\n0 1 1 1 1 1\n1 1 1000000000 1000000000 1000000000 1000000000\n1 1000000000 1 1000000000 1000000000 1000000000\n1 1000000000 1000000000 1 1000000000 1000000000\n1 1000000000 1000000000 1000000000 1 1000000000\n1 1000000000 1000000000 1000000000 1000000000 1\n",
        "4\n2 6 0 3\n5 5 7 1\n5 1 3 9\n6 6 1 5\n",
        "5\n2 1 2 1 2\n2 2 2 2 2\n2 2 0 2 2\n2 2 2 2 2\n2 2 2 2 2\n",
        "3\n1 2 3\n1 0 3\n1 2 3\n",
        "3\n0 1 2\n1 2 1\n2 1 1\n",
        "4\n2 3 2 3\n3 2 3 0\n2 4 2 2\n3 1 3 3\n",
        "3\n1 1 1\n1 0 1\n1 2 1\n",
        "3\n1 1 1\n1 4 1\n1 1 0\n",
        "5\n1 1 2 1 1\n1 1 1 1 1\n1 1 1 0 1\n1 1 1 1 1\n1 1 1 1 1\n",
        "3\n0 1 1\n1 1 1\n1 1 2\n",
        "3\n1 2 1\n1 0 1\n1 2 1\n",
        "3\n6 7 2\n1 0 9\n8 3 4\n",
        "3\n1 1 1\n1 1 1\n1 0 1\n",
        "3\n3 6 0\n3 3 5\n5 2 4\n",
        "5\n1 2 2 2 1\n1 1 1 1 0\n2 2 1 2 1\n2 1 2 1 1\n1 2 2 2 1\n",
        "4\n1 1 1 1\n1 1 1 0\n1 1 2 1\n1 1 1 1\n",
        "3\n13 0 19\n16 10 4\n1 22 7\n",
        "4\n1 2 2 1\n2 1 0 2\n2 1 1 2\n1 2 2 1\n"
      ],
      "output": [
        "9\n",
        "1\n",
        "-1\n",
        "1\n",
        "76\n",
        "1000000000\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "2016\n",
        "9\n",
        "88\n",
        "-1\n",
        "40\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "2999999998\n",
        "-1\n",
        "-1\n",
        "3999999997\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "5\n",
        "-1\n",
        "-1\n",
        "1000000000\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "535\n",
        "3999999997\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "5\n",
        "1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "-1\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 2810,
    "description": "Luke likes to ride on public transit in different cities he visits, just for fun. He tries to find unique ways to travel in loops: leaving from one transit station, traveling along the transit connections to at least one other station, and returning to the station where he started. He is finding lots of loops, and he wants to know just how many there are in different transit systems. There may be so many he won\u2019t ever have time to try them all, but he\u2019ll find some satisfaction in knowing they are there.\n\nHe\u2019s particularly interested in counting simple loops. A simple loop is a sequence of unique transit stations $t_1, t_2, \\ldots , t_ j$, where there\u2019s a way to connect directly from $t_ i$ to $t_{i+1}$ for $1 \\leq i < j$ and also from $t_ j$ to $t_1$. Of course, we can write down a simple loop starting with of the stations in the loop, therefore we consider any cyclic shift of such a sequence to be the same simple loop. However, two simple loops which visit the same set of transit stations in a different order are considered distinct.\n\nHelp Luke by writing a program to count how many unique simple loops there are in each transit system. The following figures illustrate the transit stations (numbered ovals) and one-way connections (arrows) of the sample input.  \n\n-----Input-----\nInput contains a description of one transit system. The description begins with a line containing an integer $3 \\leq m \\leq 9$ indicating the number of transit stations in the system. Stations are numbered $0$ to $m-1$. The next line contains an integer $1 \\leq n \\leq m(m-1)$ indicating the number of connections that follow, one connection per line. Each connection is a pair of integers $s~ t$ ($0 \\leq s < m$, $0 \\leq t < m$, $s \\neq t$), indicating that there is a one-way connection from station $s$ to station $t$.\n\n-----Output-----\nPrint the number of unique simple loops in the transit system.\n\n-----Examples-----\nSample Input 1:\n5\n5\n0 1\n1 2\n2 3\n3 4\n4 2\nSample Output 1:\n1\n\nSample Input 2:\n8\n10\n0 1\n1 2\n2 3\n3 4\n4 5\n5 0\n2 6\n6 0\n3 7\n7 0\nSample Output 2:\n3",
    "public_tests": {
      "input": [
        "5\n5\n0 1\n1 2\n2 3\n3 4\n4 2\n",
        "8\n10\n0 1\n1 2\n2 3\n3 4\n4 5\n5 0\n2 6\n6 0\n3 7\n7 0\n"
      ],
      "output": [
        "1\n",
        "3\n"
      ]
    },
    "private_tests": {
      "input": [
        "5\n5\n0 1\n1 2\n2 3\n3 4\n4 2\n",
        "8\n10\n0 1\n1 2\n2 3\n3 4\n4 5\n5 0\n2 6\n6 0\n3 7\n7 0\n",
        "4\n8\n0 1\n1 2\n2 3\n3 0\n1 0\n2 1\n3 2\n0 3\n"
      ],
      "output": [
        "1\n",
        "3\n",
        "6\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1877,
    "description": "Two neighboring kingdoms decided to build a wall between them with some gates to enable the citizens to go from one kingdom to another. Each time a citizen passes through a gate, he has to pay one silver coin.\n\nThe world can be represented by the first quadrant of a plane and the wall is built along the identity line (i.e. the line with the equation x = y). Any point below the wall belongs to the first kingdom while any point above the wall belongs to the second kingdom. There is a gate at any integer point on the line (i.e. at points (0, 0), (1, 1), (2, 2), ...). The wall and the gates do not belong to any of the kingdoms. \n\nFafa is at the gate at position (0, 0) and he wants to walk around in the two kingdoms. He knows the sequence S of moves he will do. This sequence is a string where each character represents a move. The two possible moves Fafa will do are 'U' (move one step up, from (x, y) to (x, y + 1)) and 'R' (move one step right, from (x, y) to (x + 1, y)). \n\nFafa wants to know the number of silver coins he needs to pay to walk around the two kingdoms following the sequence S. Note that if Fafa visits a gate without moving from one kingdom to another, he pays no silver coins. Also assume that he doesn't pay at the gate at point (0, 0), i.\u00a0e. he is initially on the side he needs. \n\n\n-----Input-----\n\nThe first line of the input contains single integer n (1 \u2264 n \u2264 10^5) \u2014 the number of moves in the walking sequence.\n\nThe second line contains a string S of length n consisting of the characters 'U' and 'R' describing the required moves. Fafa will follow the sequence S in order from left to right.\n\n\n-----Output-----\n\nOn a single line, print one integer representing the number of silver coins Fafa needs to pay at the gates to follow the sequence S.\n\n\n-----Examples-----\nInput\n1\nU\n\nOutput\n0\n\nInput\n6\nRURUUR\n\nOutput\n1\n\nInput\n7\nURRRUUU\n\nOutput\n2\n\n\n\n-----Note-----\n\nThe figure below describes the third sample. The red arrows represent the sequence of moves Fafa will follow. The green gates represent the gates at which Fafa have to pay silver coins. [Image]",
    "public_tests": {
      "input": [
        "1\nU\n",
        "6\nRURUUR\n",
        "7\nURRRUUU\n"
      ],
      "output": [
        "0\n",
        "1\n",
        "2\n"
      ]
    },
    "private_tests": {
      "input": [
        "1\nU\n",
        "6\nRURUUR\n",
        "7\nURRRUUU\n",
        "100\nRUURUURRUURUUUUURRUUURRRRUURRURRURRRRUUUUUURRUURRRRURUUURUURURRRRRURUURRUURUURRUUURUUUUUURRUUUURUUUR\n",
        "7\nURURRUR\n",
        "15\nRUURRRRURRUUUUU\n",
        "6\nUURRRU\n",
        "7\nRRRRRRR\n",
        "2\nUR\n",
        "2\nUU\n"
      ],
      "output": [
        "0\n",
        "1\n",
        "2\n",
        "3\n",
        "1\n",
        "3\n",
        "1\n",
        "0\n",
        "0\n",
        "0\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 30,
    "description": "The campus has $m$ rooms numbered from $0$ to $m - 1$. Also the $x$-mouse lives in the campus. The $x$-mouse is not just a mouse: each second $x$-mouse moves from room $i$ to the room $i \\cdot x \\mod{m}$ (in fact, it teleports from one room to another since it doesn't visit any intermediate room). Starting position of the $x$-mouse is unknown.\n\nYou are responsible to catch the $x$-mouse in the campus, so you are guessing about minimum possible number of traps (one trap in one room) you need to place. You are sure that if the $x$-mouse enters a trapped room, it immediately gets caught.\n\nAnd the only observation you made is $\\text{GCD} (x, m) = 1$.\n\n\n-----Input-----\n\nThe only line contains two integers $m$ and $x$ ($2 \\le m \\le 10^{14}$, $1 \\le x < m$, $\\text{GCD} (x, m) = 1$) \u2014 the number of rooms and the parameter of $x$-mouse. \n\n\n-----Output-----\n\nPrint the only integer \u2014 minimum number of traps you need to install to catch the $x$-mouse.\n\n\n-----Examples-----\nInput\n4 3\n\nOutput\n3\n\nInput\n5 2\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example you can, for example, put traps in rooms $0$, $2$, $3$. If the $x$-mouse starts in one of this rooms it will be caught immediately. If $x$-mouse starts in the $1$-st rooms then it will move to the room $3$, where it will be caught.\n\nIn the second example you can put one trap in room $0$ and one trap in any other room since $x$-mouse will visit all rooms $1..m-1$ if it will start in any of these rooms.",
    "public_tests": {
      "input": [
        "4 3\n",
        "5 2\n"
      ],
      "output": [
        "3\n",
        "2\n"
      ]
    },
    "private_tests": {
      "input": [
        "4 3\n",
        "5 2\n",
        "7 2\n",
        "2 1\n",
        "100000000000000 1\n",
        "100000000000000 99999999999999\n",
        "12 1\n",
        "12 5\n",
        "12 7\n",
        "12 11\n",
        "1117 1\n",
        "1117 2\n",
        "1117 3\n",
        "1117 4\n",
        "1117 5\n",
        "1117 6\n",
        "1117 7\n",
        "1117 8\n",
        "1117 9\n",
        "1260 1259\n",
        "1260 1249\n",
        "1260 1247\n",
        "1260 1243\n",
        "1260 1241\n",
        "1260 1237\n",
        "1260 1231\n",
        "1260 1229\n",
        "1260 1223\n",
        "1260 1219\n",
        "1260 1159\n",
        "1260 1157\n",
        "1260 1153\n",
        "1260 1151\n",
        "1260 1147\n",
        "1260 1139\n",
        "1260 1133\n",
        "1260 1129\n",
        "1260 1123\n",
        "1260 1121\n",
        "99999999999973 53\n",
        "99999999999973 59\n",
        "99999999999973 61\n",
        "99999999999973 67\n",
        "99999999999973 71\n",
        "99999999999971 53\n",
        "99999999999971 59\n",
        "99999999999971 61\n",
        "99999999999971 67\n",
        "99999999999971 71\n",
        "99999999999962 73\n",
        "99999999999962 79\n",
        "99999999999962 83\n",
        "99999999999962 89\n",
        "99999999999962 97\n",
        "99999999999898 73\n",
        "99999999999898 79\n",
        "99999999999898 83\n",
        "99999999999898 89\n",
        "99999999999898 97\n",
        "99999999999894 101\n",
        "99999999999894 103\n",
        "99999999999894 107\n",
        "99999999999894 109\n",
        "99999999999894 113\n",
        "99999999999726 101\n",
        "99999999999726 103\n",
        "99999999999726 107\n",
        "99999999999726 109\n",
        "99999999999726 113\n",
        "99999999999030 127\n",
        "99999999999030 131\n",
        "99999999999030 137\n",
        "99999999999030 139\n",
        "99999999999030 149\n",
        "99999999998490 127\n",
        "99999999998490 131\n",
        "99999999998490 137\n",
        "99999999998490 139\n",
        "99999999998490 149\n",
        "97821761637600 53\n",
        "97821761637600 59\n",
        "97821761637600 61\n",
        "97821761637600 67\n",
        "97821761637600 71\n",
        "97821761637600 73\n",
        "97821761637600 79\n",
        "97821761637600 83\n",
        "97821761637600 89\n",
        "97821761637600 97\n",
        "7420738134810 101\n",
        "7420738134810 103\n",
        "7420738134810 107\n",
        "7420738134810 109\n",
        "7420738134810 113\n",
        "7420738134810 127\n",
        "7420738134810 131\n",
        "7420738134810 137\n",
        "7420738134810 139\n",
        "7420738134810 149\n",
        "97821761637600 963761198299\n",
        "97821761637600 963761198297\n",
        "97821761637600 963761198293\n",
        "97821761637600 963761198291\n",
        "97821761637600 963761198287\n",
        "97821761637600 963761198273\n",
        "97821761637600 963761198269\n",
        "97821761637600 963761198263\n",
        "97821761637600 963761198261\n",
        "97821761637600 963761198251\n",
        "97821761637600 97821761637499\n",
        "97821761637600 97821761637497\n",
        "97821761637600 97821761637493\n",
        "97821761637600 97821761637491\n",
        "97821761637600 97821761637487\n",
        "7420738134810 200560490029\n",
        "7420738134810 200560490027\n",
        "7420738134810 200560490023\n",
        "7420738134810 200560490021\n",
        "7420738134810 200560490017\n",
        "7420738134810 200560490003\n",
        "7420738134810 200560489999\n",
        "7420738134810 200560489993\n",
        "7420738134810 200560489991\n",
        "7420738134810 200560489981\n",
        "7420738134810 7420738134709\n",
        "7420738134810 7420738134707\n",
        "7420738134810 7420738134703\n",
        "7420738134810 7420738134701\n",
        "7420738134810 7420738134697\n",
        "99999640000243 99999640000143\n",
        "99999640000243 99999640000142\n",
        "99999640000243 99999640000141\n",
        "99999640000243 99999640000140\n",
        "99999640000243 99999640000139\n",
        "93823365636000 53\n",
        "93823365636000 59\n",
        "93823365636000 61\n",
        "18632716502401 67\n",
        "18632716502401 71\n",
        "18632716502401 73\n",
        "93047965920000 79\n",
        "93047965920000 83\n",
        "93047965920000 89\n"
      ],
      "output": [
        "3\n",
        "2\n",
        "3\n",
        "2\n",
        "100000000000000\n",
        "50000000000001\n",
        "12\n",
        "8\n",
        "9\n",
        "7\n",
        "1117\n",
        "2\n",
        "13\n",
        "3\n",
        "4\n",
        "2\n",
        "3\n",
        "4\n",
        "13\n",
        "631\n",
        "240\n",
        "217\n",
        "189\n",
        "300\n",
        "148\n",
        "375\n",
        "236\n",
        "163\n",
        "385\n",
        "253\n",
        "144\n",
        "180\n",
        "275\n",
        "215\n",
        "231\n",
        "380\n",
        "276\n",
        "143\n",
        "420\n",
        "37\n",
        "3\n",
        "3\n",
        "117\n",
        "2\n",
        "2\n",
        "11\n",
        "2\n",
        "3\n",
        "3\n",
        "10\n",
        "10\n",
        "8\n",
        "10\n",
        "4\n",
        "4\n",
        "4\n",
        "4\n",
        "4\n",
        "10\n",
        "28\n",
        "12\n",
        "10\n",
        "12\n",
        "10\n",
        "22\n",
        "18\n",
        "10\n",
        "12\n",
        "10\n",
        "162\n",
        "100\n",
        "100\n",
        "48\n",
        "316\n",
        "36\n",
        "110\n",
        "30\n",
        "126\n",
        "106\n",
        "6386192358\n",
        "5903853669\n",
        "1778524398\n",
        "9386162115\n",
        "3440795217\n",
        "3407682168\n",
        "2275785525\n",
        "4545097955\n",
        "19428828848\n",
        "2191149504\n",
        "1244195550\n",
        "2829289260\n",
        "302443010\n",
        "309268638\n",
        "291128068\n",
        "500231088\n",
        "309172890\n",
        "7972868454\n",
        "2547026670\n",
        "1403838534\n",
        "6174161235\n",
        "10459717320\n",
        "11919509478\n",
        "5810183379\n",
        "2616319665\n",
        "11146618176\n",
        "2985636126\n",
        "48735509439\n",
        "13656285022\n",
        "6049249425\n",
        "6174161235\n",
        "8923056792\n",
        "11943039006\n",
        "5832233847\n",
        "2616319665\n",
        "1128917538\n",
        "1003979340\n",
        "291692304\n",
        "309271050\n",
        "293274234\n",
        "498085450\n",
        "321151644\n",
        "7212515628\n",
        "2135429940\n",
        "1403682750\n",
        "1244367054\n",
        "2829284640\n",
        "302429394\n",
        "309271050\n",
        "291126132\n",
        "118\n",
        "40\n",
        "117\n",
        "24\n",
        "21\n",
        "238670450\n",
        "58923677\n",
        "31645794\n",
        "3\n",
        "5\n",
        "2\n",
        "103938875\n",
        "20177587\n",
        "517743436\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1211,
    "description": "Dima has a hamsters farm. Soon N hamsters will grow up on it and Dima will sell them in a city nearby.\n\nHamsters should be transported in boxes. If some box is not completely full, the hamsters in it are bored, that's why each box should be completely full with hamsters.\n\nDima can buy boxes at a factory. The factory produces boxes of K kinds, boxes of the i-th kind can contain in themselves a_{i} hamsters. Dima can buy any amount of boxes, but he should buy boxes of only one kind to get a wholesale discount.\n\nOf course, Dima would buy boxes in such a way that each box can be completely filled with hamsters and transported to the city. If there is no place for some hamsters, Dima will leave them on the farm.\n\nFind out how many boxes and of which type should Dima buy to transport maximum number of hamsters.\n\n\n-----Input-----\n\nThe first line contains two integers N and K (0 \u2264 N \u2264 10^18, 1 \u2264 K \u2264 10^5)\u00a0\u2014 the number of hamsters that will grow up on Dima's farm and the number of types of boxes that the factory produces.\n\nThe second line contains K integers a_1, a_2, ..., a_{K} (1 \u2264 a_{i} \u2264 10^18 for all i)\u00a0\u2014 the capacities of boxes.\n\n\n-----Output-----\n\nOutput two integers: the type of boxes that Dima should buy and the number of boxes of that type Dima should buy. Types of boxes are numbered from 1 to K in the order they are given in input.\n\nIf there are many correct answers, output any of them.\n\n\n-----Examples-----\nInput\n19 3\n5 4 10\n\nOutput\n2 4\n\nInput\n28 3\n5 6 30\n\nOutput\n1 5",
    "public_tests": {
      "input": [
        "19 3\n5 4 10\n",
        "28 3\n5 6 30\n"
      ],
      "output": [
        "2 4\n",
        "1 5\n"
      ]
    },
    "private_tests": {
      "input": [
        "19 3\n5 4 10\n",
        "28 3\n5 6 30\n",
        "1 1\n1\n",
        "0 2\n2 3\n",
        "30 4\n4 5 5 4\n",
        "120 7\n109 92 38 38 49 38 92\n",
        "357 40\n12 10 12 11 12 12 12 10 10 10 12 12 12 12 12 10 12 10 10 10 11 10 12 10 12 10 12 10 10 12 12 12 12 10 10 10 12 12 12 12\n",
        "587 100\n92 92 76 95 61 60 64 79 64 96 63 92 60 61 95 71 60 61 65 63 84 76 98 63 90 61 61 71 63 61 95 90 79 71 77 67 63 61 63 60 100 71 98 88 67 95 60 61 79 76 70 61 64 65 64 77 96 95 84 100 67 60 84 92 70 100 63 79 61 77 92 74 60 90 84 80 76 61 88 79 64 61 79 60 61 67 98 98 92 76 61 60 80 77 77 76 63 88 99 70\n",
        "98765 30\n89 841 599 240 356 599 92 305 305 536 356 92 622 1000 751 522 89 149 356 598 305 518 996 92 622 536 356 91 779 770\n",
        "947264836 50\n977141206 956777871 186433588 538218068 759102378 327484438 88827268 266300062 670616672 756092978 414181331 913675814 898008516 343057716 99416265 236586817 52751842 550467703 684435578 844649988 917709231 550467703 493542638 707106470 414181331 198095018 913675814 99416265 550467703 679553907 186433588 355713982 670616672 977141206 504598561 327484438 414181331 463431413 546229641 132582931 463431413 759102378 273063720 683939057 924604119 759102378 463431413 52751842 552131077 903126340\n",
        "600003000040000507 10\n334302557805985467 334302557805985467 681026146296527968 157006854340095780 188330644415015186 803011712275585087 638039699540420111 638039699540420111 600874219702299205 923891462598005659\n",
        "666 2\n1 300\n",
        "899999999999999991 1\n199999999999999998\n",
        "10 1\n11\n",
        "999999999999999999 1\n500000000000000000\n",
        "2 1\n2\n",
        "199999999999999999 1\n100000000000000000\n",
        "999999999999999999 1\n1000000000000000000\n",
        "1000000000000000000 1\n500000000000000001\n",
        "1000000000000000000 1\n2\n",
        "1000000000000000000 5\n500000000000000010 500000000000000010 500000000000000010 500000000000000010 500000000000000030\n",
        "1000000000000000000 1\n900000000000000000\n"
      ],
      "output": [
        "2 4\n",
        "1 5\n",
        "1 1\n",
        "1 0\n",
        "2 6\n",
        "3 3\n",
        "4 32\n",
        "19 9\n",
        "28 1085\n",
        "16 4\n",
        "5 3\n",
        "1 666\n",
        "1 4\n",
        "1 0\n",
        "1 1\n",
        "1 1\n",
        "1 1\n",
        "1 0\n",
        "1 1\n",
        "1 500000000000000000\n",
        "5 1\n",
        "1 1\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 2034,
    "description": "Berland has n cities connected by m bidirectional roads. No road connects a city to itself, and each pair of cities is connected by no more than one road. It is not guaranteed that you can get from any city to any other one, using only the existing roads.\n\nThe President of Berland decided to make changes to the road system and instructed the Ministry of Transport to make this reform. Now, each road should be unidirectional (only lead from one city to another).\n\nIn order not to cause great resentment among residents, the reform needs to be conducted so that there can be as few separate cities as possible. A city is considered separate, if no road leads into it, while it is allowed to have roads leading from this city.\n\nHelp the Ministry of Transport to find the minimum possible number of separate cities after the reform.\n\n\n-----Input-----\n\nThe first line of the input contains two positive integers, n and m \u2014 the number of the cities and the number of roads in Berland (2 \u2264 n \u2264 100 000, 1 \u2264 m \u2264 100 000). \n\nNext m lines contain the descriptions of the roads: the i-th road is determined by two distinct integers x_{i}, y_{i} (1 \u2264 x_{i}, y_{i} \u2264 n, x_{i} \u2260 y_{i}), where x_{i} and y_{i} are the numbers of the cities connected by the i-th road.\n\nIt is guaranteed that there is no more than one road between each pair of cities, but it is not guaranteed that from any city you can get to any other one, using only roads.\n\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 the minimum number of separated cities after the reform.\n\n\n-----Examples-----\nInput\n4 3\n2 1\n1 3\n4 3\n\nOutput\n1\n\nInput\n5 5\n2 1\n1 3\n2 3\n2 5\n4 3\n\nOutput\n0\n\nInput\n6 5\n1 2\n2 3\n4 5\n4 6\n5 6\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first sample the following road orientation is allowed: $1 \\rightarrow 2$, $1 \\rightarrow 3$, $3 \\rightarrow 4$.\n\nThe second sample: $1 \\rightarrow 2$, $3 \\rightarrow 1$, $2 \\rightarrow 3$, $2 \\rightarrow 5$, $3 \\rightarrow 4$.\n\nThe third sample: $1 \\rightarrow 2$, $2 \\rightarrow 3$, $4 \\rightarrow 5$, $5 \\rightarrow 6$, $6 \\rightarrow 4$.",
    "public_tests": {
      "input": [
        "4 3\n2 1\n1 3\n4 3\n",
        "5 5\n2 1\n1 3\n2 3\n2 5\n4 3\n",
        "6 5\n1 2\n2 3\n4 5\n4 6\n5 6\n"
      ],
      "output": [
        "1\n",
        "0\n",
        "1\n"
      ]
    },
    "private_tests": {
      "input": [
        "4 3\n2 1\n1 3\n4 3\n",
        "5 5\n2 1\n1 3\n2 3\n2 5\n4 3\n",
        "6 5\n1 2\n2 3\n4 5\n4 6\n5 6\n",
        "4 4\n1 2\n2 3\n3 4\n4 1\n",
        "10 45\n3 5\n2 3\n4 8\n2 5\n6 8\n5 7\n2 1\n3 7\n5 10\n6 1\n9 4\n3 6\n9 10\n6 7\n1 7\n7 9\n6 9\n9 3\n4 2\n2 6\n5 6\n5 8\n3 4\n10 8\n7 8\n4 6\n9 1\n5 9\n7 4\n1 10\n9 2\n2 8\n6 10\n9 8\n1 5\n7 2\n10 3\n3 8\n4 10\n4 1\n10 7\n1 3\n1 8\n10 2\n4 5\n",
        "20 20\n16 3\n15 14\n6 14\n13 19\n7 13\n3 13\n3 2\n17 11\n14 20\n19 10\n4 13\n3 8\n18 4\n12 7\n6 3\n11 13\n17 19\n5 14\n9 2\n11 1\n",
        "2 1\n1 2\n",
        "5 5\n1 2\n2 3\n3 4\n4 5\n5 2\n"
      ],
      "output": [
        "1\n",
        "0\n",
        "1\n",
        "0\n",
        "0\n",
        "0\n",
        "1\n",
        "0\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 2038,
    "description": "You are given a permutation $p$ of integers from $1$ to $n$, where $n$ is an even number. \n\nYour goal is to sort the permutation. To do so, you can perform zero or more operations of the following type:   take two indices $i$ and $j$ such that $2 \\cdot |i - j| \\geq n$ and swap $p_i$ and $p_j$. \n\nThere is no need to minimize the number of operations, however you should use no more than $5 \\cdot n$ operations. One can show that it is always possible to do that.\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\leq n \\leq 3 \\cdot 10^5$, $n$ is even)\u00a0\u2014 the length of the permutation. \n\nThe second line contains $n$ distinct integers $p_1, p_2, \\ldots, p_n$ ($1 \\le p_i \\le n$)\u00a0\u2014 the given permutation.\n\n\n-----Output-----\n\nOn the first line print $m$ ($0 \\le m \\le 5 \\cdot n$)\u00a0\u2014 the number of swaps to perform.\n\nEach of the following $m$ lines should contain integers $a_i, b_i$ ($1 \\le a_i, b_i \\le n$, $|a_i - b_i| \\ge \\frac{n}{2}$)\u00a0\u2014 the indices that should be swapped in the corresponding swap.\n\nNote that there is no need to minimize the number of operations. We can show that an answer always exists.\n\n\n-----Examples-----\nInput\n2\n2 1\n\nOutput\n1\n1 2\nInput\n4\n3 4 1 2\n\nOutput\n4\n1 4\n1 4\n1 3\n2 4\n\nInput\n6\n2 5 3 1 4 6\n\nOutput\n3\n1 5\n2 5\n1 4\n\n\n\n-----Note-----\n\nIn the first example, when one swap elements on positions $1$ and $2$, the array becomes sorted.\n\nIn the second example, pay attention that there is no need to minimize number of swaps.\n\nIn the third example, after swapping elements on positions $1$ and $5$ the array becomes: $[4, 5, 3, 1, 2, 6]$. After swapping elements on positions $2$ and $5$ the array becomes $[4, 2, 3, 1, 5, 6]$ and finally after swapping elements on positions $1$ and $4$ the array becomes sorted: $[1, 2, 3, 4, 5, 6]$.",
    "public_tests": {
      "input": [
        "2\n2 1\n",
        "4\n3 4 1 2\n",
        "6\n2 5 3 1 4 6\n"
      ],
      "output": [
        "1\n1 2",
        "4\n1 4\n1 4\n1 3\n2 4",
        "3\n1 5\n2 5\n1 4"
      ]
    },
    "private_tests": {
      "input": [
        "2\n2 1\n",
        "4\n3 4 1 2\n",
        "6\n2 5 3 1 4 6\n",
        "10\n7 2 9 6 5 8 1 3 10 4\n",
        "2\n1 2\n",
        "10\n6 1 2 9 3 5 4 10 7 8\n",
        "10\n10 9 8 7 6 5 4 3 2 1\n",
        "50\n50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1\n"
      ],
      "output": [
        "1\n1 2",
        "2\n1 3\n2 4",
        "9\n1 4\n2 6\n4 1\n1 6\n4 1\n2 6\n4 1\n5 1\n4 1",
        "12\n1 7\n3 8\n4 10\n6 1\n10 1\n6 1\n8 1\n10 1\n8 1\n9 1\n10 1\n9 1",
        "0",
        "25\n1 10\n2 10\n1 10\n2 10\n3 10\n2 10\n3 10\n5 10\n3 10\n4 10\n7 1\n1 10\n7 1\n4 10\n5 10\n6 1\n1 10\n6 1\n5 10\n7 1\n9 1\n7 1\n8 1\n10 1\n8 1",
        "13\n1 10\n2 9\n3 8\n4 10\n7 1\n1 10\n7 1\n4 10\n5 10\n6 1\n1 10\n6 1\n5 10",
        "73\n1 50\n2 49\n3 48\n4 47\n5 46\n6 45\n7 44\n8 43\n9 42\n10 41\n11 40\n12 39\n13 38\n14 50\n37 1\n1 50\n37 1\n14 50\n15 50\n36 1\n1 50\n36 1\n15 50\n16 50\n35 1\n1 50\n35 1\n16 50\n17 50\n34 1\n1 50\n34 1\n17 50\n18 50\n33 1\n1 50\n33 1\n18 50\n19 50\n32 1\n1 50\n32 1\n19 50\n20 50\n31 1\n1 50\n31 1\n20 50\n21 50\n30 1\n1 50\n30 1\n21 50\n22 50\n29 1\n1 50\n29 1\n22 50\n23 50\n28 1\n1 50\n28 1\n23 50\n24 50\n27 1\n1 50\n27 1\n24 50\n25 50\n26 1\n1 50\n26 1\n25 50"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 2846,
    "description": "In research, it is tough to determine how good of a researcher you are. One way that people determine how good you are is by looking at your $H$-Index.\n\nEach paper has a certain number of citations. Your $H$-Index is the largest number $H$ such that you have $H$ papers with at least $H$ citations. Given the number of citations on each paper you have written, what is your $H$-Index?\n\n-----Input-----\nThe first line of input contains a single integer $n$\u00a0($1 \\leq n \\leq 100000$), which is the number of papers you have written.\n\nThe next $n$ lines describe the papers. Each of these lines contains a single integer $c$\u00a0($0 \\leq c \\leq 1000000000$), which is the number of citations that this paper has.\n\n-----Output-----\nDisplay your $H$-Index.\n\n-----Examples-----\nSample Input 1:\n5\n7\n1\n2\n1\n5\nSample Output 1:\n2\n\nSample Input 2:\n5\n7\n1\n3\n1\n5\nSample Output 2:\n3",
    "public_tests": {
      "input": [
        "5\n7\n1\n2\n1\n5\n",
        "5\n7\n1\n3\n1\n5\n"
      ],
      "output": [
        "2\n",
        "3\n"
      ]
    },
    "private_tests": {
      "input": [
        "5\n7\n1\n2\n1\n5\n",
        "5\n7\n1\n3\n1\n5\n",
        "3\n4\n2\n3\n"
      ],
      "output": [
        "2\n",
        "3\n",
        "2\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1704,
    "description": "Denis, after buying flowers and sweets (you will learn about this story in the next task), went to a date with Nastya to ask her to become a couple. Now, they are sitting in the cafe and finally... Denis asks her to be together, but ... Nastya doesn't give any answer. \n\nThe poor boy was very upset because of that. He was so sad that he punched some kind of scoreboard with numbers. The numbers are displayed in the same way as on an electronic clock: each digit position consists of $7$ segments, which can be turned on or off to display different numbers. The picture shows how all $10$ decimal digits are displayed: \n\n [Image] \n\nAfter the punch, some segments stopped working, that is, some segments might stop glowing if they glowed earlier. But Denis remembered how many sticks were glowing and how many are glowing now. Denis broke exactly $k$ segments and he knows which sticks are working now. Denis came up with the question: what is the maximum possible number that can appear on the board if you turn on exactly $k$ sticks (which are off now)? \n\nIt is allowed that the number includes leading zeros.\n\n\n-----Input-----\n\nThe first line contains integer $n$ $(1 \\leq n \\leq 2000)$ \u00a0\u2014 the number of digits on scoreboard and $k$ $(0 \\leq k \\leq 2000)$ \u00a0\u2014 the number of segments that stopped working.\n\nThe next $n$ lines contain one binary string of length $7$, the $i$-th of which encodes the $i$-th digit of the scoreboard.\n\nEach digit on the scoreboard consists of $7$ segments. We number them, as in the picture below, and let the $i$-th place of the binary string be $0$ if the $i$-th stick is not glowing and $1$ if it is glowing. Then a binary string of length $7$ will specify which segments are glowing now.\n\n [Image] \n\nThus, the sequences \"1110111\", \"0010010\", \"1011101\", \"1011011\", \"0111010\", \"1101011\", \"1101111\", \"1010010\", \"1111111\", \"1111011\" encode in sequence all digits from $0$ to $9$ inclusive.\n\n\n-----Output-----\n\nOutput a single number consisting of $n$ digits \u00a0\u2014 the maximum number that can be obtained if you turn on exactly $k$ sticks or $-1$, if it is impossible to turn on exactly $k$ sticks so that a correct number appears on the scoreboard digits.\n\n\n-----Examples-----\nInput\n1 7\n0000000\n\nOutput\n8\nInput\n2 5\n0010010\n0010010\n\nOutput\n97\nInput\n3 5\n0100001\n1001001\n1010011\n\nOutput\n-1\n\n\n-----Note-----\n\nIn the first test, we are obliged to include all $7$ sticks and get one $8$ digit on the scoreboard.\n\nIn the second test, we have sticks turned on so that units are formed. For $5$ of additionally included sticks, you can get the numbers $07$, $18$, $34$, $43$, $70$, $79$, $81$ and $97$, of which we choose the maximum \u00a0\u2014 $97$.\n\nIn the third test, it is impossible to turn on exactly $5$ sticks so that a sequence of numbers appears on the scoreboard.",
    "public_tests": {
      "input": [
        "1 7\n0000000\n",
        "2 5\n0010010\n0010010\n",
        "3 5\n0100001\n1001001\n1010011\n"
      ],
      "output": [
        "8",
        "97",
        "-1"
      ]
    },
    "private_tests": {
      "input": [
        "1 7\n0000000\n",
        "2 5\n0010010\n0010010\n",
        "3 5\n0100001\n1001001\n1010011\n",
        "10 0\n0111010\n1101111\n1111011\n0111010\n1101011\n1101011\n1110111\n1010010\n1111111\n0010010\n",
        "10 10\n0101111\n0000000\n1111011\n1011011\n1011011\n1111011\n0010010\n1010010\n1101111\n0000000\n",
        "10 10\n1100011\n1010011\n0000111\n1110110\n0101011\n0111111\n1001111\n1000000\n1111011\n0111000\n",
        "10 10\n1101001\n0110000\n0111010\n0010000\n1010000\n0111000\n1011011\n1010010\n1101011\n1111110\n",
        "10 6\n1101011\n1101111\n1010000\n1110111\n1101110\n1100111\n1110011\n1011101\n0111010\n1010010\n",
        "10 10\n0000000\n0100000\n0000000\n0010000\n0000000\n0000001\n0000000\n0001000\n0000001\n0101000\n",
        "10 10\n1110111\n0111111\n1111111\n1111111\n0111111\n1111111\n0111111\n1111110\n1111111\n1111111\n",
        "1 1\n1010010\n",
        "1 2\n0010010\n",
        "3 8\n0111010\n1011011\n1011101\n"
      ],
      "output": [
        "8",
        "97",
        "-1",
        "4694550781",
        "8993391761",
        "-1",
        "9941743758",
        "9870669247",
        "-1",
        "-1",
        "-1",
        "4",
        "-1"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 60,
    "description": "A new airplane SuperPuperJet has an infinite number of rows, numbered with positive integers starting with 1 from cockpit to tail. There are six seats in each row, denoted with letters from 'a' to 'f'. Seats 'a', 'b' and 'c' are located to the left of an aisle (if one looks in the direction of the cockpit), while seats 'd', 'e' and 'f' are located to the right. Seats 'a' and 'f' are located near the windows, while seats 'c' and 'd' are located near the aisle.  [Image] \n\n\u00a0\n\nIt's lunch time and two flight attendants have just started to serve food. They move from the first rows to the tail, always maintaining a distance of two rows from each other because of the food trolley. Thus, at the beginning the first attendant serves row 1 while the second attendant serves row 3. When both rows are done they move one row forward: the first attendant serves row 2 while the second attendant serves row 4. Then they move three rows forward and the first attendant serves row 5 while the second attendant serves row 7. Then they move one row forward again and so on.\n\nFlight attendants work with the same speed: it takes exactly 1 second to serve one passenger and 1 second to move one row forward. Each attendant first serves the passengers on the seats to the right of the aisle and then serves passengers on the seats to the left of the aisle (if one looks in the direction of the cockpit). Moreover, they always serve passengers in order from the window to the aisle. Thus, the first passenger to receive food in each row is located in seat 'f', and the last one\u00a0\u2014 in seat 'c'. Assume that all seats are occupied.\n\nVasya has seat s in row n and wants to know how many seconds will pass before he gets his lunch.\n\n\n-----Input-----\n\nThe only line of input contains a description of Vasya's seat in the format ns, where n (1 \u2264 n \u2264 10^18) is the index of the row and s is the seat in this row, denoted as letter from 'a' to 'f'. The index of the row and the seat are not separated by a space.\n\n\n-----Output-----\n\nPrint one integer\u00a0\u2014 the number of seconds Vasya has to wait until he gets his lunch.\n\n\n-----Examples-----\nInput\n1f\n\nOutput\n1\n\nInput\n2d\n\nOutput\n10\n\nInput\n4a\n\nOutput\n11\n\nInput\n5e\n\nOutput\n18\n\n\n\n-----Note-----\n\nIn the first sample, the first flight attendant serves Vasya first, so Vasya gets his lunch after 1 second.\n\nIn the second sample, the flight attendants will spend 6 seconds to serve everyone in the rows 1 and 3, then they will move one row forward in 1 second. As they first serve seats located to the right of the aisle in order from window to aisle, Vasya has to wait 3 more seconds. The total is 6 + 1 + 3 = 10.",
    "public_tests": {
      "input": [
        "1f\n",
        "2d\n",
        "4a\n",
        "5e\n"
      ],
      "output": [
        "1\n",
        "10\n",
        "11\n",
        "18\n"
      ]
    },
    "private_tests": {
      "input": [
        "1f\n",
        "2d\n",
        "4a\n",
        "5e\n",
        "2c\n",
        "1b\n",
        "1000000000000000000d\n",
        "999999999999999997a\n",
        "1c\n",
        "1d\n",
        "1e\n",
        "1a\n",
        "2a\n",
        "2b\n",
        "2e\n",
        "2f\n",
        "3a\n",
        "3b\n",
        "3c\n",
        "3d\n",
        "3e\n",
        "3f\n",
        "4b\n",
        "4c\n",
        "4d\n",
        "4e\n",
        "4f\n",
        "999999997a\n",
        "999999997b\n",
        "999999997c\n",
        "999999997d\n",
        "999999997e\n",
        "999999997f\n",
        "999999998a\n",
        "999999998b\n",
        "999999998c\n",
        "999999998d\n",
        "999999998e\n",
        "999999998f\n",
        "999999999a\n",
        "999999999b\n",
        "999999999c\n",
        "999999999d\n",
        "999999999e\n",
        "999999999f\n",
        "1000000000a\n",
        "1000000000b\n",
        "1000000000c\n",
        "1000000000d\n",
        "1000000000e\n",
        "1000000000f\n",
        "100000b\n",
        "100000f\n",
        "100001d\n",
        "100001e\n",
        "100001f\n",
        "100002a\n",
        "100002b\n",
        "100002d\n",
        "1231273a\n",
        "82784f\n",
        "88312c\n",
        "891237e\n",
        "999999999999999997b\n",
        "999999999999999997c\n",
        "999999999999999997d\n",
        "999999999999999997e\n",
        "999999999999999997f\n",
        "999999999999999998a\n",
        "999999999999999998b\n",
        "999999999999999998c\n",
        "999999999999999998d\n",
        "999999999999999998e\n",
        "999999999999999998f\n",
        "999999999999999999a\n",
        "999999999999999999b\n",
        "999999999999999999c\n",
        "999999999999999999d\n",
        "1000000000000000000a\n",
        "1000000000000000000e\n",
        "1000000000000000000f\n",
        "1000000000000000000c\n",
        "97a\n",
        "6f\n",
        "7f\n",
        "7e\n",
        "999999999999999992c\n",
        "7a\n",
        "8f\n",
        "999999999999999992a\n",
        "999999999999999992b\n",
        "999999999999999992c\n",
        "999999999999999992d\n",
        "999999999999999992e\n",
        "999999999999999992f\n",
        "999999999999999993a\n",
        "999999999999999993b\n",
        "999999999999999993c\n",
        "999999999999999993d\n",
        "999999999999999993e\n",
        "999999999999999993f\n",
        "999999999999999994a\n",
        "999999999999999994b\n",
        "999999999999999994c\n",
        "999999999999999994d\n",
        "999999999999999994e\n",
        "999999999999999994f\n",
        "999999999999999995a\n",
        "999999999999999995b\n",
        "999999999999999995c\n",
        "999999999999999995d\n",
        "999999999999999995e\n",
        "999999999999999995f\n",
        "10a\n",
        "11f\n",
        "681572647b\n",
        "23f\n",
        "123a\n",
        "999999888888777777a\n"
      ],
      "output": [
        "1\n",
        "10\n",
        "11\n",
        "18\n",
        "13\n",
        "5\n",
        "3999999999999999994\n",
        "3999999999999999988\n",
        "6\n",
        "3\n",
        "2\n",
        "4\n",
        "11\n",
        "12\n",
        "9\n",
        "8\n",
        "4\n",
        "5\n",
        "6\n",
        "3\n",
        "2\n",
        "1\n",
        "12\n",
        "13\n",
        "10\n",
        "9\n",
        "8\n",
        "3999999988\n",
        "3999999989\n",
        "3999999990\n",
        "3999999987\n",
        "3999999986\n",
        "3999999985\n",
        "3999999995\n",
        "3999999996\n",
        "3999999997\n",
        "3999999994\n",
        "3999999993\n",
        "3999999992\n",
        "3999999988\n",
        "3999999989\n",
        "3999999990\n",
        "3999999987\n",
        "3999999986\n",
        "3999999985\n",
        "3999999995\n",
        "3999999996\n",
        "3999999997\n",
        "3999999994\n",
        "3999999993\n",
        "3999999992\n",
        "399996\n",
        "399992\n",
        "400003\n",
        "400002\n",
        "400001\n",
        "400011\n",
        "400012\n",
        "400010\n",
        "4925092\n",
        "331128\n",
        "353245\n",
        "3564946\n",
        "3999999999999999989\n",
        "3999999999999999990\n",
        "3999999999999999987\n",
        "3999999999999999986\n",
        "3999999999999999985\n",
        "3999999999999999995\n",
        "3999999999999999996\n",
        "3999999999999999997\n",
        "3999999999999999994\n",
        "3999999999999999993\n",
        "3999999999999999992\n",
        "3999999999999999988\n",
        "3999999999999999989\n",
        "3999999999999999990\n",
        "3999999999999999987\n",
        "3999999999999999995\n",
        "3999999999999999993\n",
        "3999999999999999992\n",
        "3999999999999999997\n",
        "388\n",
        "24\n",
        "17\n",
        "18\n",
        "3999999999999999965\n",
        "20\n",
        "24\n",
        "3999999999999999963\n",
        "3999999999999999964\n",
        "3999999999999999965\n",
        "3999999999999999962\n",
        "3999999999999999961\n",
        "3999999999999999960\n",
        "3999999999999999972\n",
        "3999999999999999973\n",
        "3999999999999999974\n",
        "3999999999999999971\n",
        "3999999999999999970\n",
        "3999999999999999969\n",
        "3999999999999999979\n",
        "3999999999999999980\n",
        "3999999999999999981\n",
        "3999999999999999978\n",
        "3999999999999999977\n",
        "3999999999999999976\n",
        "3999999999999999972\n",
        "3999999999999999973\n",
        "3999999999999999974\n",
        "3999999999999999971\n",
        "3999999999999999970\n",
        "3999999999999999969\n",
        "43\n",
        "33\n",
        "2726290581\n",
        "81\n",
        "484\n",
        "3999999555555111108\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 2404,
    "description": "There was once young lass called Mary,  \n\nWhose jokes were occasionally scary.  \n\nOn this April's Fool  \n\nFixed limerick rules  \n\nAllowed her to trip the unwary.\n\n\n\nCan she fill all the lines\n\nTo work at all times?\n\nOn juggling the words\n\nRight around two-thirds\n\nShe nearly ran out of rhymes.\n\n\n\n\n-----Input-----\n\nThe input contains a single integer $a$ ($4 \\le a \\le 998$). Not every integer in the range is a valid input for the problem; you are guaranteed that the input will be a valid integer.\n\n\n-----Output-----\n\nOutput a single number.\n\n\n-----Examples-----\nInput\n35\n\nOutput\n57\n\nInput\n57\n\nOutput\n319\n\nInput\n391\n\nOutput\n1723",
    "public_tests": {
      "input": [
        "35\n",
        "57\n",
        "391\n"
      ],
      "output": [
        "57",
        "319",
        "1723"
      ]
    },
    "private_tests": {
      "input": [
        "35\n",
        "57\n",
        "391\n"
      ],
      "output": [
        "",
        "",
        ""
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1142,
    "description": "Recently you've discovered a new shooter. They say it has realistic game mechanics.\n\nYour character has a gun with magazine size equal to $k$ and should exterminate $n$ waves of monsters. The $i$-th wave consists of $a_i$ monsters and happens from the $l_i$-th moment of time up to the $r_i$-th moments of time. All $a_i$ monsters spawn at moment $l_i$ and you have to exterminate all of them before the moment $r_i$ ends (you can kill monsters right at moment $r_i$). For every two consecutive waves, the second wave starts not earlier than the first wave ends (though the second wave can start at the same moment when the first wave ends) \u2014 formally, the condition $r_i \\le l_{i + 1}$ holds. Take a look at the notes for the examples to understand the process better.\n\nYou are confident in yours and your character's skills so you can assume that aiming and shooting are instant and you need exactly one bullet to kill one monster. But reloading takes exactly $1$ unit of time.\n\nOne of the realistic mechanics is a mechanic of reloading: when you reload you throw away the old magazine with all remaining bullets in it. That's why constant reloads may cost you excessive amounts of spent bullets.\n\nYou've taken a liking to this mechanic so now you are wondering: what is the minimum possible number of bullets you need to spend (both used and thrown) to exterminate all waves.\n\nNote that you don't throw the remaining bullets away after eradicating all monsters, and you start with a full magazine.\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($1 \\le n \\le 2000$; $1 \\le k \\le 10^9$)\u00a0\u2014 the number of waves and magazine size.\n\nThe next $n$ lines contain descriptions of waves. The $i$-th line contains three integers $l_i$, $r_i$ and $a_i$ ($1 \\le l_i \\le r_i \\le 10^9$; $1 \\le a_i \\le 10^9$)\u00a0\u2014 the period of time when the $i$-th wave happens and the number of monsters in it.\n\nIt's guaranteed that waves don't overlap (but may touch) and are given in the order they occur, i. e. $r_i \\le l_{i + 1}$.\n\n\n-----Output-----\n\nIf there is no way to clear all waves, print $-1$. Otherwise, print the minimum possible number of bullets you need to spend (both used and thrown) to clear all waves.\n\n\n-----Examples-----\nInput\n2 3\n2 3 6\n3 4 3\n\nOutput\n9\n\nInput\n2 5\n3 7 11\n10 12 15\n\nOutput\n30\n\nInput\n5 42\n42 42 42\n42 43 42\n43 44 42\n44 45 42\n45 45 1\n\nOutput\n-1\n\nInput\n1 10\n100 111 1\n\nOutput\n1\n\n\n\n-----Note-----\n\nIn the first example:   At the moment $2$, the first wave occurs and $6$ monsters spawn. You kill $3$ monsters and start reloading.  At the moment $3$, the second wave occurs and $3$ more monsters spawn. You kill remaining $3$ monsters from the first wave and start reloading.  At the moment $4$, you kill remaining $3$ monsters from the second wave.  In total, you'll spend $9$ bullets.\n\nIn the second example:   At moment $3$, the first wave occurs and $11$ monsters spawn. You kill $5$ monsters and start reloading.  At moment $4$, you kill $5$ more monsters and start reloading.  At moment $5$, you kill the last monster and start reloading throwing away old magazine with $4$ bullets.  At moment $10$, the second wave occurs and $15$ monsters spawn. You kill $5$ monsters and start reloading.  At moment $11$, you kill $5$ more monsters and start reloading.  At moment $12$, you kill last $5$ monsters.  In total, you'll spend $30$ bullets.",
    "public_tests": {
      "input": [
        "2 3\n2 3 6\n3 4 3\n",
        "2 5\n3 7 11\n10 12 15\n",
        "5 42\n42 42 42\n42 43 42\n43 44 42\n44 45 42\n45 45 1\n",
        "1 10\n100 111 1\n"
      ],
      "output": [
        "9\n",
        "30\n",
        "-1\n",
        "1\n"
      ]
    },
    "private_tests": {
      "input": [
        "2 3\n2 3 6\n3 4 3\n",
        "2 5\n3 7 11\n10 12 15\n",
        "5 42\n42 42 42\n42 43 42\n43 44 42\n44 45 42\n45 45 1\n",
        "1 10\n100 111 1\n",
        "1 1000000000\n1 1 1000000000\n",
        "10 89\n1 2 82\n2 2 31\n3 4 63\n6 7 18\n9 9 44\n10 11 95\n13 13 52\n13 15 39\n15 16 70\n17 18 54\n",
        "10 85\n3 5 57\n6 8 86\n9 10 46\n11 11 19\n11 12 37\n12 12 62\n14 14 60\n15 15 78\n16 16 69\n19 20 50\n",
        "10 79\n2 2 70\n2 10 35\n10 10 76\n11 11 66\n12 12 75\n12 14 88\n15 16 76\n17 18 97\n19 20 105\n20 20 46\n",
        "10 76\n1 2 82\n4 6 43\n9 10 13\n12 12 8\n14 15 16\n15 15 9\n16 16 92\n16 18 77\n18 19 95\n20 20 81\n",
        "10 80\n3 3 103\n5 5 47\n7 9 42\n9 10 55\n10 11 8\n11 13 81\n14 15 100\n16 17 3\n17 18 27\n20 20 77\n",
        "10 94\n1 2 11\n2 4 101\n5 5 17\n5 7 10\n8 9 47\n10 13 2\n13 14 10\n14 14 30\n15 16 17\n16 16 73\n",
        "10 60\n1 2 24\n3 4 50\n4 7 105\n9 9 57\n9 11 93\n11 12 75\n13 14 85\n14 15 2\n16 16 53\n17 19 61\n",
        "10 75\n1 2 44\n2 3 105\n4 5 30\n6 6 104\n8 10 26\n11 14 101\n14 16 93\n17 17 20\n18 20 43\n20 20 57\n",
        "10 89\n2 3 57\n3 6 62\n8 9 13\n9 11 105\n12 12 77\n13 15 22\n15 16 50\n16 17 60\n19 19 34\n20 20 45\n",
        "4 8\n1 1 7\n4 6 16\n6 7 14\n9 10 7\n",
        "4 6\n1 3 10\n4 6 20\n6 8 13\n8 9 2\n",
        "4 7\n2 3 12\n4 4 19\n5 9 17\n9 10 12\n",
        "4 9\n1 2 14\n3 5 11\n8 8 5\n10 10 2\n",
        "4 7\n1 2 16\n5 7 10\n7 8 8\n9 10 16\n",
        "4 8\n4 6 19\n7 7 6\n7 8 12\n9 9 11\n",
        "4 10\n1 3 1\n3 3 10\n5 6 15\n7 8 1\n",
        "4 6\n1 4 3\n4 4 9\n6 6 15\n7 9 15\n",
        "4 7\n2 4 9\n7 8 13\n8 8 7\n9 9 5\n"
      ],
      "output": [
        "9\n",
        "30\n",
        "-1\n",
        "1\n",
        "1000000000\n",
        "571\n",
        "629\n",
        "862\n",
        "-1\n",
        "-1\n",
        "355\n",
        "654\n",
        "-1\n",
        "579\n",
        "45\n",
        "-1\n",
        "-1\n",
        "34\n",
        "-1\n",
        "-1\n",
        "36\n",
        "-1\n",
        "-1\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 590,
    "description": "Ivan has an array consisting of n elements. Each of the elements is an integer from 1 to n.\n\nRecently Ivan learned about permutations and their lexicographical order. Now he wants to change (replace) minimum number of elements in his array in such a way that his array becomes a permutation (i.e. each of the integers from 1 to n was encountered in his array exactly once). If there are multiple ways to do it he wants to find the lexicographically minimal permutation among them.\n\nThus minimizing the number of changes has the first priority, lexicographical minimizing has the second priority.\n\nIn order to determine which of the two permutations is lexicographically smaller, we compare their first elements. If they are equal \u2014 compare the second, and so on. If we have two permutations x and y, then x is lexicographically smaller if x_{i} < y_{i}, where i is the first index in which the permutations x and y differ.\n\nDetermine the array Ivan will obtain after performing all the changes.\n\n\n-----Input-----\n\nThe first line contains an single integer n (2 \u2264 n \u2264 200 000) \u2014 the number of elements in Ivan's array.\n\nThe second line contains a sequence of integers a_1, a_2, ..., a_{n} (1 \u2264 a_{i} \u2264 n) \u2014 the description of Ivan's array.\n\n\n-----Output-----\n\nIn the first line print q \u2014 the minimum number of elements that need to be changed in Ivan's array in order to make his array a permutation. In the second line, print the lexicographically minimal permutation which can be obtained from array with q changes.\n\n\n-----Examples-----\nInput\n4\n3 2 2 3\n\nOutput\n2\n1 2 4 3 \n\nInput\n6\n4 5 6 3 2 1\n\nOutput\n0\n4 5 6 3 2 1 \n\nInput\n10\n6 8 4 6 7 1 6 3 4 5\n\nOutput\n3\n2 8 4 6 7 1 9 3 10 5 \n\n\n\n-----Note-----\n\nIn the first example Ivan needs to replace number three in position 1 with number one, and number two in position 3 with number four. Then he will get a permutation [1, 2, 4, 3] with only two changed numbers \u2014 this permutation is lexicographically minimal among all suitable. \n\nIn the second example Ivan does not need to change anything because his array already is a permutation.",
    "public_tests": {
      "input": [
        "4\n3 2 2 3\n",
        "6\n4 5 6 3 2 1\n",
        "10\n6 8 4 6 7 1 6 3 4 5\n"
      ],
      "output": [
        "2\n1 2 4 3 \n",
        "0\n4 5 6 3 2 1 \n",
        "3\n2 8 4 6 7 1 9 3 10 5 \n"
      ]
    },
    "private_tests": {
      "input": [
        "4\n3 2 2 3\n",
        "6\n4 5 6 3 2 1\n",
        "10\n6 8 4 6 7 1 6 3 4 5\n",
        "6\n5 5 5 6 4 6\n",
        "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "50\n1 1 2 1 1 1 1 1 1 1 1 1 2 1 2 1 1 2 1 1 1 1 1 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n",
        "50\n2 4 1 2 3 7 2 2 1 1 3 4 2 12 4 3 2 1 2 5 1 3 3 7 9 6 10 5 7 1 4 3 6 2 3 12 1 3 2 6 2 2 2 4 1 6 1 3 7 13\n",
        "50\n11 3 15 13 1 10 27 4 18 20 6 1 5 8 9 19 6 13 5 19 5 3 1 8 2 3 3 6 4 19 11 6 3 1 3 1 8 14 2 2 8 13 12 1 15 2 1 2 1 1\n",
        "50\n9 10 1 6 7 3 25 4 11 15 3 6 25 1 6 17 1 25 16 2 10 22 17 11 1 14 4 6 9 18 12 9 10 1 10 13 8 13 24 28 12 14 1 2 1 4 20 9 7 4\n",
        "10\n8 1 2 1 8 8 1 5 1 2\n",
        "3\n2 1 2\n",
        "50\n25 48 15 25 49 39 34 15 9 3 12 11 11 3 30 7 6 47 36 1 39 27 17 1 31 39 3 42 19 20 26 41 10 15 29 44 26 32 37 39 43 38 42 6 37 36 50 47 43 21\n",
        "50\n50 46 38 41 49 23 16 17 48 32 31 49 40 21 41 31 47 17 15 50 38 20 37 47 24 47 15 46 24 18 41 40 45 25 31 45 14 30 17 16 16 44 44 46 45 5 41 16 24 34\n",
        "50\n26 46 50 31 47 40 25 47 41 47 31 30 50 40 46 44 26 48 37 19 28 19 50 22 42 38 47 22 44 44 35 30 50 45 49 34 19 37 36 32 50 29 50 42 34 49 40 50 8 50\n",
        "20\n15 18 20 6 19 13 20 17 20 16 19 17 17 19 16 12 14 19 20 20\n",
        "50\n48 37 47 50 46 43 42 46 36 40 45 41 40 50 35 49 37 42 44 45 49 44 31 47 45 49 48 41 45 45 48 20 34 43 43 41 47 50 41 48 38 48 43 48 46 48 32 37 47 45\n",
        "26\n26 26 23 25 22 26 26 24 26 26 25 18 25 22 24 24 24 24 24 26 26 25 24 26 26 23\n",
        "50\n50 50 50 49 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 49 50 49 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 49\n",
        "50\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50\n",
        "50\n4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4\n",
        "50\n32 4 32 4 42 32 32 42 4 4 32 4 42 4 32 42 4 42 32 42 32 32 32 42 4 4 32 4 32 4 32 4 42 32 4 42 32 42 32 32 4 42 42 42 42 42 42 32 32 4\n",
        "50\n18 42 38 38 38 50 50 38 49 49 38 38 42 18 49 49 49 49 18 50 18 38 38 49 49 50 49 42 38 49 42 38 38 49 38 49 50 49 49 49 18 49 18 38 42 50 42 49 18 49\n",
        "50\n17 31 7 41 30 38 38 5 38 39 5 1 41 17 5 15 7 15 15 7 39 17 38 7 39 41 5 7 38 1 39 31 41 7 5 38 17 15 39 30 39 38 7 15 30 17 7 5 41 31\n",
        "50\n23 14 39 19 31 39 18 18 31 14 45 7 42 25 20 25 14 19 29 45 33 7 8 32 29 24 26 13 25 24 25 13 4 23 39 45 25 21 38 45 20 45 18 7 27 23 29 15 31 39\n",
        "50\n4 50 27 48 32 32 37 33 18 24 38 6 32 17 1 46 36 16 10 9 9 25 26 40 28 2 1 5 15 50 2 4 18 39 42 46 25 3 10 42 37 23 28 41 33 45 25 11 13 18\n",
        "50\n39 49 43 21 22 27 28 41 35 6 31 9 4 39 27 27 7 41 9 28 43 37 20 47 28 37 8 46 23 14 50 48 21 47 9 31 9 37 34 17 15 17 18 16 29 6 43 33 16 17\n",
        "2\n1 2\n",
        "2\n2 1\n",
        "2\n1 1\n",
        "2\n2 2\n",
        "3\n1 1 1\n",
        "3\n2 2 2\n",
        "3\n3 3 3\n",
        "3\n1 2 2\n",
        "3\n2 1 3\n",
        "3\n3 2 1\n",
        "3\n2 2 3\n",
        "3\n3 1 3\n",
        "3\n2 2 1\n",
        "3\n3 1 2\n"
      ],
      "output": [
        "2\n1 2 4 3 \n",
        "0\n4 5 6 3 2 1 \n",
        "3\n2 8 4 6 7 1 9 3 10 5 \n",
        "3\n1 2 5 3 4 6 \n",
        "49\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \n",
        "48\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \n",
        "39\n2 4 1 8 3 7 11 14 15 16 17 18 19 12 20 21 22 23 24 5 25 26 27 28 9 6 10 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 13 \n",
        "32\n7 3 15 13 1 10 27 4 18 20 6 16 5 8 9 17 21 22 23 19 24 25 26 28 2 29 30 31 32 33 11 34 35 36 37 38 39 14 40 41 42 43 12 44 45 46 47 48 49 50 \n",
        "28\n5 10 1 6 7 3 19 4 11 15 21 23 25 26 27 17 29 30 16 2 31 22 32 33 34 14 35 36 9 18 12 37 38 39 40 13 8 41 24 28 42 43 44 45 46 47 20 48 49 50 \n",
        "6\n3 1 2 4 6 8 7 5 9 10 \n",
        "1\n2 1 3 \n",
        "17\n2 48 4 25 49 5 34 8 9 3 12 11 13 14 30 7 6 16 18 1 22 27 17 23 31 24 28 33 19 20 26 41 10 15 29 44 35 32 37 39 40 38 42 45 46 36 50 47 43 21 \n",
        "24\n1 2 3 4 6 23 7 8 48 32 9 49 10 21 11 12 13 17 15 50 38 20 37 19 22 47 26 27 24 18 28 40 29 25 31 33 14 30 35 16 36 39 44 46 45 5 41 42 43 34 \n",
        "25\n1 2 3 4 5 6 25 7 41 9 31 10 11 12 46 13 26 48 14 15 28 16 17 18 20 38 47 22 21 44 35 30 23 45 24 27 19 37 36 32 33 29 39 42 34 49 40 43 8 50 \n",
        "10\n15 18 1 6 2 13 3 4 5 7 8 9 17 10 16 12 14 19 11 20 \n",
        "31\n1 2 3 4 5 6 7 8 36 9 10 11 40 12 35 13 14 42 15 16 17 44 31 18 19 49 21 22 23 24 25 20 34 26 27 28 29 50 41 30 38 33 43 39 46 48 32 37 47 45 \n",
        "20\n1 2 3 4 5 6 7 8 9 10 11 18 12 22 13 14 15 16 17 19 20 25 24 21 26 23 \n",
        "48\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 50 49 \n",
        "49\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \n",
        "49\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \n",
        "47\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 33 34 32 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 \n",
        "45\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 19 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 39 40 41 43 44 45 38 42 50 46 47 48 49 \n",
        "40\n2 3 4 6 8 9 10 5 11 12 13 1 14 16 18 15 7 19 20 21 22 17 23 24 25 26 27 28 29 32 33 31 34 35 36 37 40 42 39 30 43 38 44 45 46 47 48 49 41 50 \n",
        "27\n1 2 3 5 6 9 10 11 12 14 16 7 42 17 20 22 28 19 29 30 33 34 8 32 35 24 26 13 25 36 37 40 4 23 39 41 43 21 38 44 46 45 18 47 27 48 49 15 31 50 \n",
        "17\n4 7 27 48 8 12 14 19 18 24 38 6 32 17 1 20 36 16 10 9 21 22 26 40 28 2 29 5 15 50 30 31 34 39 35 46 25 3 43 42 37 23 44 41 33 45 47 11 13 49 \n",
        "20\n1 49 2 3 22 5 10 11 35 6 12 9 4 39 13 27 7 41 19 24 25 26 20 30 28 32 8 46 23 14 50 48 21 47 36 31 38 37 34 17 15 40 18 16 29 42 43 33 44 45 \n",
        "0\n1 2 \n",
        "0\n2 1 \n",
        "1\n1 2 \n",
        "1\n1 2 \n",
        "2\n1 2 3 \n",
        "2\n1 2 3 \n",
        "2\n1 2 3 \n",
        "1\n1 2 3 \n",
        "0\n2 1 3 \n",
        "0\n3 2 1 \n",
        "1\n1 2 3 \n",
        "1\n2 1 3 \n",
        "1\n2 3 1 \n",
        "0\n3 1 2 \n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 343,
    "description": "Little Vova studies programming in an elite school. Vova and his classmates are supposed to write n progress tests, for each test they will get a mark from 1 to p. Vova is very smart and he can write every test for any mark, but he doesn't want to stand out from the crowd too much. If the sum of his marks for all tests exceeds value x, then his classmates notice how smart he is and start distracting him asking to let them copy his homework. And if the median of his marks will be lower than y points (the definition of a median is given in the notes), then his mom will decide that he gets too many bad marks and forbid him to play computer games.\n\nVova has already wrote k tests and got marks a_1, ..., a_{k}. He doesn't want to get into the first or the second situation described above and now he needs to determine which marks he needs to get for the remaining tests. Help him do that.\n\n\n-----Input-----\n\nThe first line contains 5 space-separated integers: n, k, p, x and y (1 \u2264 n \u2264 999, n is odd, 0 \u2264 k < n, 1 \u2264 p \u2264 1000, n \u2264 x \u2264 n\u00b7p, 1 \u2264 y \u2264 p). Here n is the number of tests that Vova is planned to write, k is the number of tests he has already written, p is the maximum possible mark for a test, x is the maximum total number of points so that the classmates don't yet disturb Vova, y is the minimum median point so that mom still lets him play computer games.\n\nThe second line contains k space-separated integers: a_1, ..., a_{k} (1 \u2264 a_{i} \u2264 p)\u00a0\u2014 the marks that Vova got for the tests he has already written.\n\n\n-----Output-----\n\nIf Vova cannot achieve the desired result, print \"-1\".\n\nOtherwise, print n - k space-separated integers\u00a0\u2014 the marks that Vova should get for the remaining tests. If there are multiple possible solutions, print any of them.\n\n\n-----Examples-----\nInput\n5 3 5 18 4\n3 5 4\n\nOutput\n4 1\n\nInput\n5 3 5 16 4\n5 5 5\n\nOutput\n-1\n\n\n\n-----Note-----\n\nThe median of sequence a_1,\u00a0...,\u00a0a_{n} where n is odd (in this problem n is always odd) is the element staying on (n + 1) / 2 position in the sorted list of a_{i}.\n\nIn the first sample the sum of marks equals 3 + 5 + 4 + 4 + 1 = 17, what doesn't exceed 18, that means that Vova won't be disturbed by his classmates. And the median point of the sequence {1, 3, 4, 4, 5} equals to 4, that isn't less than 4, so his mom lets him play computer games.\n\nPlease note that you do not have to maximize the sum of marks or the median mark. Any of the answers: \"4\u00a02\", \"2\u00a04\", \"5\u00a01\", \"1\u00a05\", \"4\u00a01\", \"1\u00a04\" for the first test is correct.\n\nIn the second sample Vova got three '5' marks, so even if he gets two '1' marks, the sum of marks will be 17, that is more than the required value of 16. So, the answer to this test is \"-1\".",
    "public_tests": {
      "input": [
        "5 3 5 18 4\n3 5 4\n",
        "5 3 5 16 4\n5 5 5\n"
      ],
      "output": [
        "4 1\n",
        "-1\n"
      ]
    },
    "private_tests": {
      "input": [
        "5 3 5 18 4\n3 5 4\n",
        "5 3 5 16 4\n5 5 5\n",
        "5 3 5 17 4\n5 5 5\n",
        "5 3 5 12 1\n5 5 1\n",
        "5 3 5 13 1\n5 5 1\n",
        "7 4 5 26 5\n5 2 4 5\n",
        "7 4 5 27 5\n5 2 4 5\n",
        "1 0 1000 999 1000\n\n",
        "1 0 1000 1000 1000\n\n",
        "1 0 1000 1000 999\n\n",
        "5 3 5 25 4\n3 3 3\n",
        "7 4 5 25 5\n5 5 4 5\n",
        "7 4 5 26 5\n5 5 4 5\n",
        "7 4 5 26 5\n5 5 4 5\n",
        "5 3 5 17 4\n3 3 4\n",
        "5 3 5 18 4\n3 3 4\n",
        "5 3 5 5 1\n1 1 2\n",
        "5 3 5 6 1\n1 1 2\n",
        "3 0 2 3 1\n\n",
        "3 0 2 4 2\n\n",
        "3 0 2 5 2\n\n",
        "9 7 3 16 2\n1 3 1 3 1 3 1\n",
        "9 7 3 17 2\n1 3 1 3 1 3 1\n",
        "9 7 3 18 2\n1 3 1 3 1 3 1\n",
        "9 7 3 18 3\n1 3 1 3 1 3 1\n",
        "9 7 3 19 3\n1 3 1 3 1 3 1\n",
        "9 7 3 20 3\n1 3 1 3 1 3 1\n",
        "9 6 3 27 2\n1 1 1 2 1 1\n",
        "9 6 3 13 2\n1 1 1 2 1 2\n",
        "9 6 3 14 2\n1 1 1 2 1 2\n",
        "5 0 5 13 4\n\n",
        "5 0 5 14 4\n\n",
        "5 0 5 5 1\n\n",
        "5 0 5 7 2\n\n",
        "5 0 5 8 2\n\n",
        "9 7 2 18 2\n1 1 1 2 2 1 1\n",
        "9 7 2 13 1\n2 2 2 1 1 2 2\n",
        "9 7 2 14 1\n2 2 2 1 1 2 2\n",
        "993 0 3 993 2\n\n",
        "997 100 3 1102 2\n1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 1 1 1 1 1 1 3\n",
        "11 8 10 110 5\n9 9 9 9 9 9 9 9\n",
        "9 8 10 90 2\n1 1 1 1 1 1 1 1\n",
        "3 2 10 30 2\n1 1\n",
        "3 2 10 30 1\n1 1\n",
        "5 4 100 14 4\n4 4 4 4\n",
        "5 4 2 8 2\n2 2 2 2\n",
        "5 4 2 7 2\n1 1 1 2\n",
        "11 10 1000 101 5\n10 10 10 10 10 10 10 10 10 10\n",
        "7 5 100 100 5\n7 1 1 1 1\n",
        "5 4 5 25 2\n1 1 1 1\n",
        "9 8 10 89 5\n8 8 8 8 8 8 8 8\n",
        "5 3 5 18 4\n1 1 1\n",
        "11 10 1000 100 5\n10 10 10 10 10 10 10 10 10 10\n",
        "9 7 10 30 2\n3 3 3 3 3 3 3\n",
        "5 4 2 10 2\n2 2 2 2\n",
        "7 6 1000 31 5\n5 5 5 5 5 5\n",
        "9 8 100 100 2\n1 1 1 1 1 1 1 1\n"
      ],
      "output": [
        "4 1\n",
        "-1\n",
        "1 1\n",
        "-1\n",
        "1 1\n",
        "-1\n",
        "5 5 1\n",
        "-1\n",
        "1000\n",
        "999\n",
        "-1\n",
        "-1\n",
        "5 1 1\n",
        "5 1 1\n",
        "-1\n",
        "4 4\n",
        "-1\n",
        "1 1\n",
        "1 1 1\n",
        "-1\n",
        "2 2 1\n",
        "-1\n",
        "2 2\n",
        "2 2\n",
        "-1\n",
        "3 3\n",
        "3 3\n",
        "-1\n",
        "-1\n",
        "2 2 2\n",
        "-1\n",
        "4 4 4 1 1\n",
        "1 1 1 1 1\n",
        "-1\n",
        "2 2 2 1 1\n",
        "-1\n",
        "-1\n",
        "1 1\n",
        "-1\n",
        "-1\n",
        "1 1 1\n",
        "-1\n",
        "-1\n",
        "1\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "1\n",
        "-1\n",
        "-1\n",
        "1\n",
        "-1\n",
        "-1\n",
        "1 1\n",
        "1\n",
        "1\n",
        "-1\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1494,
    "description": "Dreamoon has a string s and a pattern string p. He first removes exactly x characters from s obtaining string s' as a result. Then he calculates $\\operatorname{occ}(s^{\\prime}, p)$ that is defined as the maximal number of non-overlapping substrings equal to p that can be found in s'. He wants to make this number as big as possible.\n\nMore formally, let's define $\\operatorname{ans}(x)$ as maximum value of $\\operatorname{occ}(s^{\\prime}, p)$ over all s' that can be obtained by removing exactly x characters from s. Dreamoon wants to know $\\operatorname{ans}(x)$ for all x from 0 to |s| where |s| denotes the length of string s.\n\n\n-----Input-----\n\nThe first line of the input contains the string s (1 \u2264 |s| \u2264 2 000).\n\nThe second line of the input contains the string p (1 \u2264 |p| \u2264 500).\n\nBoth strings will only consist of lower case English letters.\n\n\n-----Output-----\n\nPrint |s| + 1 space-separated integers in a single line representing the $\\operatorname{ans}(x)$ for all x from 0 to |s|.\n\n\n-----Examples-----\nInput\naaaaa\naa\n\nOutput\n2 2 1 1 0 0\n\nInput\naxbaxxb\nab\n\nOutput\n0 1 1 2 1 1 0 0\n\n\n\n-----Note-----\n\nFor the first sample, the corresponding optimal values of s' after removal 0 through |s| = 5 characters from s are {\"aaaaa\", \"aaaa\", \"aaa\", \"aa\", \"a\", \"\"}. \n\nFor the second sample, possible corresponding optimal values of s' are {\"axbaxxb\", \"abaxxb\", \"axbab\", \"abab\", \"aba\", \"ab\", \"a\", \"\"}.",
    "public_tests": {
      "input": [
        "aaaaa\naa\n",
        "axbaxxb\nab\n"
      ],
      "output": [
        "2 2 1 1 0 0\n",
        "0 1 1 2 1 1 0 0\n"
      ]
    },
    "private_tests": {
      "input": [
        "aaaaa\naa\n",
        "axbaxxb\nab\n",
        "aabb\nab\n",
        "aaaaaaaaaaaaaaa\na\n",
        "aaaaaaaaaaa\nb\n",
        "ababababababababa\naba\n",
        "axxbaxxbaxxb\nab\n",
        "axaxxbaxabxbaxxbxb\nab\n",
        "ababcc\nabc\n",
        "a\na\n",
        "a\nb\n",
        "a\naa\n",
        "a\nab\n",
        "a\nbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb\n",
        "a\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n",
        "abxxxaxbxaxxxba\naba\n"
      ],
      "output": [
        "2 2 1 1 0 0\n",
        "0 1 1 2 1 1 0 0\n",
        "1 1 1 0 0\n",
        "15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0\n",
        "0 0 0 0 0 0 0 0 0 0 0 0\n",
        "4 4 4 4 4 4 3 3 3 2 2 2 1 1 1 0 0 0\n",
        "0 0 1 1 2 2 3 2 2 1 1 0 0\n",
        "1 1 2 2 3 3 3 3 3 3 3 3 3 2 2 1 1 0 0\n",
        "1 1 1 1 0 0 0\n",
        "1 0\n",
        "0 0\n",
        "0 0\n",
        "0 0\n",
        "0 0\n",
        "0 0\n",
        "0 0 1 1 1 1 2 2 2 2 1 1 1 0 0 0\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1439,
    "description": "You are given a sequence of numbers a_1, a_2, ..., a_{n}, and a number m.\n\nCheck if it is possible to choose a non-empty subsequence a_{i}_{j} such that the sum of numbers in this subsequence is divisible by m.\n\n\n-----Input-----\n\nThe first line contains two numbers, n and m (1 \u2264 n \u2264 10^6, 2 \u2264 m \u2264 10^3) \u2014 the size of the original sequence and the number such that sum should be divisible by it.\n\nThe second line contains n integers a_1, a_2, ..., a_{n} (0 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output-----\n\nIn the single line print either \"YES\" (without the quotes) if there exists the sought subsequence, or \"NO\" (without the quotes), if such subsequence doesn't exist.\n\n\n-----Examples-----\nInput\n3 5\n1 2 3\n\nOutput\nYES\n\nInput\n1 6\n5\n\nOutput\nNO\n\nInput\n4 6\n3 1 1 3\n\nOutput\nYES\n\nInput\n6 6\n5 5 5 5 5 5\n\nOutput\nYES\n\n\n\n-----Note-----\n\nIn the first sample test you can choose numbers 2 and 3, the sum of which is divisible by 5.\n\nIn the second sample test the single non-empty subsequence of numbers is a single number 5. Number 5 is not divisible by 6, that is, the sought subsequence doesn't exist.\n\nIn the third sample test you need to choose two numbers 3 on the ends.\n\nIn the fourth sample test you can take the whole subsequence.",
    "public_tests": {
      "input": [
        "3 5\n1 2 3\n",
        "1 6\n5\n",
        "4 6\n3 1 1 3\n",
        "6 6\n5 5 5 5 5 5\n"
      ],
      "output": [
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n"
      ]
    },
    "private_tests": {
      "input": [
        "3 5\n1 2 3\n",
        "1 6\n5\n",
        "4 6\n3 1 1 3\n",
        "6 6\n5 5 5 5 5 5\n",
        "4 5\n1 1 1 1\n",
        "5 5\n1 1 1 1 1\n",
        "4 7\n1 2 3 3\n",
        "1 47\n0\n",
        "2 47\n1 0\n",
        "9 11\n8 8 8 8 8 8 8 8 5\n",
        "10 11\n8 8 8 8 8 8 8 8 7 8\n",
        "3 5\n2 1 3\n",
        "100 968\n966 966 967 966 967 967 967 967 966 966 966 967 966 966 966 967 967 966 966 967 967 967 967 966 967 967 967 967 563 967 967 967 600 967 967 966 967 966 967 966 967 966 967 966 966 966 967 966 967 966 966 967 967 193 966 966 967 966 967 967 967 966 967 966 966 580 966 967 966 966 967 966 966 966 967 967 967 967 966 967 967 966 966 966 967 967 966 966 967 966 966 966 967 966 966 967 966 967 966 966\n",
        "100 951\n950 949 949 949 949 950 950 949 949 950 950 949 949 949 496 949 950 949 950 159 950 949 949 950 950 949 950 949 949 950 949 950 949 949 950 949 950 950 950 950 949 949 949 949 949 950 950 950 950 950 950 950 949 950 949 949 950 949 950 950 949 950 950 950 949 950 949 950 950 950 950 949 949 950 950 949 950 950 950 950 949 950 950 949 949 635 612 949 949 949 949 949 949 949 950 949 949 950 949 950\n",
        "100 940\n1 2 1 1 1 2 1 1 1 1 2 1 1 1 1 1 2 1 1 1 2 2 1 1 1 2 2 2 2 1 1 1 1 2 2 1 403 2 2 1 1 1 2 2 2 1 2 2 1 1 2 2 1 1 1 1 2 1 2 691 1 2 1 1 1 1 1 2 2 2 2 2 1 2 1 1 1 1 1 1 2 2 1 2 2 1 1 1 2 1 2 1 1 2 2 1 1 2 786 1\n",
        "100 917\n2 1 2 2 2 1 1 2 2 2 1 1 1 2 1 2 2 1 2 1 1 1 1 1 1 2 1 1 1 2 1 1 2 1 1 1 1 2 1 2 340 2 399 2 1 2 2 2 2 178 1 1 2 1 1 1 2 2 1 2 2 2 1 2 1 1 1 1 1 1 2 1 1 1 2 2 1 1 2 2 2 1 2 2 2 2 1 2 1 2 2 2 2 2 1 1 2 2 2 2\n",
        "1 2\n1000000000\n"
      ],
      "output": [
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "NO\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n",
        "YES\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1169,
    "description": "Vasya has got an undirected graph consisting of $n$ vertices and $m$ edges. This graph doesn't contain any self-loops or multiple edges. Self-loop is an edge connecting a vertex to itself. Multiple edges are a pair of edges such that they connect the same pair of vertices. Since the graph is undirected, the pair of edges $(1, 2)$ and $(2, 1)$ is considered to be multiple edges. Isolated vertex of the graph is a vertex such that there is no edge connecting this vertex to any other vertex.\n\nVasya wants to know the minimum and maximum possible number of isolated vertices in an undirected graph consisting of $n$ vertices and $m$ edges. \n\n\n-----Input-----\n\nThe only line contains two integers $n$ and $m~(1 \\le n \\le 10^5, 0 \\le m \\le \\frac{n (n - 1)}{2})$.\n\nIt is guaranteed that there exists a graph without any self-loops or multiple edges with such number of vertices and edges.\n\n\n-----Output-----\n\nIn the only line print two numbers $min$ and $max$ \u2014 the minimum and maximum number of isolated vertices, respectively.\n\n\n-----Examples-----\nInput\n4 2\n\nOutput\n0 1\n\nInput\n3 1\n\nOutput\n1 1\n\n\n\n-----Note-----\n\nIn the first example it is possible to construct a graph with $0$ isolated vertices: for example, it should contain edges $(1, 2)$ and $(3, 4)$. To get one isolated vertex, we may construct a graph with edges $(1, 2)$ and $(1, 3)$. \n\nIn the second example the graph will always contain exactly one isolated vertex.",
    "public_tests": {
      "input": [
        "4 2\n",
        "3 1\n"
      ],
      "output": [
        "0 1\n",
        "1 1\n"
      ]
    },
    "private_tests": {
      "input": [
        "4 2\n",
        "3 1\n",
        "20 55\n",
        "20 54\n",
        "20 56\n",
        "100000 3950493829\n",
        "100000 49997\n",
        "100 0\n",
        "1 0\n",
        "15 4\n",
        "100000 4999950000\n",
        "18889 138011083\n",
        "100 100\n",
        "5 5\n",
        "4 6\n",
        "2 1\n",
        "5 10\n",
        "10 2\n",
        "3 2\n",
        "6 15\n",
        "2 0\n",
        "6740 22710430\n",
        "10 45\n"
      ],
      "output": [
        "0 1\n",
        "1 1\n",
        "0 9\n",
        "0 9\n",
        "0 8\n",
        "0 11111\n",
        "6 99683\n",
        "100 100\n",
        "1 1\n",
        "7 11\n",
        "0 0\n",
        "0 2274\n",
        "0 85\n",
        "0 1\n",
        "0 0\n",
        "0 0\n",
        "0 0\n",
        "6 7\n",
        "0 0\n",
        "0 0\n",
        "2 2\n",
        "0 0\n",
        "0 0\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1785,
    "description": "Vasya became interested in bioinformatics. He's going to write an article about similar cyclic DNA sequences, so he invented a new method for determining the similarity of cyclic sequences.\n\nLet's assume that strings s and t have the same length n, then the function h(s, t) is defined as the number of positions in which the respective symbols of s and t are the same. Function h(s, t) can be used to define the function of Vasya distance \u03c1(s, t): $\\rho(s, t) = \\sum_{i = 0}^{n - 1} \\sum_{j = 0}^{n - 1} h(\\operatorname{shift}(s, i), \\operatorname{shift}(t, j))$ where $\\operatorname{shift}(s, i)$ is obtained from string s, by applying left circular shift i times. For example, \u03c1(\"AGC\", \"CGT\") =  h(\"AGC\", \"CGT\") + h(\"AGC\", \"GTC\") + h(\"AGC\", \"TCG\") +  h(\"GCA\", \"CGT\") + h(\"GCA\", \"GTC\") + h(\"GCA\", \"TCG\") +  h(\"CAG\", \"CGT\") + h(\"CAG\", \"GTC\") + h(\"CAG\", \"TCG\") =  1 + 1 + 0 + 0 + 1 + 1 + 1 + 0 + 1 = 6\n\nVasya found a string s of length n on the Internet. Now he wants to count how many strings t there are such that the Vasya distance from the string s attains maximum possible value. Formally speaking, t must satisfy the equation: $\\rho(s, t) = \\operatorname{max}_{u :|u|=|s|} \\rho(s, u)$.\n\nVasya could not try all possible strings to find an answer, so he needs your help. As the answer may be very large, count the number of such strings modulo 10^9 + 7.\n\n\n-----Input-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 10^5).\n\nThe second line of the input contains a single string of length n, consisting of characters \"ACGT\".\n\n\n-----Output-----\n\nPrint a single number\u00a0\u2014 the answer modulo 10^9 + 7.\n\n\n-----Examples-----\nInput\n1\nC\n\nOutput\n1\n\nInput\n2\nAG\n\nOutput\n4\n\nInput\n3\nTTT\n\nOutput\n1\n\n\n\n-----Note-----\n\nPlease note that if for two distinct strings t_1 and t_2 values \u03c1(s, t_1) \u0438 \u03c1(s, t_2) are maximum among all possible t, then both strings must be taken into account in the answer even if one of them can be obtained by a circular shift of another one.\n\nIn the first sample, there is \u03c1(\"C\", \"C\") = 1, for the remaining strings t of length 1 the value of \u03c1(s, t) is 0.\n\nIn the second sample, \u03c1(\"AG\", \"AG\") = \u03c1(\"AG\", \"GA\") = \u03c1(\"AG\", \"AA\") = \u03c1(\"AG\", \"GG\") = 4.\n\nIn the third sample, \u03c1(\"TTT\", \"TTT\") = 27",
    "public_tests": {
      "input": [
        "1\nC\n",
        "2\nAG\n",
        "3\nTTT\n"
      ],
      "output": [
        "1\n",
        "4\n",
        "1\n"
      ]
    },
    "private_tests": {
      "input": [
        "1\nC\n",
        "2\nAG\n",
        "3\nTTT\n",
        "4\nGACT\n",
        "1\nT\n",
        "2\nAG\n",
        "3\nGCA\n",
        "5\nACGTC\n",
        "15\nAGCGAATCCCATTGT\n",
        "20\nTAAGCGACCAGGTGCTTTAC\n",
        "30\nCCTTTCGGGGCGCGTTGGCCTTTGTCCTGC\n",
        "318\nTATCAATCGGTACGTGCGCATCATTGTCAATCGGGCTTCATGGCTTGCGGGCGCTACCCGAGGGGAAGCTGCGGACAGGTAGGTAAGATACACACGAACCAAACGGAGTTATGTTGGATAAATTGGCTGGAAGGGCGTAGGTATATCGAGTCGCGGACCTGGCATAGACTATCAGGGGCAGCGGTACAAGGCAACCGTGAGCGGGGTCTGCCCACCATTAGACCGATGCGCCGGCTCGTATATGTGATTCTGGTGAAAAGTATCATGCCGGGACGCGTAATGACCCGGCTGGCTAATCCACCGTGGCAGCAAAATAAC\n"
      ],
      "output": [
        "1\n",
        "4\n",
        "1\n",
        "256\n",
        "1\n",
        "4\n",
        "27\n",
        "1\n",
        "14348907\n",
        "511620083\n",
        "130653412\n",
        "1\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1641,
    "description": "Vasya is currently at a car rental service, and he wants to reach cinema. The film he has bought a ticket for starts in t minutes. There is a straight road of length s from the service to the cinema. Let's introduce a coordinate system so that the car rental service is at the point 0, and the cinema is at the point s.\n\nThere are k gas stations along the road, and at each of them you can fill a car with any amount of fuel for free! Consider that this operation doesn't take any time, i.e. is carried out instantly.\n\nThere are n cars in the rental service, i-th of them is characterized with two integers c_{i} and v_{i}\u00a0\u2014 the price of this car rent and the capacity of its fuel tank in liters. It's not allowed to fuel a car with more fuel than its tank capacity v_{i}. All cars are completely fueled at the car rental service.\n\nEach of the cars can be driven in one of two speed modes: normal or accelerated. In the normal mode a car covers 1 kilometer in 2 minutes, and consumes 1 liter of fuel. In the accelerated mode a car covers 1 kilometer in 1 minutes, but consumes 2 liters of fuel. The driving mode can be changed at any moment and any number of times.\n\nYour task is to choose a car with minimum price such that Vasya can reach the cinema before the show starts, i.e. not later than in t minutes. Assume that all cars are completely fueled initially.\n\n\n-----Input-----\n\nThe first line contains four positive integers n, k, s and t (1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 k \u2264 2\u00b710^5, 2 \u2264 s \u2264 10^9, 1 \u2264 t \u2264 2\u00b710^9)\u00a0\u2014 the number of cars at the car rental service, the number of gas stations along the road, the length of the road and the time in which the film starts. \n\nEach of the next n lines contains two positive integers c_{i} and v_{i} (1 \u2264 c_{i}, v_{i} \u2264 10^9)\u00a0\u2014 the price of the i-th car and its fuel tank capacity.\n\nThe next line contains k distinct integers g_1, g_2, ..., g_{k} (1 \u2264 g_{i} \u2264 s - 1)\u00a0\u2014 the positions of the gas stations on the road in arbitrary order.\n\n\n-----Output-----\n\nPrint the minimum rent price of an appropriate car, i.e. such car that Vasya will be able to reach the cinema before the film starts (not later than in t minutes). If there is no appropriate car, print -1.\n\n\n-----Examples-----\nInput\n3 1 8 10\n10 8\n5 7\n11 9\n3\n\nOutput\n10\n\nInput\n2 2 10 18\n10 4\n20 6\n5 3\n\nOutput\n20\n\n\n\n-----Note-----\n\nIn the first sample, Vasya can reach the cinema in time using the first or the third cars, but it would be cheaper to choose the first one. Its price is equal to 10, and the capacity of its fuel tank is 8. Then Vasya can drive to the first gas station in the accelerated mode in 3 minutes, spending 6 liters of fuel. After that he can full the tank and cover 2 kilometers in the normal mode in 4 minutes, spending 2 liters of fuel. Finally, he drives in the accelerated mode covering the remaining 3 kilometers in 3 minutes and spending 6 liters of fuel.",
    "public_tests": {
      "input": [
        "3 1 8 10\n10 8\n5 7\n11 9\n3\n",
        "2 2 10 18\n10 4\n20 6\n5 3\n"
      ],
      "output": [
        "10\n",
        "20\n"
      ]
    },
    "private_tests": {
      "input": [
        "3 1 8 10\n10 8\n5 7\n11 9\n3\n",
        "2 2 10 18\n10 4\n20 6\n5 3\n",
        "2 1 1000000000 2000000000\n111 1000000000\n101 1000000000\n5\n",
        "2 1 1000000000 2000000000\n111 999999998\n101 999999998\n1\n",
        "2 1 1000000000 2000000000\n111 999999999\n101 999999998\n1\n",
        "1 15 100 200\n283 8\n30 58 16 45 80 82 55 95 24 23 86 28 51 47 20\n",
        "3 2 300 400\n24 68\n13 65\n15 113\n127 177\n",
        "4 13 400 600\n13 30\n1 19\n1 160\n1 113\n58 73 15 319 194 362 128 157 336 162 77 90 96\n",
        "1 1 2 2\n1000000000 1000000000\n1\n",
        "1 1 2 1\n1 10\n1\n",
        "1 1 1000000000 1000000000\n1 1000000000\n1\n",
        "1 1 1000000000 1000000000\n100 1000000000\n1\n",
        "4 2 7 15\n10 9\n4 4\n9 3\n4 10\n1 6\n",
        "1 1 10 18\n5 6\n5\n"
      ],
      "output": [
        "10\n",
        "20\n",
        "101\n",
        "-1\n",
        "111\n",
        "-1\n",
        "-1\n",
        "1\n",
        "1000000000\n",
        "-1\n",
        "-1\n",
        "-1\n",
        "4\n",
        "5\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 2035,
    "description": "The map of the capital of Berland can be viewed on the infinite coordinate plane. Each point with integer coordinates contains a building, and there are streets connecting every building to four neighbouring buildings. All streets are parallel to the coordinate axes.\n\nThe main school of the capital is located in $(s_x, s_y)$. There are $n$ students attending this school, the $i$-th of them lives in the house located in $(x_i, y_i)$. It is possible that some students live in the same house, but no student lives in $(s_x, s_y)$.\n\nAfter classes end, each student walks from the school to his house along one of the shortest paths. So the distance the $i$-th student goes from the school to his house is $|s_x - x_i| + |s_y - y_i|$.\n\nThe Provision Department of Berland has decided to open a shawarma tent somewhere in the capital (at some point with integer coordinates). It is considered that the $i$-th student will buy a shawarma if at least one of the shortest paths from the school to the $i$-th student's house goes through the point where the shawarma tent is located. It is forbidden to place the shawarma tent at the point where the school is located, but the coordinates of the shawarma tent may coincide with the coordinates of the house of some student (or even multiple students).\n\nYou want to find the maximum possible number of students buying shawarma and the optimal location for the tent itself.\n\n\n-----Input-----\n\nThe first line contains three integers $n$, $s_x$, $s_y$ ($1 \\le n \\le 200\\,000$, $0 \\le s_x, s_y \\le 10^{9}$) \u2014 the number of students and the coordinates of the school, respectively.\n\nThen $n$ lines follow. The $i$-th of them contains two integers $x_i$, $y_i$ ($0 \\le x_i, y_i \\le 10^{9}$) \u2014 the location of the house where the $i$-th student lives. Some locations of houses may coincide, but no student lives in the same location where the school is situated.\n\n\n-----Output-----\n\nThe output should consist of two lines. The first of them should contain one integer $c$ \u2014 the maximum number of students that will buy shawarmas at the tent. \n\nThe second line should contain two integers $p_x$ and $p_y$ \u2014 the coordinates where the tent should be located. If there are multiple answers, print any of them. Note that each of $p_x$ and $p_y$ should be not less than $0$ and not greater than $10^{9}$.\n\n\n-----Examples-----\nInput\n4 3 2\n1 3\n4 2\n5 1\n4 1\n\nOutput\n3\n4 2\n\nInput\n3 100 100\n0 0\n0 0\n100 200\n\nOutput\n2\n99 100\n\nInput\n7 10 12\n5 6\n20 23\n15 4\n16 5\n4 54\n12 1\n4 15\n\nOutput\n4\n10 11\n\n\n\n-----Note-----\n\nIn the first example, If we build the shawarma tent in $(4, 2)$, then the students living in $(4, 2)$, $(4, 1)$ and $(5, 1)$ will visit it.\n\nIn the second example, it is possible to build the shawarma tent in $(1, 1)$, then both students living in $(0, 0)$ will visit it.",
    "public_tests": {
      "input": [
        "4 3 2\n1 3\n4 2\n5 1\n4 1\n",
        "3 100 100\n0 0\n0 0\n100 200\n",
        "7 10 12\n5 6\n20 23\n15 4\n16 5\n4 54\n12 1\n4 15\n"
      ],
      "output": [
        "3\n4 2\n",
        "2\n99 100\n",
        "4\n10 11\n"
      ]
    },
    "private_tests": {
      "input": [
        "4 3 2\n1 3\n4 2\n5 1\n4 1\n",
        "3 100 100\n0 0\n0 0\n100 200\n",
        "7 10 12\n5 6\n20 23\n15 4\n16 5\n4 54\n12 1\n4 15\n",
        "1 100 100\n50 70\n",
        "1 100 100\n101 100\n",
        "2 1000000000 100000\n1000000000 1000000\n1000000000 10000\n",
        "3 2 2\n2 4\n2 1\n3 6\n",
        "1 1000000000 7\n1000000000 9\n"
      ],
      "output": [
        "3\n4 2\n",
        "2\n99 100\n",
        "4\n10 11\n",
        "1\n99 100\n",
        "1\n101 100\n",
        "1\n1000000000 99999\n",
        "2\n2 3\n",
        "1\n1000000000 8\n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 1338,
    "description": "You are given a permutation p of numbers 1, 2, ..., n. Let's define f(p) as the following sum:$f(p) = \\sum_{i = 1}^{n} \\sum_{j = i}^{n} \\operatorname{min}(p_{i}, p_{i + 1}, \\ldots p_{j})$\n\nFind the lexicographically m-th permutation of length n in the set of permutations having the maximum possible value of f(p).\n\n\n-----Input-----\n\nThe single line of input contains two integers n and m (1 \u2264 m \u2264 cnt_{n}), where cnt_{n} is the number of permutations of length n with maximum possible value of f(p).\n\nThe problem consists of two subproblems. The subproblems have different constraints on the input. You will get some score for the correct submission of the subproblem. The description of the subproblems follows.  In subproblem B1 (3 points), the constraint 1 \u2264 n \u2264 8 will hold.  In subproblem B2 (4 points), the constraint 1 \u2264 n \u2264 50 will hold. \n\n\n-----Output-----\n\nOutput n number forming the required permutation.\n\n\n-----Examples-----\nInput\n2 2\n\nOutput\n2 1 \n\nInput\n3 2\n\nOutput\n1 3 2 \n\n\n\n-----Note-----\n\nIn the first example, both permutations of numbers {1, 2} yield maximum possible f(p) which is equal to 4. Among them, (2, 1) comes second in lexicographical order.",
    "public_tests": {
      "input": [
        "2 2\n",
        "3 2\n"
      ],
      "output": [
        "2 1 \n",
        "1 3 2 \n"
      ]
    },
    "private_tests": {
      "input": [
        "2 2\n",
        "3 2\n",
        "1 1\n",
        "3 1\n",
        "3 3\n",
        "3 4\n",
        "4 1\n",
        "4 3\n",
        "4 4\n",
        "4 8\n",
        "5 2\n",
        "5 7\n",
        "5 15\n",
        "6 23\n",
        "7 7\n",
        "7 44\n",
        "8 1\n",
        "8 127\n",
        "8 128\n"
      ],
      "output": [
        "2 1 \n",
        "1 3 2 \n",
        "1 \n",
        "1 2 3 \n",
        "2 3 1 \n",
        "3 2 1 \n",
        "1 2 3 4 \n",
        "1 3 4 2 \n",
        "1 4 3 2 \n",
        "4 3 2 1 \n",
        "1 2 3 5 4 \n",
        "1 4 5 3 2 \n",
        "4 5 3 2 1 \n",
        "2 5 6 4 3 1 \n",
        "1 2 3 6 7 5 4 \n",
        "2 4 7 6 5 3 1 \n",
        "1 2 3 4 5 6 7 8 \n",
        "7 8 6 5 4 3 2 1 \n",
        "8 7 6 5 4 3 2 1 \n"
      ]
    },
    "difficulty": "interview"
  },
  {
    "name": 694,
    "description": "Polycarpus participates in a competition for hacking into a new secure messenger. He's almost won.\n\nHaving carefully studied the interaction protocol, Polycarpus came to the conclusion that the secret key can be obtained if he properly cuts the public key of the application into two parts. The public key is a long integer which may consist of even a million digits!\n\nPolycarpus needs to find such a way to cut the public key into two nonempty parts, that the first (left) part is divisible by a as a separate number, and the second (right) part is divisible by b as a separate number. Both parts should be positive integers that have no leading zeros. Polycarpus knows values a and b.\n\nHelp Polycarpus and find any suitable method to cut the public key.\n\n\n-----Input-----\n\nThe first line of the input contains the public key of the messenger \u2014 an integer without leading zeroes, its length is in range from 1 to 10^6 digits. The second line contains a pair of space-separated positive integers a, b (1 \u2264 a, b \u2264 10^8).\n\n\n-----Output-----\n\nIn the first line print \"YES\" (without the quotes), if the method satisfying conditions above exists. In this case, next print two lines \u2014 the left and right parts after the cut. These two parts, being concatenated, must be exactly identical to the public key. The left part must be divisible by a, and the right part must be divisible by b. The two parts must be positive integers having no leading zeros. If there are several answers, print any of them.\n\nIf there is no answer, print in a single line \"NO\" (without the quotes).\n\n\n-----Examples-----\nInput\n116401024\n97 1024\n\nOutput\nYES\n11640\n1024\n\nInput\n284254589153928171911281811000\n1009 1000\n\nOutput\nYES\n2842545891539\n28171911281811000\n\nInput\n120\n12 1\n\nOutput\nNO",
    "public_tests": {
      "input": [
        "116401024\n97 1024\n",
        "284254589153928171911281811000\n1009 1000\n",
        "120\n12 1\n"
      ],
      "output": [
        "YES\n11640\n1024\n",
        "YES\n2842545891539\n28171911281811000\n",
        "NO\n"
      ]
    },
    "private_tests": {
      "input": [
        "116401024\n97 1024\n",
        "284254589153928171911281811000\n1009 1000\n",
        "120\n12 1\n",
        "604\n6 4\n",
        "2108\n7 8\n",
        "7208\n10 1\n",
        "97502821\n25 91\n",
        "803405634\n309 313\n",
        "15203400\n38 129\n",
        "8552104774\n973 76\n",
        "2368009434\n320 106\n",
        "425392502895812\n4363 2452\n",
        "142222201649130\n4854 7853\n",
        "137871307228140\n9375 9092\n",
        "8784054131798916\n9 61794291\n",
        "24450015102786098\n75 55729838\n",
        "100890056766780885\n177 88010513\n",
        "2460708054301924950\n9428 85246350\n",
        "39915186055525904358\n90102 63169402\n",
        "199510140021146591389\n458644 28692797\n",
        "4802711808015050898224\n8381696 51544172\n",
        "6450225349035040017740\n8872387 56607460\n",
        "4530228043401488\n71454701 8\n",
        "18769213650033200\n56876405 100\n",
        "389744672208415\n17019418 765\n",
        "1256363256202133560\n26228878 7460\n",
        "10213094404080691512\n64639838 83359\n",
        "14525757302059286788\n44151238 152801\n",
        "443852406270256089240\n54194433 423288\n",
        "6450225349035040017740\n8872387 56607460\n",
        "16375289070073689\n33903290 216\n",
        "3415280033041307294\n15179 79809921\n",
        "4261508098904115227\n52546339 6430\n",
        "15016\n15 16\n",
        "120007\n120 7\n",
        "23\n2 3\n"
      ],
      "output": [
        "YES\n11640\n1024\n",
        "YES\n2842545891539\n28171911281811000\n",
        "NO\n",
        "YES\n60\n4\n",
        "YES\n210\n8\n",
        "YES\n720\n8\n",
        "YES\n9750\n2821\n",
        "YES\n80340\n5634\n",
        "NO\n",
        "NO\n",
        "YES\n236800\n9434\n",
        "YES\n42539250\n2895812\n",
        "YES\n14222220\n1649130\n",
        "NO\n",
        "YES\n87840\n54131798916\n",
        "YES\n244500\n15102786098\n",
        "YES\n1008900\n56766780885\n",
        "YES\n24607080\n54301924950\n",
        "YES\n399151860\n55525904358\n",
        "YES\n1995101400\n21146591389\n",
        "YES\n48027118080\n15050898224\n",
        "YES\n64502253490\n35040017740\n",
        "YES\n453022804340\n1488\n",
        "YES\n187692136500\n33200\n",
        "YES\n38974467220\n8415\n",
        "YES\n125636325620\n2133560\n",
        "YES\n102130944040\n80691512\n",
        "YES\n145257573020\n59286788\n",
        "YES\n443852406270\n256089240\n",
        "YES\n64502253490\n35040017740\n",
        "NO\n",
        "NO\n",
        "NO\n",
        "YES\n150\n16\n",
        "YES\n12000\n7\n",
        "YES\n2\n3\n"
      ]
    },
    "difficulty": "interview"
  }
]